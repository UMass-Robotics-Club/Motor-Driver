/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Generated by cantools 39.4.5 with automatic customizations by REV from public
 * REV ServoController spec version 0.0.1-dev.1
 */

#ifndef SERVO_HUB_H
#define SERVO_HUB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifndef EINVAL
#define EINVAL 22
#endif

/* Frame ids. */
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_FRAME_ID (0xc050000u)
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_FRAME_ID (0xc050040u)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_FRAME_ID (0xc050080u)
#define SERVO_HUB_RESET_CONFIGURATION_FRAME_ID (0xc050100u)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_FRAME_ID (0xc050140u)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_FRAME_ID (0xc050180u)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_FRAME_ID (0xc0501c0u)
#define SERVO_HUB_GET_PULSE_RANGE_FRAME_ID (0xc050200u)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_FRAME_ID (0xc050240u)
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_FRAME_ID (0xc050280u)
#define SERVO_HUB_CLEAR_FAULTS_FRAME_ID (0xc051b80u)
#define SERVO_HUB_GET_VERSION_FRAME_ID (0xc052600u)
#define SERVO_HUB_GET_HARDWARE_FAULTS_FRAME_ID (0xc054240u)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_FRAME_ID (0xc055080u)
#define SERVO_HUB_RESET_CONFIGURATION_RESPONSE_FRAME_ID (0xc055100u)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_FRAME_ID (0xc055140u)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_FRAME_ID (0xc055180u)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_FRAME_ID (0xc0551c0u)
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_FRAME_ID (0xc055200u)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_FRAME_ID (0xc055240u)
#define SERVO_HUB_CLEAR_FAULTS_RESPONSE_FRAME_ID (0xc056b80u)
#define SERVO_HUB_SET_CAN_ID_FRAME_ID (0xc057f80u)
#define SERVO_HUB_STATUS_0_FRAME_ID (0xc05b800u)
#define SERVO_HUB_STATUS_1_FRAME_ID (0xc05b840u)
#define SERVO_HUB_STATUS_2_FRAME_ID (0xc05b880u)
#define SERVO_HUB_STATUS_3_FRAME_ID (0xc05b8c0u)
#define SERVO_HUB_STATUS_4_FRAME_ID (0xc05b900u)

/* Frame lengths in bytes. */
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_LENGTH (7u)
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_LENGTH (7u)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_LENGTH (3u)
#define SERVO_HUB_RESET_CONFIGURATION_LENGTH (2u)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_LENGTH (3u)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_LENGTH (3u)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_LENGTH (3u)
#define SERVO_HUB_GET_PULSE_RANGE_LENGTH (1u)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_LENGTH (2u)
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_LENGTH (8u)
#define SERVO_HUB_CLEAR_FAULTS_LENGTH (0u)
#define SERVO_HUB_GET_VERSION_LENGTH (8u)
#define SERVO_HUB_GET_HARDWARE_FAULTS_LENGTH (8u)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_LENGTH (4u)
#define SERVO_HUB_RESET_CONFIGURATION_RESPONSE_LENGTH (2u)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_LENGTH (4u)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_LENGTH (4u)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_LENGTH (4u)
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_LENGTH (6u)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_LENGTH (3u)
#define SERVO_HUB_CLEAR_FAULTS_RESPONSE_LENGTH (0u)
#define SERVO_HUB_SET_CAN_ID_LENGTH (1u)
#define SERVO_HUB_STATUS_0_LENGTH (5u)
#define SERVO_HUB_STATUS_1_LENGTH (8u)
#define SERVO_HUB_STATUS_2_LENGTH (7u)
#define SERVO_HUB_STATUS_3_LENGTH (7u)
#define SERVO_HUB_STATUS_4_LENGTH (8u)

/* Extended or standard frame types. */
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_IS_EXTENDED (1)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_IS_EXTENDED (1)
#define SERVO_HUB_RESET_CONFIGURATION_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_IS_EXTENDED (1)
#define SERVO_HUB_GET_PULSE_RANGE_IS_EXTENDED (1)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_IS_EXTENDED (1)
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_IS_EXTENDED (1)
#define SERVO_HUB_CLEAR_FAULTS_IS_EXTENDED (1)
#define SERVO_HUB_GET_VERSION_IS_EXTENDED (1)
#define SERVO_HUB_GET_HARDWARE_FAULTS_IS_EXTENDED (1)
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_RESET_CONFIGURATION_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_CLEAR_FAULTS_RESPONSE_IS_EXTENDED (1)
#define SERVO_HUB_SET_CAN_ID_IS_EXTENDED (1)
#define SERVO_HUB_STATUS_0_IS_EXTENDED (1)
#define SERVO_HUB_STATUS_1_IS_EXTENDED (1)
#define SERVO_HUB_STATUS_2_IS_EXTENDED (1)
#define SERVO_HUB_STATUS_3_IS_EXTENDED (1)
#define SERVO_HUB_STATUS_4_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */

/* Signal choices. */

/* Frame Names. */
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_NAME \
    "SET_SERVO_0_TO_2_PULSE_WIDTHS"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_NAME \
    "SET_SERVO_3_TO_5_PULSE_WIDTHS"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_NAME "SET_BANKS_PULSE_PERIOD"
#define SERVO_HUB_RESET_CONFIGURATION_NAME "RESET_CONFIGURATION"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_NAME "SET_SERVO_MIN_PULSE_WIDTH"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_NAME \
    "SET_SERVO_CENTER_PULSE_WIDTH"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_NAME "SET_SERVO_MAX_PULSE_WIDTH"
#define SERVO_HUB_GET_PULSE_RANGE_NAME "GET_PULSE_RANGE"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_NAME "SET_DISABLE_BEHAVIOR"
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_NAME "GET_DISABLE_BEHAVIOR"
#define SERVO_HUB_CLEAR_FAULTS_NAME "CLEAR_FAULTS"
#define SERVO_HUB_GET_VERSION_NAME "GET_VERSION"
#define SERVO_HUB_GET_HARDWARE_FAULTS_NAME "GET_HARDWARE_FAULTS"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_NAME \
    "SET_BANKS_PULSE_PERIOD_RESPONSE"
#define SERVO_HUB_RESET_CONFIGURATION_RESPONSE_NAME \
    "RESET_CONFIGURATION_RESPONSE"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_NAME \
    "SET_SERVO_MIN_PULSE_RESPONSE"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_NAME \
    "SET_SERVO_CENTER_PULSE_RESPONSE"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_NAME \
    "SET_SERVO_MAX_PULSE_RESPONSE"
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_NAME "GET_PULSE_RANGE_RESPONSE"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_NAME \
    "SET_DISABLE_BEHAVIOR_RESPONSE"
#define SERVO_HUB_CLEAR_FAULTS_RESPONSE_NAME "CLEAR_FAULTS_RESPONSE"
#define SERVO_HUB_SET_CAN_ID_NAME "SET_CAN_ID"
#define SERVO_HUB_STATUS_0_NAME "STATUS_0"
#define SERVO_HUB_STATUS_1_NAME "STATUS_1"
#define SERVO_HUB_STATUS_2_NAME "STATUS_2"
#define SERVO_HUB_STATUS_3_NAME "STATUS_3"
#define SERVO_HUB_STATUS_4_NAME "STATUS_4"

/* Signal Names. */
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_PULSE_WIDTH_0_NAME \
    "PULSE_WIDTH_0"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_PULSE_WIDTH_1_NAME \
    "PULSE_WIDTH_1"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_PULSE_WIDTH_2_NAME \
    "PULSE_WIDTH_2"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_ENABLE_CHANNEL_0_NAME \
    "ENABLE_CHANNEL_0"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_ENABLE_CHANNEL_1_NAME \
    "ENABLE_CHANNEL_1"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_ENABLE_CHANNEL_2_NAME \
    "ENABLE_CHANNEL_2"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_POWER_CHANNEL_0_NAME \
    "POWER_CHANNEL_0"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_POWER_CHANNEL_1_NAME \
    "POWER_CHANNEL_1"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_POWER_CHANNEL_2_NAME \
    "POWER_CHANNEL_2"
#define SERVO_HUB_SET_SERVO_0_TO_2_PULSE_WIDTHS_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_PULSE_WIDTH_3_NAME \
    "PULSE_WIDTH_3"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_PULSE_WIDTH_4_NAME \
    "PULSE_WIDTH_4"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_PULSE_WIDTH_5_NAME \
    "PULSE_WIDTH_5"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_ENABLE_CHANNEL_3_NAME \
    "ENABLE_CHANNEL_3"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_ENABLE_CHANNEL_4_NAME \
    "ENABLE_CHANNEL_4"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_ENABLE_CHANNEL_5_NAME \
    "ENABLE_CHANNEL_5"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_POWER_CHANNEL_3_NAME \
    "POWER_CHANNEL_3"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_POWER_CHANNEL_4_NAME \
    "POWER_CHANNEL_4"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_POWER_CHANNEL_5_NAME \
    "POWER_CHANNEL_5"
#define SERVO_HUB_SET_SERVO_3_TO_5_PULSE_WIDTHS_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_CHANNEL_BANKS_BITFIELD_NAME \
    "CHANNEL_BANKS_BITFIELD"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_PULSE_PERIOD_NAME "PULSE_PERIOD"
#define SERVO_HUB_RESET_CONFIGURATION_MAGIC_NAME "MAGIC"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_WIDTH_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_WIDTH_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_WIDTH_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_GET_PULSE_RANGE_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_MASK_NAME "MASK"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_BEHAVIOR_BITFIELD_NAME \
    "BEHAVIOR_BITFIELD"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESERVED_NAME "RESERVED"
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_BEHAVIOR_BITFIELD_NAME \
    "BEHAVIOR_BITFIELD"
#define SERVO_HUB_GET_DISABLE_BEHAVIOR_RESERVED_NAME "RESERVED"
#define SERVO_HUB_GET_VERSION_FIRMWARE_FIX_NAME "FIRMWARE_FIX"
#define SERVO_HUB_GET_VERSION_FIRMWARE_MINOR_NAME "FIRMWARE_MINOR"
#define SERVO_HUB_GET_VERSION_FIRMWARE_YEAR_NAME "FIRMWARE_YEAR"
#define SERVO_HUB_GET_VERSION_HARDWARE_MINOR_NAME "HARDWARE_MINOR"
#define SERVO_HUB_GET_VERSION_HARDWARE_MAJOR_NAME "HARDWARE_MAJOR"
#define SERVO_HUB_GET_VERSION_RESERVED_NAME "RESERVED"
#define SERVO_HUB_GET_HARDWARE_FAULTS_ADC_INIT_NAME "ADC_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CRC_INIT_NAME "CRC_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_DAC_INIT_NAME "DAC_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_FDCAN_INIT_NAME "FDCAN_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_I2_C_INIT_NAME "I2C_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_SYSCLOCK_INIT_NAME "SYSCLOCK_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_SPI_INIT_NAME "SPI_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_TIM_INIT_NAME "TIM_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_USART_INIT_NAME "USART_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA1_INIT_NAME "CSA1_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA1_READ_NAME "CSA1_READ"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA1_INVALID_NAME "CSA1_INVALID"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA2_INIT_NAME "CSA2_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA2_READ_NAME "CSA2_READ"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CSA2_INVALID_NAME "CSA2_INVALID"
#define SERVO_HUB_GET_HARDWARE_FAULTS_FRC_CAN_INIT_NAME "FRC_CAN_INIT"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CAN_TX_NAME "CAN_TX"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CAN_RX_NAME "CAN_RX"
#define SERVO_HUB_GET_HARDWARE_FAULTS_CAN_SET_ID_NAME "CAN_SET_ID"
#define SERVO_HUB_GET_HARDWARE_FAULTS_EEPROM_READ_NAME "EEPROM_READ"
#define SERVO_HUB_GET_HARDWARE_FAULTS_EEPROM_WRITE_NAME "EEPROM_WRITE"
#define SERVO_HUB_GET_HARDWARE_FAULTS_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_CHANNEL_BANKS_BITFIELD_NAME \
    "CHANNEL_BANKS_BITFIELD"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_PULSE_PERIOD_NAME \
    "PULSE_PERIOD"
#define SERVO_HUB_SET_BANKS_PULSE_PERIOD_RESPONSE_RESULT_NAME "RESULT"
#define SERVO_HUB_RESET_CONFIGURATION_RESPONSE_MAGIC_NAME "MAGIC"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_SET_SERVO_MIN_PULSE_RESPONSE_RESULT_NAME "RESULT"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_SET_SERVO_CENTER_PULSE_RESPONSE_RESULT_NAME "RESULT"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_CHANNEL_NAME "CHANNEL"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_PULSEUS_NAME "PULSEUS"
#define SERVO_HUB_SET_SERVO_MAX_PULSE_RESPONSE_RESULT_NAME "RESULT"
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_MINPULSEUS_NAME "MINPULSEUS"
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_CENTERPULSEUS_NAME "CENTERPULSEUS"
#define SERVO_HUB_GET_PULSE_RANGE_RESPONSE_MAXPULSEUS_NAME "MAXPULSEUS"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_RESULT_NAME "RESULT"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_MASK_NAME "MASK"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_BEHAVIOR_BITFIELD_NAME \
    "BEHAVIOR_BITFIELD"
#define SERVO_HUB_SET_DISABLE_BEHAVIOR_RESPONSE_RESERVED_NAME "RESERVED"
#define SERVO_HUB_SET_CAN_ID_ID_NAME "ID"
#define SERVO_HUB_STATUS_0_VOLTAGE_NAME "VOLTAGE"
#define SERVO_HUB_STATUS_0_SERVO_VOLTAGE_NAME "SERVO_VOLTAGE"
#define SERVO_HUB_STATUS_0_DEVICE_CURRENT_NAME "DEVICE_CURRENT"
#define SERVO_HUB_STATUS_0_PRIMARY_HEARTBEAT_LOCK_NAME "PRIMARY_HEARTBEAT_LOCK"
#define SERVO_HUB_STATUS_0_SYSTEM_ENABLED_NAME "SYSTEM_ENABLED"
#define SERVO_HUB_STATUS_0_COMMUNICATION_MODE_NAME "COMMUNICATION_MODE"
#define SERVO_HUB_STATUS_0_RESERVED_NAME "RESERVED"
#define SERVO_HUB_STATUS_1_REGULATOR_PGOOD_FAULT_NAME "REGULATOR_PGOOD_FAULT"
#define SERVO_HUB_STATUS_1_BROWNOUT_NAME "BROWNOUT"
#define SERVO_HUB_STATUS_1_CAN_WARNING_NAME "CAN_WARNING"
#define SERVO_HUB_STATUS_1_CAN_BUS_OFF_NAME "CAN_BUS_OFF"
#define SERVO_HUB_STATUS_1_HARDWARE_FAULT_NAME "HARDWARE_FAULT"
#define SERVO_HUB_STATUS_1_FIRMWARE_FAULT_NAME "FIRMWARE_FAULT"
#define SERVO_HUB_STATUS_1_HAS_RESET_NAME "HAS_RESET"
#define SERVO_HUB_STATUS_1_CHANNEL_0_OVERCURRENT_NAME "CHANNEL_0_OVERCURRENT"
#define SERVO_HUB_STATUS_1_CHANNEL_1_OVERCURRENT_NAME "CHANNEL_1_OVERCURRENT"
#define SERVO_HUB_STATUS_1_CHANNEL_2_OVERCURRENT_NAME "CHANNEL_2_OVERCURRENT"
#define SERVO_HUB_STATUS_1_CHANNEL_3_OVERCURRENT_NAME "CHANNEL_3_OVERCURRENT"
#define SERVO_HUB_STATUS_1_CHANNEL_4_OVERCURRENT_NAME "CHANNEL_4_OVERCURRENT"
#define SERVO_HUB_STATUS_1_CHANNEL_5_OVERCURRENT_NAME "CHANNEL_5_OVERCURRENT"
#define SERVO_HUB_STATUS_1_LOW_BATTERY_FAULT_NAME "LOW_BATTERY_FAULT"
#define SERVO_HUB_STATUS_1_RESERVED_NAME "RESERVED"
#define SERVO_HUB_STATUS_1_STICKY_REGULATOR_PGOOD_FAULT_NAME \
    "STICKY_REGULATOR_PGOOD_FAULT"
#define SERVO_HUB_STATUS_1_STICKY_BROWNOUT_NAME "STICKY_BROWNOUT"
#define SERVO_HUB_STATUS_1_STICKY_CAN_WARNING_NAME "STICKY_CAN_WARNING"
#define SERVO_HUB_STATUS_1_STICKY_CAN_BUS_OFF_NAME "STICKY_CAN_BUS_OFF"
#define SERVO_HUB_STATUS_1_STICKY_HARDWARE_FAULT_NAME "STICKY_HARDWARE_FAULT"
#define SERVO_HUB_STATUS_1_STICKY_FIRMWARE_FAULT_NAME "STICKY_FIRMWARE_FAULT"
#define SERVO_HUB_STATUS_1_STICKY_HAS_RESET_NAME "STICKY_HAS_RESET"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_0_OVERCURRENT_NAME \
    "STICKY_CHANNEL_0_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_1_OVERCURRENT_NAME \
    "STICKY_CHANNEL_1_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_2_OVERCURRENT_NAME \
    "STICKY_CHANNEL_2_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_3_OVERCURRENT_NAME \
    "STICKY_CHANNEL_3_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_4_OVERCURRENT_NAME \
    "STICKY_CHANNEL_4_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_CHANNEL_5_OVERCURRENT_NAME \
    "STICKY_CHANNEL_5_OVERCURRENT"
#define SERVO_HUB_STATUS_1_STICKY_LOW_BATTERY_FAULT_NAME \
    "STICKY_LOW_BATTERY_FAULT"
#define SERVO_HUB_STATUS_1_RESERVED_2_NAME "RESERVED_2"
#define SERVO_HUB_STATUS_2_CHANNEL_0_PULSE_WIDTH_NAME "CHANNEL_0_PULSE_WIDTH"
#define SERVO_HUB_STATUS_2_CHANNEL_1_PULSE_WIDTH_NAME "CHANNEL_1_PULSE_WIDTH"
#define SERVO_HUB_STATUS_2_CHANNEL_2_PULSE_WIDTH_NAME "CHANNEL_2_PULSE_WIDTH"
#define SERVO_HUB_STATUS_2_CHANNEL_0_ENABLED_NAME "CHANNEL_0_ENABLED"
#define SERVO_HUB_STATUS_2_CHANNEL_1_ENABLED_NAME "CHANNEL_1_ENABLED"
#define SERVO_HUB_STATUS_2_CHANNEL_2_ENABLED_NAME "CHANNEL_2_ENABLED"
#define SERVO_HUB_STATUS_2_CHANNEL_0_OUT_OF_RANGE_NAME "CHANNEL_0_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_2_CHANNEL_1_OUT_OF_RANGE_NAME "CHANNEL_1_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_2_CHANNEL_2_OUT_OF_RANGE_NAME "CHANNEL_2_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_2_RESERVED_NAME "RESERVED"
#define SERVO_HUB_STATUS_3_CHANNEL_3_PULSE_WIDTH_NAME "CHANNEL_3_PULSE_WIDTH"
#define SERVO_HUB_STATUS_3_CHANNEL_4_PULSE_WIDTH_NAME "CHANNEL_4_PULSE_WIDTH"
#define SERVO_HUB_STATUS_3_CHANNEL_5_PULSE_WIDTH_NAME "CHANNEL_5_PULSE_WIDTH"
#define SERVO_HUB_STATUS_3_CHANNEL_3_ENABLED_NAME "CHANNEL_3_ENABLED"
#define SERVO_HUB_STATUS_3_CHANNEL_4_ENABLED_NAME "CHANNEL_4_ENABLED"
#define SERVO_HUB_STATUS_3_CHANNEL_5_ENABLED_NAME "CHANNEL_5_ENABLED"
#define SERVO_HUB_STATUS_3_CHANNEL_3_OUT_OF_RANGE_NAME "CHANNEL_3_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_3_CHANNEL_4_OUT_OF_RANGE_NAME "CHANNEL_4_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_3_CHANNEL_5_OUT_OF_RANGE_NAME "CHANNEL_5_OUT_OF_RANGE"
#define SERVO_HUB_STATUS_3_RESERVED_NAME "RESERVED"
#define SERVO_HUB_STATUS_4_CHANNEL_0_CURRENT_NAME "CHANNEL_0_CURRENT"
#define SERVO_HUB_STATUS_4_CHANNEL_1_CURRENT_NAME "CHANNEL_1_CURRENT"
#define SERVO_HUB_STATUS_4_CHANNEL_2_CURRENT_NAME "CHANNEL_2_CURRENT"
#define SERVO_HUB_STATUS_4_CHANNEL_3_CURRENT_NAME "CHANNEL_3_CURRENT"
#define SERVO_HUB_STATUS_4_CHANNEL_4_CURRENT_NAME "CHANNEL_4_CURRENT"
#define SERVO_HUB_STATUS_4_CHANNEL_5_CURRENT_NAME "CHANNEL_5_CURRENT"
#define SERVO_HUB_STATUS_4_RESERVED_NAME "RESERVED"

/**
 * Signals in message SET_SERVO_0_TO_2_PULSE_WIDTHS.
 *
 * Set the position of all servo channels
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_0;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_0;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_0;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_set_servo_0_to_2_pulse_widths_t;

/**
 * Signals in message SET_SERVO_3_TO_5_PULSE_WIDTHS.
 *
 * Set the position of all servo channels
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_width_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_channel_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t power_channel_5;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_set_servo_3_to_5_pulse_widths_t;

/**
 * Signals in message SET_BANKS_PULSE_PERIOD.
 *
 * Set the pulse period for a side of servo hub in microseconds. In response, a
 * Set Banks Pulse Period Response frame will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * A bitfield where each bit represents one of the channel banks. Bit 0
     * represents the bank for channels 0-2, and bit 1 represents the bank for
     * channels 3-5
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_banks_bitfield;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_period;
} servo_hub_set_banks_pulse_period_t;

/**
 * Signals in message RESET_CONFIGURATION.
 *
 * Reset the configuration to the default value
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 48879..48879 (48879..48879 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic;
} servo_hub_reset_configuration_t;

/**
 * Signals in message SET_SERVO_MIN_PULSE_WIDTH.
 *
 * Set the minimum pulse width for a channel in microseconds
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;
} servo_hub_set_servo_min_pulse_width_t;

/**
 * Signals in message SET_SERVO_CENTER_PULSE_WIDTH.
 *
 * Set the center pulse width for a channel in microseconds
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;
} servo_hub_set_servo_center_pulse_width_t;

/**
 * Signals in message SET_SERVO_MAX_PULSE_WIDTH.
 *
 * Set the maximum pulse width for a channel in microseconds
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;
} servo_hub_set_servo_max_pulse_width_t;

/**
 * Signals in message GET_PULSE_RANGE.
 *
 * Get the range of accepted pulse values
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;
} servo_hub_get_pulse_range_t;

/**
 * Signals in message SET_DISABLE_BEHAVIOR.
 *
 * Set whether power should be maintained when a channel is disabled
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t behavior_bitfield;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_set_disable_behavior_t;

/**
 * Signals in message GET_DISABLE_BEHAVIOR.
 *
 * Get whether power should be maintained when a channel is disabled
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t behavior_bitfield;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
} servo_hub_get_disable_behavior_t;

/**
 * Signals in message CLEAR_FAULTS.
 *
 * In response, a Clear Faults Response frame is sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} servo_hub_clear_faults_t;

/**
 * Signals in message GET_VERSION.
 *
 * The device version
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_fix;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_year;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hardware_minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hardware_major;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;
} servo_hub_get_version_t;

/**
 * Signals in message GET_HARDWARE_FAULTS.
 *
 * Get detailed hardware fault information
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t adc_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dac_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fdcan_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t i2_c_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sysclock_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t spi_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tim_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t usart_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa1_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa1_read;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa1_invalid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa2_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa2_read;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t csa2_invalid;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t frc_can_init;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_tx;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_rx;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_set_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t eeprom_read;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t eeprom_write;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t reserved;
} servo_hub_get_hardware_faults_t;

/**
 * Signals in message SET_BANKS_PULSE_PERIOD_RESPONSE.
 *
 * Response to set frame period command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * A bitfield where each bit represents one of the channel banks. Bit 0
     * represents the bank for channels 0-2, and bit 1 represents the bank for
     * channels 3-5
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_banks_bitfield;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulse_period;

    /**
     * 0 indicates success
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result;
} servo_hub_set_banks_pulse_period_response_t;

/**
 * Signals in message RESET_CONFIGURATION_RESPONSE.
 *
 * Response for reset the configuration to the default value
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 48879..48879 (48879..48879 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic;
} servo_hub_reset_configuration_response_t;

/**
 * Signals in message SET_SERVO_MIN_PULSE_RESPONSE.
 *
 * Response to set min pulse width command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result;
} servo_hub_set_servo_min_pulse_response_t;

/**
 * Signals in message SET_SERVO_CENTER_PULSE_RESPONSE.
 *
 * Response to set servo center pulse width command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result;
} servo_hub_set_servo_center_pulse_response_t;

/**
 * Signals in message SET_SERVO_MAX_PULSE_RESPONSE.
 *
 * Response to set max pulse width command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t pulseus;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result;
} servo_hub_set_servo_max_pulse_response_t;

/**
 * Signals in message GET_PULSE_RANGE_RESPONSE.
 *
 * Get the range of accepted pulse values response
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t minpulseus;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t centerpulseus;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t maxpulseus;
} servo_hub_get_pulse_range_response_t;

/**
 * Signals in message SET_DISABLE_BEHAVIOR_RESPONSE.
 *
 * Set whether power should be maintained when a channel is disabled
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t behavior_bitfield;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_set_disable_behavior_response_t;

/**
 * Signals in message CLEAR_FAULTS_RESPONSE.
 *
 * Response for a Clear Faults command.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} servo_hub_clear_faults_response_t;

/**
 * Signals in message SET_CAN_ID.
 *
 * Set the CAN ID
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t id;
} servo_hub_set_can_id_t;

/**
 * Signals in message STATUS_0.
 *
 * Status frame that holds general important information
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: -
     * Scale: 0.025
     * Offset: 0
     */
    uint16_t servo_voltage;

    /**
     * Range: -
     * Scale: 0.02
     * Offset: 0
     */
    uint16_t device_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t primary_heartbeat_lock;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_enabled;

    /**
     * 0: None, 1: CAN, 2: RS-485
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t communication_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_status_0_t;

/**
 * Signals in message STATUS_1.
 *
 * Faults
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t regulator_pgood_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brownout;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_bus_off;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hardware_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t has_reset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_0_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_1_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_2_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_3_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_4_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_5_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t low_battery_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_regulator_pgood_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_brownout;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_can_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_can_bus_off;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_hardware_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_firmware_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_has_reset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_0_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_1_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_2_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_3_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_4_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_channel_5_overcurrent;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sticky_low_battery_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t reserved_2;
} servo_hub_status_1_t;

/**
 * Signals in message STATUS_2.
 *
 * Channel 0-2 state
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_0_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_1_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_2_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_0_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_1_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_2_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_0_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_1_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_2_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_status_2_t;

/**
 * Signals in message STATUS_3.
 *
 * Channel 3-5 state
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_3_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_4_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t channel_5_pulse_width;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_3_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_4_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_5_enabled;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_3_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_4_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t channel_5_out_of_range;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_status_3_t;

/**
 * Signals in message STATUS_4.
 *
 * Channel currents
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_0_current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_1_current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_2_current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_3_current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_4_current;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t channel_5_current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} servo_hub_status_4_t;

/**
 * Pack message SET_SERVO_0_TO_2_PULSE_WIDTHS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_0_to_2_pulse_widths_pack(
    uint8_t* dst_p, const servo_hub_set_servo_0_to_2_pulse_widths_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_0_TO_2_PULSE_WIDTHS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_0_to_2_pulse_widths_unpack(
    servo_hub_set_servo_0_to_2_pulse_widths_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_0_TO_2_PULSE_WIDTHS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_0_to_2_pulse_widths_init(
    servo_hub_set_servo_0_to_2_pulse_widths_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_0_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_0_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_0_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_1_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_1_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_1_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_2_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_2_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_pulse_width_2_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_0_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_0_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_0_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_1_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_1_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_1_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_2_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_2_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_enable_channel_2_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_power_channel_0_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_power_channel_0_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_power_channel_0_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_power_channel_1_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_power_channel_1_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_power_channel_1_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_power_channel_2_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_power_channel_2_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_power_channel_2_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_0_to_2_pulse_widths_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_0_to_2_pulse_widths_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_0_to_2_pulse_widths_reserved_is_in_range(
    uint8_t value);

/**
 * Pack message SET_SERVO_3_TO_5_PULSE_WIDTHS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_3_to_5_pulse_widths_pack(
    uint8_t* dst_p, const servo_hub_set_servo_3_to_5_pulse_widths_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_3_TO_5_PULSE_WIDTHS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_3_to_5_pulse_widths_unpack(
    servo_hub_set_servo_3_to_5_pulse_widths_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_3_TO_5_PULSE_WIDTHS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_3_to_5_pulse_widths_init(
    servo_hub_set_servo_3_to_5_pulse_widths_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_3_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_3_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_3_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_4_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_4_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_4_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_5_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_5_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_pulse_width_5_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_3_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_3_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_3_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_4_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_4_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_4_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_5_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_5_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_enable_channel_5_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_power_channel_3_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_power_channel_3_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_power_channel_3_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_power_channel_4_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_power_channel_4_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_power_channel_4_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_power_channel_5_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_power_channel_5_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_power_channel_5_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_3_to_5_pulse_widths_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_3_to_5_pulse_widths_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_3_to_5_pulse_widths_reserved_is_in_range(
    uint8_t value);

/**
 * Pack message SET_BANKS_PULSE_PERIOD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_banks_pulse_period_pack(
    uint8_t* dst_p, const servo_hub_set_banks_pulse_period_t* src_p,
    size_t size);

/**
 * Unpack message SET_BANKS_PULSE_PERIOD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_banks_pulse_period_unpack(
    servo_hub_set_banks_pulse_period_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_BANKS_PULSE_PERIOD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_banks_pulse_period_init(
    servo_hub_set_banks_pulse_period_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_banks_pulse_period_channel_banks_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_channel_banks_bitfield_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_channel_banks_bitfield_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_banks_pulse_period_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_reserved_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_banks_pulse_period_pulse_period_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_pulse_period_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_pulse_period_is_in_range(uint16_t value);

/**
 * Pack message RESET_CONFIGURATION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_reset_configuration_pack(
    uint8_t* dst_p, const servo_hub_reset_configuration_t* src_p, size_t size);

/**
 * Unpack message RESET_CONFIGURATION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_reset_configuration_unpack(servo_hub_reset_configuration_t* dst_p,
                                         const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from RESET_CONFIGURATION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_reset_configuration_init(servo_hub_reset_configuration_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_reset_configuration_magic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_reset_configuration_magic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_reset_configuration_magic_is_in_range(uint16_t value);

/**
 * Pack message SET_SERVO_MIN_PULSE_WIDTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_min_pulse_width_pack(
    uint8_t* dst_p, const servo_hub_set_servo_min_pulse_width_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_MIN_PULSE_WIDTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_min_pulse_width_unpack(
    servo_hub_set_servo_min_pulse_width_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_MIN_PULSE_WIDTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_min_pulse_width_init(
    servo_hub_set_servo_min_pulse_width_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_min_pulse_width_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_min_pulse_width_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_min_pulse_width_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_min_pulse_width_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_min_pulse_width_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_min_pulse_width_pulseus_is_in_range(uint16_t value);

/**
 * Pack message SET_SERVO_CENTER_PULSE_WIDTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_center_pulse_width_pack(
    uint8_t* dst_p, const servo_hub_set_servo_center_pulse_width_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_CENTER_PULSE_WIDTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_center_pulse_width_unpack(
    servo_hub_set_servo_center_pulse_width_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_CENTER_PULSE_WIDTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_center_pulse_width_init(
    servo_hub_set_servo_center_pulse_width_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_center_pulse_width_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_center_pulse_width_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_center_pulse_width_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_center_pulse_width_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_center_pulse_width_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_center_pulse_width_pulseus_is_in_range(uint16_t value);

/**
 * Pack message SET_SERVO_MAX_PULSE_WIDTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_max_pulse_width_pack(
    uint8_t* dst_p, const servo_hub_set_servo_max_pulse_width_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_MAX_PULSE_WIDTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_max_pulse_width_unpack(
    servo_hub_set_servo_max_pulse_width_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_MAX_PULSE_WIDTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_max_pulse_width_init(
    servo_hub_set_servo_max_pulse_width_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_max_pulse_width_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_max_pulse_width_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_max_pulse_width_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_max_pulse_width_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_max_pulse_width_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_max_pulse_width_pulseus_is_in_range(uint16_t value);

/**
 * Pack message GET_PULSE_RANGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_get_pulse_range_pack(uint8_t* dst_p,
                                   const servo_hub_get_pulse_range_t* src_p,
                                   size_t size);

/**
 * Unpack message GET_PULSE_RANGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_get_pulse_range_unpack(servo_hub_get_pulse_range_t* dst_p,
                                     const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from GET_PULSE_RANGE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_get_pulse_range_init(servo_hub_get_pulse_range_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_pulse_range_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_pulse_range_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_pulse_range_channel_is_in_range(uint8_t value);

/**
 * Pack message SET_DISABLE_BEHAVIOR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_disable_behavior_pack(
    uint8_t* dst_p, const servo_hub_set_disable_behavior_t* src_p, size_t size);

/**
 * Unpack message SET_DISABLE_BEHAVIOR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_disable_behavior_unpack(
    servo_hub_set_disable_behavior_t* dst_p, const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from SET_DISABLE_BEHAVIOR.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_disable_behavior_init(
    servo_hub_set_disable_behavior_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_mask_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_mask_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_behavior_bitfield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_behavior_bitfield_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_behavior_bitfield_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_reserved_is_in_range(uint8_t value);

/**
 * Pack message GET_DISABLE_BEHAVIOR.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_get_disable_behavior_pack(
    uint8_t* dst_p, const servo_hub_get_disable_behavior_t* src_p, size_t size);

/**
 * Unpack message GET_DISABLE_BEHAVIOR.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_get_disable_behavior_unpack(
    servo_hub_get_disable_behavior_t* dst_p, const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from GET_DISABLE_BEHAVIOR.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_get_disable_behavior_init(
    servo_hub_get_disable_behavior_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_disable_behavior_behavior_bitfield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_disable_behavior_behavior_bitfield_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_disable_behavior_behavior_bitfield_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t servo_hub_get_disable_behavior_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_disable_behavior_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_disable_behavior_reserved_is_in_range(uint64_t value);

/**
 * Pack message CLEAR_FAULTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_clear_faults_pack(uint8_t* dst_p,
                                const servo_hub_clear_faults_t* src_p,
                                size_t size);

/**
 * Unpack message CLEAR_FAULTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_clear_faults_unpack(servo_hub_clear_faults_t* dst_p,
                                  const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from CLEAR_FAULTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_clear_faults_init(servo_hub_clear_faults_t* msg_p);

/**
 * Pack message GET_VERSION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_get_version_pack(uint8_t* dst_p,
                               const servo_hub_get_version_t* src_p,
                               size_t size);

/**
 * Unpack message GET_VERSION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_get_version_unpack(servo_hub_get_version_t* dst_p,
                                 const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from GET_VERSION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_get_version_init(servo_hub_get_version_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_version_firmware_fix_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_firmware_fix_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_firmware_fix_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_version_firmware_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_firmware_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_firmware_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_version_firmware_year_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_firmware_year_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_firmware_year_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_version_hardware_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_hardware_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_hardware_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_version_hardware_major_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_hardware_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_hardware_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t servo_hub_get_version_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_version_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_version_reserved_is_in_range(uint32_t value);

/**
 * Pack message GET_HARDWARE_FAULTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_get_hardware_faults_pack(
    uint8_t* dst_p, const servo_hub_get_hardware_faults_t* src_p, size_t size);

/**
 * Unpack message GET_HARDWARE_FAULTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_get_hardware_faults_unpack(servo_hub_get_hardware_faults_t* dst_p,
                                         const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from GET_HARDWARE_FAULTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_get_hardware_faults_init(servo_hub_get_hardware_faults_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_adc_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_adc_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_adc_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_crc_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_crc_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_crc_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_dac_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_dac_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_dac_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_fdcan_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_fdcan_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_fdcan_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_i2_c_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_i2_c_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_i2_c_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_sysclock_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_sysclock_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_sysclock_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_spi_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_spi_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_spi_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_tim_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_tim_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_tim_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_usart_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_usart_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_usart_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa1_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa1_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa1_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa1_read_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa1_read_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa1_read_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa1_invalid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa1_invalid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa1_invalid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa2_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa2_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa2_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa2_read_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa2_read_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa2_read_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_csa2_invalid_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_csa2_invalid_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_csa2_invalid_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_frc_can_init_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_frc_can_init_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_frc_can_init_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_can_tx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_can_tx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_can_tx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_can_rx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_can_rx_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_can_rx_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_can_set_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_can_set_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_can_set_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_eeprom_read_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_eeprom_read_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_eeprom_read_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_get_hardware_faults_eeprom_write_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_eeprom_write_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_eeprom_write_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t servo_hub_get_hardware_faults_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_hardware_faults_reserved_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_hardware_faults_reserved_is_in_range(uint64_t value);

/**
 * Pack message SET_BANKS_PULSE_PERIOD_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_banks_pulse_period_response_pack(
    uint8_t* dst_p, const servo_hub_set_banks_pulse_period_response_t* src_p,
    size_t size);

/**
 * Unpack message SET_BANKS_PULSE_PERIOD_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_banks_pulse_period_response_unpack(
    servo_hub_set_banks_pulse_period_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_BANKS_PULSE_PERIOD_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_banks_pulse_period_response_init(
    servo_hub_set_banks_pulse_period_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_banks_pulse_period_response_channel_banks_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_response_channel_banks_bitfield_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_response_channel_banks_bitfield_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_banks_pulse_period_response_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_response_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_response_reserved_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_banks_pulse_period_response_pulse_period_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_response_pulse_period_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_response_pulse_period_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_banks_pulse_period_response_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_banks_pulse_period_response_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_banks_pulse_period_response_result_is_in_range(
    uint8_t value);

/**
 * Pack message RESET_CONFIGURATION_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_reset_configuration_response_pack(
    uint8_t* dst_p, const servo_hub_reset_configuration_response_t* src_p,
    size_t size);

/**
 * Unpack message RESET_CONFIGURATION_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_reset_configuration_response_unpack(
    servo_hub_reset_configuration_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from RESET_CONFIGURATION_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_reset_configuration_response_init(
    servo_hub_reset_configuration_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_reset_configuration_response_magic_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_reset_configuration_response_magic_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_reset_configuration_response_magic_is_in_range(uint16_t value);

/**
 * Pack message SET_SERVO_MIN_PULSE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_min_pulse_response_pack(
    uint8_t* dst_p, const servo_hub_set_servo_min_pulse_response_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_MIN_PULSE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_min_pulse_response_unpack(
    servo_hub_set_servo_min_pulse_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_MIN_PULSE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_min_pulse_response_init(
    servo_hub_set_servo_min_pulse_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_min_pulse_response_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_min_pulse_response_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_min_pulse_response_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_min_pulse_response_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_min_pulse_response_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_min_pulse_response_pulseus_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_min_pulse_response_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_min_pulse_response_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_min_pulse_response_result_is_in_range(uint8_t value);

/**
 * Pack message SET_SERVO_CENTER_PULSE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_center_pulse_response_pack(
    uint8_t* dst_p, const servo_hub_set_servo_center_pulse_response_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_CENTER_PULSE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_center_pulse_response_unpack(
    servo_hub_set_servo_center_pulse_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_CENTER_PULSE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_center_pulse_response_init(
    servo_hub_set_servo_center_pulse_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_center_pulse_response_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_center_pulse_response_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_center_pulse_response_channel_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_center_pulse_response_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_center_pulse_response_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_center_pulse_response_pulseus_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_center_pulse_response_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_center_pulse_response_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_center_pulse_response_result_is_in_range(
    uint8_t value);

/**
 * Pack message SET_SERVO_MAX_PULSE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_servo_max_pulse_response_pack(
    uint8_t* dst_p, const servo_hub_set_servo_max_pulse_response_t* src_p,
    size_t size);

/**
 * Unpack message SET_SERVO_MAX_PULSE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_servo_max_pulse_response_unpack(
    servo_hub_set_servo_max_pulse_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_SERVO_MAX_PULSE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_servo_max_pulse_response_init(
    servo_hub_set_servo_max_pulse_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_max_pulse_response_channel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_max_pulse_response_channel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_max_pulse_response_channel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_set_servo_max_pulse_response_pulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_max_pulse_response_pulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_max_pulse_response_pulseus_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_servo_max_pulse_response_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_servo_max_pulse_response_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_servo_max_pulse_response_result_is_in_range(uint8_t value);

/**
 * Pack message GET_PULSE_RANGE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_get_pulse_range_response_pack(
    uint8_t* dst_p, const servo_hub_get_pulse_range_response_t* src_p,
    size_t size);

/**
 * Unpack message GET_PULSE_RANGE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_get_pulse_range_response_unpack(
    servo_hub_get_pulse_range_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PULSE_RANGE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_get_pulse_range_response_init(
    servo_hub_get_pulse_range_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_get_pulse_range_response_minpulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_pulse_range_response_minpulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_pulse_range_response_minpulseus_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_get_pulse_range_response_centerpulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_pulse_range_response_centerpulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_pulse_range_response_centerpulseus_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_get_pulse_range_response_maxpulseus_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_get_pulse_range_response_maxpulseus_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_get_pulse_range_response_maxpulseus_is_in_range(uint16_t value);

/**
 * Pack message SET_DISABLE_BEHAVIOR_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_disable_behavior_response_pack(
    uint8_t* dst_p, const servo_hub_set_disable_behavior_response_t* src_p,
    size_t size);

/**
 * Unpack message SET_DISABLE_BEHAVIOR_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_disable_behavior_response_unpack(
    servo_hub_set_disable_behavior_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from SET_DISABLE_BEHAVIOR_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_disable_behavior_response_init(
    servo_hub_set_disable_behavior_response_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_response_result_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_response_result_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_response_result_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_response_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_response_mask_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_response_mask_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_response_behavior_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_response_behavior_bitfield_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_response_behavior_bitfield_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_disable_behavior_response_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_disable_behavior_response_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_disable_behavior_response_reserved_is_in_range(
    uint8_t value);

/**
 * Pack message CLEAR_FAULTS_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_clear_faults_response_pack(
    uint8_t* dst_p, const servo_hub_clear_faults_response_t* src_p,
    size_t size);

/**
 * Unpack message CLEAR_FAULTS_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_clear_faults_response_unpack(
    servo_hub_clear_faults_response_t* dst_p, const uint8_t* src_p,
    size_t size);

/**
 * Init message fields to default values from CLEAR_FAULTS_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_clear_faults_response_init(
    servo_hub_clear_faults_response_t* msg_p);

/**
 * Pack message SET_CAN_ID.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_set_can_id_pack(uint8_t* dst_p,
                              const servo_hub_set_can_id_t* src_p, size_t size);

/**
 * Unpack message SET_CAN_ID.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_set_can_id_unpack(servo_hub_set_can_id_t* dst_p,
                                const uint8_t* src_p, size_t size);

/**
 * Init message fields to default values from SET_CAN_ID.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_set_can_id_init(servo_hub_set_can_id_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_set_can_id_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_set_can_id_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_set_can_id_id_is_in_range(uint8_t value);

/**
 * Pack message STATUS_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_status_0_pack(uint8_t* dst_p, const servo_hub_status_0_t* src_p,
                            size_t size);

/**
 * Unpack message STATUS_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_status_0_unpack(servo_hub_status_0_t* dst_p, const uint8_t* src_p,
                              size_t size);

/**
 * Init message fields to default values from STATUS_0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_status_0_init(servo_hub_status_0_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_0_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_0_servo_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_servo_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_servo_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_0_device_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_device_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_device_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_0_primary_heartbeat_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_primary_heartbeat_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_primary_heartbeat_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_0_system_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_system_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_system_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_0_communication_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_communication_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_communication_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_0_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_0_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_0_reserved_is_in_range(uint8_t value);

/**
 * Pack message STATUS_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_status_1_pack(uint8_t* dst_p, const servo_hub_status_1_t* src_p,
                            size_t size);

/**
 * Unpack message STATUS_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_status_1_unpack(servo_hub_status_1_t* dst_p, const uint8_t* src_p,
                              size_t size);

/**
 * Init message fields to default values from STATUS_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_status_1_init(servo_hub_status_1_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_regulator_pgood_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_regulator_pgood_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_regulator_pgood_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_brownout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_brownout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_brownout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_can_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_can_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_can_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_can_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_can_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_can_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_hardware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_hardware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_hardware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_firmware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_firmware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_firmware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_has_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_has_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_has_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_0_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_0_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_0_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_1_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_1_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_1_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_2_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_2_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_2_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_3_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_3_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_3_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_4_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_4_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_4_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_channel_5_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_channel_5_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_channel_5_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_low_battery_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_low_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_low_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t servo_hub_status_1_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_reserved_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_reserved_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_regulator_pgood_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_regulator_pgood_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_regulator_pgood_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_brownout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_brownout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_brownout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_can_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_can_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_can_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_can_bus_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_can_bus_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_can_bus_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_hardware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_hardware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_hardware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_firmware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_firmware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_firmware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_has_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_has_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_has_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_0_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_0_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_0_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_1_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_1_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_1_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_2_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_2_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_2_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_3_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_3_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_3_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_4_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_4_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_4_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_channel_5_overcurrent_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_channel_5_overcurrent_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_channel_5_overcurrent_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_1_sticky_low_battery_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_sticky_low_battery_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_sticky_low_battery_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t servo_hub_status_1_reserved_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_1_reserved_2_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_1_reserved_2_is_in_range(uint32_t value);

/**
 * Pack message STATUS_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_status_2_pack(uint8_t* dst_p, const servo_hub_status_2_t* src_p,
                            size_t size);

/**
 * Unpack message STATUS_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_status_2_unpack(servo_hub_status_2_t* dst_p, const uint8_t* src_p,
                              size_t size);

/**
 * Init message fields to default values from STATUS_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_status_2_init(servo_hub_status_2_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_2_channel_0_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_0_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_0_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_2_channel_1_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_1_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_1_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_2_channel_2_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_2_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_2_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_0_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_0_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_0_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_1_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_1_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_1_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_2_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_2_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_2_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_0_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_0_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_0_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_1_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_1_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_1_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_channel_2_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_channel_2_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_channel_2_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_2_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_2_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_2_reserved_is_in_range(uint8_t value);

/**
 * Pack message STATUS_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_status_3_pack(uint8_t* dst_p, const servo_hub_status_3_t* src_p,
                            size_t size);

/**
 * Unpack message STATUS_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_status_3_unpack(servo_hub_status_3_t* dst_p, const uint8_t* src_p,
                              size_t size);

/**
 * Init message fields to default values from STATUS_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_status_3_init(servo_hub_status_3_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_3_channel_3_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_3_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_3_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_3_channel_4_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_4_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_4_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_3_channel_5_pulse_width_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_5_pulse_width_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_5_pulse_width_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_3_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_3_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_3_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_4_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_4_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_4_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_5_enabled_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_5_enabled_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_5_enabled_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_3_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_3_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_3_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_4_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_4_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_4_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_channel_5_out_of_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_channel_5_out_of_range_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_channel_5_out_of_range_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_3_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_3_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_3_reserved_is_in_range(uint8_t value);

/**
 * Pack message STATUS_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int servo_hub_status_4_pack(uint8_t* dst_p, const servo_hub_status_4_t* src_p,
                            size_t size);

/**
 * Unpack message STATUS_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int servo_hub_status_4_unpack(servo_hub_status_4_t* dst_p, const uint8_t* src_p,
                              size_t size);

/**
 * Init message fields to default values from STATUS_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int servo_hub_status_4_init(servo_hub_status_4_t* msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_0_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_0_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_0_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_1_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_1_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_1_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_2_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_2_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_2_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_3_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_3_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_3_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_4_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_4_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_4_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t servo_hub_status_4_channel_5_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_channel_5_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_channel_5_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t servo_hub_status_4_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double servo_hub_status_4_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool servo_hub_status_4_reserved_is_in_range(uint8_t value);

#ifdef __cplusplus
}
#endif

#endif
