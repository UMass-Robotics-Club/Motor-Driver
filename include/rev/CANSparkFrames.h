/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Generated by cantools 39.4.5 with automatic customizations by REV from public
 * REV MotorController spec version 2.0.0-dev.10
 */

#ifndef SPARK_H
#define SPARK_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#ifndef EINVAL
#define EINVAL 22
#endif

/* Frame ids. */
#define SPARK_VELOCITY_SETPOINT_FRAME_ID (0x2050000u)
#define SPARK_DUTY_CYCLE_SETPOINT_FRAME_ID (0x2050080u)
#define SPARK_SMART_VELOCITY_SETPOINT_FRAME_ID (0x20500c0u)
#define SPARK_POSITION_SETPOINT_FRAME_ID (0x2050100u)
#define SPARK_VOLTAGE_SETPOINT_FRAME_ID (0x2050140u)
#define SPARK_CURRENT_SETPOINT_FRAME_ID (0x2050180u)
#define SPARK_SMART_MOTION_SETPOINT_FRAME_ID (0x20501c0u)
#define SPARK_MAXMOTION_SETPOINT_FRAME_ID (0x2050200u)
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_FRAME_ID (0x2050240u)
#define SPARK_SET_STATUSES_ENABLED_FRAME_ID (0x2050400u)
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_FRAME_ID (0x2050440u)
#define SPARK_PERSIST_PARAMETERS_RESPONSE_FRAME_ID (0x2050500u)
#define SPARK_RESET_SAFE_PARAMETERS_FRAME_ID (0x2050540u)
#define SPARK_RESET_SAFE_PARAMETERS_RESPONSE_FRAME_ID (0x2050580u)
#define SPARK_COMPLETE_FACTORY_RESET_FRAME_ID (0x20505c0u)
#define SPARK_COMPLETE_FACTORY_RESET_RESPONSE_FRAME_ID (0x2050600u)
#define SPARK_LEGACY_STATUS_0_FRAME_ID (0x2051800u)
#define SPARK_CLEAR_FAULTS_FRAME_ID (0x2051b80u)
#define SPARK_IDENTIFY_UNIQUE_SPARK_FRAME_ID (0x2051d80u)
#define SPARK_IDENTIFY_FRAME_ID (0x2051dc0u)
#define SPARK_NACK_FRAME_ID (0x2052000u)
#define SPARK_ACK_FRAME_ID (0x2052040u)
#define SPARK_LED_SYNC_FRAME_ID (0x20524c0u)
#define SPARK_SET_CAN_ID_FRAME_ID (0x2052540u)
#define SPARK_GET_FIRMWARE_VERSION_FRAME_ID (0x2052600u)
#define SPARK_SWDL_DATA_FRAME_ID (0x2052700u)
#define SPARK_SWDL_CHECKSUM_FRAME_ID (0x2052740u)
#define SPARK_SWDL_RETRANSMIT_FRAME_ID (0x2052780u)
#define SPARK_SET_PRIMARY_ENCODER_POSITION_FRAME_ID (0x2052800u)
#define SPARK_SET_I_ACCUMULATION_FRAME_ID (0x2052880u)
#define SPARK_SET_ANALOG_POSITION_FRAME_ID (0x20528c0u)
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_FRAME_ID (0x2052900u)
#define SPARK_SET_DUTY_CYCLE_POSITION_FRAME_ID (0x2052940u)
#define SPARK_SECONDARY_HEARTBEAT_FRAME_ID (0x2052c80u)
#define SPARK_USB_ONLY_IDENTIFY_FRAME_ID (0x2052cc0u)
#define SPARK_USB_ONLY_ENTER_DFU_BOOTLOADER_FRAME_ID (0x2052d00u)
#define SPARK_GET_TEMPERATURES_FRAME_ID (0x2053000u)
#define SPARK_GET_MOTOR_INTERFACE_FRAME_ID (0x2053140u)
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_FRAME_ID (0x2053400u)
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_FRAME_ID (0x2053440u)
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_FRAME_ID (0x2053480u)
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_FRAME_ID (0x20534c0u)
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_FRAME_ID (0x2053500u)
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_FRAME_ID (0x2053540u)
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_FRAME_ID (0x2053580u)
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_FRAME_ID (0x20535c0u)
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_FRAME_ID (0x2053600u)
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_FRAME_ID (0x2053640u)
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_FRAME_ID (0x2053680u)
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_FRAME_ID (0x20536c0u)
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_FRAME_ID (0x2053700u)
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_FRAME_ID (0x2053740u)
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_FRAME_ID (0x2053780u)
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_FRAME_ID (0x20537c0u)
#define SPARK_PARAMETER_WRITE_FRAME_ID (0x2053800u)
#define SPARK_PARAMETER_WRITE_RESPONSE_FRAME_ID (0x2053840u)
#define SPARK_PARAMETERS_0_TO_64_CHANGED_FRAME_ID (0x2053880u)
#define SPARK_PARAMETERS_64_TO_128_CHANGED_FRAME_ID (0x20538c0u)
#define SPARK_PARAMETERS_128_TO_192_CHANGED_FRAME_ID (0x2053900u)
#define SPARK_PARAMETERS_192_TO_256_CHANGED_FRAME_ID (0x2053940u)
#define SPARK_GET_PARAMETER_RANGE_FRAME_ID (0x2053b40u)
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_FRAME_ID (0x2053b80u)
#define SPARK_READ_PARAMETER_0_AND_1_FRAME_ID (0x2053c00u)
#define SPARK_READ_PARAMETER_2_AND_3_FRAME_ID (0x2053c40u)
#define SPARK_READ_PARAMETER_4_AND_5_FRAME_ID (0x2053c80u)
#define SPARK_READ_PARAMETER_6_AND_7_FRAME_ID (0x2053cc0u)
#define SPARK_READ_PARAMETER_8_AND_9_FRAME_ID (0x2053d00u)
#define SPARK_READ_PARAMETER_10_AND_11_FRAME_ID (0x2053d40u)
#define SPARK_READ_PARAMETER_12_AND_13_FRAME_ID (0x2053d80u)
#define SPARK_READ_PARAMETER_14_AND_15_FRAME_ID (0x2053dc0u)
#define SPARK_READ_PARAMETER_16_AND_17_FRAME_ID (0x2053e00u)
#define SPARK_READ_PARAMETER_18_AND_19_FRAME_ID (0x2053e40u)
#define SPARK_READ_PARAMETER_20_AND_21_FRAME_ID (0x2053e80u)
#define SPARK_READ_PARAMETER_22_AND_23_FRAME_ID (0x2053ec0u)
#define SPARK_READ_PARAMETER_24_AND_25_FRAME_ID (0x2053f00u)
#define SPARK_READ_PARAMETER_26_AND_27_FRAME_ID (0x2053f40u)
#define SPARK_READ_PARAMETER_28_AND_29_FRAME_ID (0x2053f80u)
#define SPARK_READ_PARAMETER_30_AND_31_FRAME_ID (0x2053fc0u)
#define SPARK_READ_PARAMETER_32_AND_33_FRAME_ID (0x2054000u)
#define SPARK_READ_PARAMETER_34_AND_35_FRAME_ID (0x2054040u)
#define SPARK_READ_PARAMETER_36_AND_37_FRAME_ID (0x2054080u)
#define SPARK_READ_PARAMETER_38_AND_39_FRAME_ID (0x20540c0u)
#define SPARK_READ_PARAMETER_40_AND_41_FRAME_ID (0x2054100u)
#define SPARK_READ_PARAMETER_42_AND_43_FRAME_ID (0x2054140u)
#define SPARK_READ_PARAMETER_44_AND_45_FRAME_ID (0x2054180u)
#define SPARK_READ_PARAMETER_46_AND_47_FRAME_ID (0x20541c0u)
#define SPARK_READ_PARAMETER_48_AND_49_FRAME_ID (0x2054200u)
#define SPARK_READ_PARAMETER_50_AND_51_FRAME_ID (0x2054240u)
#define SPARK_READ_PARAMETER_52_AND_53_FRAME_ID (0x2054280u)
#define SPARK_READ_PARAMETER_54_AND_55_FRAME_ID (0x20542c0u)
#define SPARK_READ_PARAMETER_56_AND_57_FRAME_ID (0x2054300u)
#define SPARK_READ_PARAMETER_58_AND_59_FRAME_ID (0x2054340u)
#define SPARK_READ_PARAMETER_60_AND_61_FRAME_ID (0x2054380u)
#define SPARK_READ_PARAMETER_62_AND_63_FRAME_ID (0x20543c0u)
#define SPARK_READ_PARAMETER_64_AND_65_FRAME_ID (0x2054400u)
#define SPARK_READ_PARAMETER_66_AND_67_FRAME_ID (0x2054440u)
#define SPARK_READ_PARAMETER_68_AND_69_FRAME_ID (0x2054480u)
#define SPARK_READ_PARAMETER_70_AND_71_FRAME_ID (0x20544c0u)
#define SPARK_READ_PARAMETER_72_AND_73_FRAME_ID (0x2054500u)
#define SPARK_READ_PARAMETER_74_AND_75_FRAME_ID (0x2054540u)
#define SPARK_READ_PARAMETER_76_AND_77_FRAME_ID (0x2054580u)
#define SPARK_READ_PARAMETER_78_AND_79_FRAME_ID (0x20545c0u)
#define SPARK_READ_PARAMETER_80_AND_81_FRAME_ID (0x2054600u)
#define SPARK_READ_PARAMETER_82_AND_83_FRAME_ID (0x2054640u)
#define SPARK_READ_PARAMETER_84_AND_85_FRAME_ID (0x2054680u)
#define SPARK_READ_PARAMETER_86_AND_87_FRAME_ID (0x20546c0u)
#define SPARK_READ_PARAMETER_88_AND_89_FRAME_ID (0x2054700u)
#define SPARK_READ_PARAMETER_90_AND_91_FRAME_ID (0x2054740u)
#define SPARK_READ_PARAMETER_92_AND_93_FRAME_ID (0x2054780u)
#define SPARK_READ_PARAMETER_94_AND_95_FRAME_ID (0x20547c0u)
#define SPARK_READ_PARAMETER_96_AND_97_FRAME_ID (0x2054800u)
#define SPARK_READ_PARAMETER_98_AND_99_FRAME_ID (0x2054840u)
#define SPARK_READ_PARAMETER_100_AND_101_FRAME_ID (0x2054880u)
#define SPARK_READ_PARAMETER_102_AND_103_FRAME_ID (0x20548c0u)
#define SPARK_READ_PARAMETER_104_AND_105_FRAME_ID (0x2054900u)
#define SPARK_READ_PARAMETER_106_AND_107_FRAME_ID (0x2054940u)
#define SPARK_READ_PARAMETER_108_AND_109_FRAME_ID (0x2054980u)
#define SPARK_READ_PARAMETER_110_AND_111_FRAME_ID (0x20549c0u)
#define SPARK_READ_PARAMETER_112_AND_113_FRAME_ID (0x2054a00u)
#define SPARK_READ_PARAMETER_114_AND_115_FRAME_ID (0x2054a40u)
#define SPARK_READ_PARAMETER_116_AND_117_FRAME_ID (0x2054a80u)
#define SPARK_READ_PARAMETER_118_AND_119_FRAME_ID (0x2054ac0u)
#define SPARK_READ_PARAMETER_120_AND_121_FRAME_ID (0x2054b00u)
#define SPARK_READ_PARAMETER_122_AND_123_FRAME_ID (0x2054b40u)
#define SPARK_READ_PARAMETER_124_AND_125_FRAME_ID (0x2054b80u)
#define SPARK_READ_PARAMETER_126_AND_127_FRAME_ID (0x2054bc0u)
#define SPARK_READ_PARAMETER_128_AND_129_FRAME_ID (0x2054c00u)
#define SPARK_READ_PARAMETER_130_AND_131_FRAME_ID (0x2054c40u)
#define SPARK_READ_PARAMETER_132_AND_133_FRAME_ID (0x2054c80u)
#define SPARK_READ_PARAMETER_134_AND_135_FRAME_ID (0x2054cc0u)
#define SPARK_READ_PARAMETER_136_AND_137_FRAME_ID (0x2054d00u)
#define SPARK_READ_PARAMETER_138_AND_139_FRAME_ID (0x2054d40u)
#define SPARK_READ_PARAMETER_140_AND_141_FRAME_ID (0x2054d80u)
#define SPARK_READ_PARAMETER_142_AND_143_FRAME_ID (0x2054dc0u)
#define SPARK_READ_PARAMETER_144_AND_145_FRAME_ID (0x2054e00u)
#define SPARK_READ_PARAMETER_146_AND_147_FRAME_ID (0x2054e40u)
#define SPARK_READ_PARAMETER_148_AND_149_FRAME_ID (0x2054e80u)
#define SPARK_READ_PARAMETER_150_AND_151_FRAME_ID (0x2054ec0u)
#define SPARK_READ_PARAMETER_152_AND_153_FRAME_ID (0x2054f00u)
#define SPARK_READ_PARAMETER_154_AND_155_FRAME_ID (0x2054f40u)
#define SPARK_READ_PARAMETER_156_AND_157_FRAME_ID (0x2054f80u)
#define SPARK_READ_PARAMETER_158_AND_159_FRAME_ID (0x2054fc0u)
#define SPARK_READ_PARAMETER_160_AND_161_FRAME_ID (0x2055000u)
#define SPARK_READ_PARAMETER_162_AND_163_FRAME_ID (0x2055040u)
#define SPARK_READ_PARAMETER_164_AND_165_FRAME_ID (0x2055080u)
#define SPARK_READ_PARAMETER_166_AND_167_FRAME_ID (0x20550c0u)
#define SPARK_READ_PARAMETER_168_AND_169_FRAME_ID (0x2055100u)
#define SPARK_READ_PARAMETER_170_AND_171_FRAME_ID (0x2055140u)
#define SPARK_READ_PARAMETER_172_AND_173_FRAME_ID (0x2055180u)
#define SPARK_READ_PARAMETER_174_AND_175_FRAME_ID (0x20551c0u)
#define SPARK_READ_PARAMETER_176_AND_177_FRAME_ID (0x2055200u)
#define SPARK_READ_PARAMETER_178_AND_179_FRAME_ID (0x2055240u)
#define SPARK_READ_PARAMETER_180_AND_181_FRAME_ID (0x2055280u)
#define SPARK_READ_PARAMETER_182_AND_183_FRAME_ID (0x20552c0u)
#define SPARK_READ_PARAMETER_184_AND_185_FRAME_ID (0x2055300u)
#define SPARK_READ_PARAMETER_186_AND_187_FRAME_ID (0x2055340u)
#define SPARK_READ_PARAMETER_188_AND_189_FRAME_ID (0x2055380u)
#define SPARK_READ_PARAMETER_190_AND_191_FRAME_ID (0x20553c0u)
#define SPARK_READ_PARAMETER_192_AND_193_FRAME_ID (0x2055400u)
#define SPARK_READ_PARAMETER_194_AND_195_FRAME_ID (0x2055440u)
#define SPARK_READ_PARAMETER_196_AND_197_FRAME_ID (0x2055480u)
#define SPARK_READ_PARAMETER_198_AND_199_FRAME_ID (0x20554c0u)
#define SPARK_READ_PARAMETER_200_AND_201_FRAME_ID (0x2055500u)
#define SPARK_READ_PARAMETER_202_AND_203_FRAME_ID (0x2055540u)
#define SPARK_READ_PARAMETER_204_AND_205_FRAME_ID (0x2055580u)
#define SPARK_READ_PARAMETER_206_AND_207_FRAME_ID (0x20555c0u)
#define SPARK_READ_PARAMETER_208_AND_209_FRAME_ID (0x2055600u)
#define SPARK_READ_PARAMETER_210_AND_211_FRAME_ID (0x2055640u)
#define SPARK_READ_PARAMETER_212_AND_213_FRAME_ID (0x2055680u)
#define SPARK_READ_PARAMETER_214_AND_215_FRAME_ID (0x20556c0u)
#define SPARK_READ_PARAMETER_216_AND_217_FRAME_ID (0x2055700u)
#define SPARK_READ_PARAMETER_218_AND_219_FRAME_ID (0x2055740u)
#define SPARK_READ_PARAMETER_220_AND_221_FRAME_ID (0x2055780u)
#define SPARK_READ_PARAMETER_222_AND_223_FRAME_ID (0x20557c0u)
#define SPARK_READ_PARAMETER_224_AND_225_FRAME_ID (0x2055800u)
#define SPARK_READ_PARAMETER_226_AND_227_FRAME_ID (0x2055840u)
#define SPARK_READ_PARAMETER_228_AND_229_FRAME_ID (0x2055880u)
#define SPARK_READ_PARAMETER_230_AND_231_FRAME_ID (0x20558c0u)
#define SPARK_READ_PARAMETER_232_AND_233_FRAME_ID (0x2055900u)
#define SPARK_READ_PARAMETER_234_AND_235_FRAME_ID (0x2055940u)
#define SPARK_READ_PARAMETER_236_AND_237_FRAME_ID (0x2055980u)
#define SPARK_READ_PARAMETER_238_AND_239_FRAME_ID (0x20559c0u)
#define SPARK_READ_PARAMETER_240_AND_241_FRAME_ID (0x2055a00u)
#define SPARK_READ_PARAMETER_242_AND_243_FRAME_ID (0x2055a40u)
#define SPARK_READ_PARAMETER_244_AND_245_FRAME_ID (0x2055a80u)
#define SPARK_READ_PARAMETER_246_AND_247_FRAME_ID (0x2055ac0u)
#define SPARK_READ_PARAMETER_248_AND_249_FRAME_ID (0x2055b00u)
#define SPARK_READ_PARAMETER_250_AND_251_FRAME_ID (0x2055b40u)
#define SPARK_READ_PARAMETER_252_AND_253_FRAME_ID (0x2055b80u)
#define SPARK_READ_PARAMETER_254_AND_255_FRAME_ID (0x2055bc0u)
#define SPARK_WRITE_PARAMETER_0_AND_1_FRAME_ID (0x2055c00u)
#define SPARK_WRITE_PARAMETER_2_AND_3_FRAME_ID (0x2055c40u)
#define SPARK_WRITE_PARAMETER_4_AND_5_FRAME_ID (0x2055c80u)
#define SPARK_WRITE_PARAMETER_6_AND_7_FRAME_ID (0x2055cc0u)
#define SPARK_WRITE_PARAMETER_8_AND_9_FRAME_ID (0x2055d00u)
#define SPARK_WRITE_PARAMETER_10_AND_11_FRAME_ID (0x2055d40u)
#define SPARK_WRITE_PARAMETER_12_AND_13_FRAME_ID (0x2055d80u)
#define SPARK_WRITE_PARAMETER_14_AND_15_FRAME_ID (0x2055dc0u)
#define SPARK_WRITE_PARAMETER_16_AND_17_FRAME_ID (0x2055e00u)
#define SPARK_WRITE_PARAMETER_18_AND_19_FRAME_ID (0x2055e40u)
#define SPARK_WRITE_PARAMETER_20_AND_21_FRAME_ID (0x2055e80u)
#define SPARK_WRITE_PARAMETER_22_AND_23_FRAME_ID (0x2055ec0u)
#define SPARK_WRITE_PARAMETER_24_AND_25_FRAME_ID (0x2055f00u)
#define SPARK_WRITE_PARAMETER_26_AND_27_FRAME_ID (0x2055f40u)
#define SPARK_WRITE_PARAMETER_28_AND_29_FRAME_ID (0x2055f80u)
#define SPARK_WRITE_PARAMETER_30_AND_31_FRAME_ID (0x2055fc0u)
#define SPARK_WRITE_PARAMETER_32_AND_33_FRAME_ID (0x2056000u)
#define SPARK_WRITE_PARAMETER_34_AND_35_FRAME_ID (0x2056040u)
#define SPARK_WRITE_PARAMETER_36_AND_37_FRAME_ID (0x2056080u)
#define SPARK_WRITE_PARAMETER_38_AND_39_FRAME_ID (0x20560c0u)
#define SPARK_WRITE_PARAMETER_40_AND_41_FRAME_ID (0x2056100u)
#define SPARK_WRITE_PARAMETER_42_AND_43_FRAME_ID (0x2056140u)
#define SPARK_WRITE_PARAMETER_44_AND_45_FRAME_ID (0x2056180u)
#define SPARK_WRITE_PARAMETER_46_AND_47_FRAME_ID (0x20561c0u)
#define SPARK_WRITE_PARAMETER_48_AND_49_FRAME_ID (0x2056200u)
#define SPARK_WRITE_PARAMETER_50_AND_51_FRAME_ID (0x2056240u)
#define SPARK_WRITE_PARAMETER_52_AND_53_FRAME_ID (0x2056280u)
#define SPARK_WRITE_PARAMETER_54_AND_55_FRAME_ID (0x20562c0u)
#define SPARK_WRITE_PARAMETER_56_AND_57_FRAME_ID (0x2056300u)
#define SPARK_WRITE_PARAMETER_58_AND_59_FRAME_ID (0x2056340u)
#define SPARK_WRITE_PARAMETER_60_AND_61_FRAME_ID (0x2056380u)
#define SPARK_WRITE_PARAMETER_62_AND_63_FRAME_ID (0x20563c0u)
#define SPARK_WRITE_PARAMETER_64_AND_65_FRAME_ID (0x2056400u)
#define SPARK_WRITE_PARAMETER_66_AND_67_FRAME_ID (0x2056440u)
#define SPARK_WRITE_PARAMETER_68_AND_69_FRAME_ID (0x2056480u)
#define SPARK_WRITE_PARAMETER_70_AND_71_FRAME_ID (0x20564c0u)
#define SPARK_WRITE_PARAMETER_72_AND_73_FRAME_ID (0x2056500u)
#define SPARK_WRITE_PARAMETER_74_AND_75_FRAME_ID (0x2056540u)
#define SPARK_WRITE_PARAMETER_76_AND_77_FRAME_ID (0x2056580u)
#define SPARK_WRITE_PARAMETER_78_AND_79_FRAME_ID (0x20565c0u)
#define SPARK_WRITE_PARAMETER_80_AND_81_FRAME_ID (0x2056600u)
#define SPARK_WRITE_PARAMETER_82_AND_83_FRAME_ID (0x2056640u)
#define SPARK_WRITE_PARAMETER_84_AND_85_FRAME_ID (0x2056680u)
#define SPARK_WRITE_PARAMETER_86_AND_87_FRAME_ID (0x20566c0u)
#define SPARK_WRITE_PARAMETER_88_AND_89_FRAME_ID (0x2056700u)
#define SPARK_WRITE_PARAMETER_90_AND_91_FRAME_ID (0x2056740u)
#define SPARK_WRITE_PARAMETER_92_AND_93_FRAME_ID (0x2056780u)
#define SPARK_WRITE_PARAMETER_94_AND_95_FRAME_ID (0x20567c0u)
#define SPARK_WRITE_PARAMETER_96_AND_97_FRAME_ID (0x2056800u)
#define SPARK_WRITE_PARAMETER_98_AND_99_FRAME_ID (0x2056840u)
#define SPARK_WRITE_PARAMETER_100_AND_101_FRAME_ID (0x2056880u)
#define SPARK_WRITE_PARAMETER_102_AND_103_FRAME_ID (0x20568c0u)
#define SPARK_WRITE_PARAMETER_104_AND_105_FRAME_ID (0x2056900u)
#define SPARK_WRITE_PARAMETER_106_AND_107_FRAME_ID (0x2056940u)
#define SPARK_WRITE_PARAMETER_108_AND_109_FRAME_ID (0x2056980u)
#define SPARK_WRITE_PARAMETER_110_AND_111_FRAME_ID (0x20569c0u)
#define SPARK_WRITE_PARAMETER_112_AND_113_FRAME_ID (0x2056a00u)
#define SPARK_WRITE_PARAMETER_114_AND_115_FRAME_ID (0x2056a40u)
#define SPARK_WRITE_PARAMETER_116_AND_117_FRAME_ID (0x2056a80u)
#define SPARK_WRITE_PARAMETER_118_AND_119_FRAME_ID (0x2056ac0u)
#define SPARK_WRITE_PARAMETER_120_AND_121_FRAME_ID (0x2056b00u)
#define SPARK_WRITE_PARAMETER_122_AND_123_FRAME_ID (0x2056b40u)
#define SPARK_WRITE_PARAMETER_124_AND_125_FRAME_ID (0x2056b80u)
#define SPARK_WRITE_PARAMETER_126_AND_127_FRAME_ID (0x2056bc0u)
#define SPARK_WRITE_PARAMETER_128_AND_129_FRAME_ID (0x2056c00u)
#define SPARK_WRITE_PARAMETER_130_AND_131_FRAME_ID (0x2056c40u)
#define SPARK_WRITE_PARAMETER_132_AND_133_FRAME_ID (0x2056c80u)
#define SPARK_WRITE_PARAMETER_134_AND_135_FRAME_ID (0x2056cc0u)
#define SPARK_WRITE_PARAMETER_136_AND_137_FRAME_ID (0x2056d00u)
#define SPARK_WRITE_PARAMETER_138_AND_139_FRAME_ID (0x2056d40u)
#define SPARK_WRITE_PARAMETER_140_AND_141_FRAME_ID (0x2056d80u)
#define SPARK_WRITE_PARAMETER_142_AND_143_FRAME_ID (0x2056dc0u)
#define SPARK_WRITE_PARAMETER_144_AND_145_FRAME_ID (0x2056e00u)
#define SPARK_WRITE_PARAMETER_146_AND_147_FRAME_ID (0x2056e40u)
#define SPARK_WRITE_PARAMETER_148_AND_149_FRAME_ID (0x2056e80u)
#define SPARK_WRITE_PARAMETER_150_AND_151_FRAME_ID (0x2056ec0u)
#define SPARK_WRITE_PARAMETER_152_AND_153_FRAME_ID (0x2056f00u)
#define SPARK_WRITE_PARAMETER_154_AND_155_FRAME_ID (0x2056f40u)
#define SPARK_WRITE_PARAMETER_156_AND_157_FRAME_ID (0x2056f80u)
#define SPARK_WRITE_PARAMETER_158_AND_159_FRAME_ID (0x2056fc0u)
#define SPARK_WRITE_PARAMETER_160_AND_161_FRAME_ID (0x2057000u)
#define SPARK_WRITE_PARAMETER_162_AND_163_FRAME_ID (0x2057040u)
#define SPARK_WRITE_PARAMETER_164_AND_165_FRAME_ID (0x2057080u)
#define SPARK_WRITE_PARAMETER_166_AND_167_FRAME_ID (0x20570c0u)
#define SPARK_WRITE_PARAMETER_168_AND_169_FRAME_ID (0x2057100u)
#define SPARK_WRITE_PARAMETER_170_AND_171_FRAME_ID (0x2057140u)
#define SPARK_WRITE_PARAMETER_172_AND_173_FRAME_ID (0x2057180u)
#define SPARK_WRITE_PARAMETER_174_AND_175_FRAME_ID (0x20571c0u)
#define SPARK_WRITE_PARAMETER_176_AND_177_FRAME_ID (0x2057200u)
#define SPARK_WRITE_PARAMETER_178_AND_179_FRAME_ID (0x2057240u)
#define SPARK_WRITE_PARAMETER_180_AND_181_FRAME_ID (0x2057280u)
#define SPARK_WRITE_PARAMETER_182_AND_183_FRAME_ID (0x20572c0u)
#define SPARK_WRITE_PARAMETER_184_AND_185_FRAME_ID (0x2057300u)
#define SPARK_WRITE_PARAMETER_186_AND_187_FRAME_ID (0x2057340u)
#define SPARK_WRITE_PARAMETER_188_AND_189_FRAME_ID (0x2057380u)
#define SPARK_WRITE_PARAMETER_190_AND_191_FRAME_ID (0x20573c0u)
#define SPARK_WRITE_PARAMETER_192_AND_193_FRAME_ID (0x2057400u)
#define SPARK_WRITE_PARAMETER_194_AND_195_FRAME_ID (0x2057440u)
#define SPARK_WRITE_PARAMETER_196_AND_197_FRAME_ID (0x2057480u)
#define SPARK_WRITE_PARAMETER_198_AND_199_FRAME_ID (0x20574c0u)
#define SPARK_WRITE_PARAMETER_200_AND_201_FRAME_ID (0x2057500u)
#define SPARK_WRITE_PARAMETER_202_AND_203_FRAME_ID (0x2057540u)
#define SPARK_WRITE_PARAMETER_204_AND_205_FRAME_ID (0x2057580u)
#define SPARK_WRITE_PARAMETER_206_AND_207_FRAME_ID (0x20575c0u)
#define SPARK_WRITE_PARAMETER_208_AND_209_FRAME_ID (0x2057600u)
#define SPARK_WRITE_PARAMETER_210_AND_211_FRAME_ID (0x2057640u)
#define SPARK_WRITE_PARAMETER_212_AND_213_FRAME_ID (0x2057680u)
#define SPARK_WRITE_PARAMETER_214_AND_215_FRAME_ID (0x20576c0u)
#define SPARK_WRITE_PARAMETER_216_AND_217_FRAME_ID (0x2057700u)
#define SPARK_WRITE_PARAMETER_218_AND_219_FRAME_ID (0x2057740u)
#define SPARK_WRITE_PARAMETER_220_AND_221_FRAME_ID (0x2057780u)
#define SPARK_WRITE_PARAMETER_222_AND_223_FRAME_ID (0x20577c0u)
#define SPARK_WRITE_PARAMETER_224_AND_225_FRAME_ID (0x2057800u)
#define SPARK_WRITE_PARAMETER_226_AND_227_FRAME_ID (0x2057840u)
#define SPARK_WRITE_PARAMETER_228_AND_229_FRAME_ID (0x2057880u)
#define SPARK_WRITE_PARAMETER_230_AND_231_FRAME_ID (0x20578c0u)
#define SPARK_WRITE_PARAMETER_232_AND_233_FRAME_ID (0x2057900u)
#define SPARK_WRITE_PARAMETER_234_AND_235_FRAME_ID (0x2057940u)
#define SPARK_WRITE_PARAMETER_236_AND_237_FRAME_ID (0x2057980u)
#define SPARK_WRITE_PARAMETER_238_AND_239_FRAME_ID (0x20579c0u)
#define SPARK_WRITE_PARAMETER_240_AND_241_FRAME_ID (0x2057a00u)
#define SPARK_WRITE_PARAMETER_242_AND_243_FRAME_ID (0x2057a40u)
#define SPARK_WRITE_PARAMETER_244_AND_245_FRAME_ID (0x2057a80u)
#define SPARK_WRITE_PARAMETER_246_AND_247_FRAME_ID (0x2057ac0u)
#define SPARK_WRITE_PARAMETER_248_AND_249_FRAME_ID (0x2057b00u)
#define SPARK_WRITE_PARAMETER_250_AND_251_FRAME_ID (0x2057b40u)
#define SPARK_WRITE_PARAMETER_252_AND_253_FRAME_ID (0x2057b80u)
#define SPARK_WRITE_PARAMETER_254_AND_255_FRAME_ID (0x2057bc0u)
#define SPARK_START_FOLLOWER_MODE_FRAME_ID (0x2057c00u)
#define SPARK_START_FOLLOWER_MODE_RESPONSE_FRAME_ID (0x2057c40u)
#define SPARK_STOP_FOLLOWER_MODE_FRAME_ID (0x2057c80u)
#define SPARK_STOP_FOLLOWER_MODE_RESPONSE_FRAME_ID (0x2057cc0u)
#define SPARK_ENTER_SWDL_CAN_BOOTLOADER_FRAME_ID (0x2057fc0u)
#define SPARK_STATUS_0_FRAME_ID (0x205b800u)
#define SPARK_STATUS_1_FRAME_ID (0x205b840u)
#define SPARK_STATUS_2_FRAME_ID (0x205b880u)
#define SPARK_STATUS_3_FRAME_ID (0x205b8c0u)
#define SPARK_STATUS_4_FRAME_ID (0x205b900u)
#define SPARK_STATUS_5_FRAME_ID (0x205b940u)
#define SPARK_STATUS_6_FRAME_ID (0x205b980u)
#define SPARK_STATUS_7_FRAME_ID (0x205b9c0u)
#define SPARK_UNIQUE_ID_BROADCAST_FRAME_ID (0x205bc00u)
#define SPARK_PERSIST_PARAMETERS_FRAME_ID (0x205ffc0u)

/* Frame lengths in bytes. */
#define SPARK_VELOCITY_SETPOINT_LENGTH (8u)
#define SPARK_DUTY_CYCLE_SETPOINT_LENGTH (8u)
#define SPARK_SMART_VELOCITY_SETPOINT_LENGTH (8u)
#define SPARK_POSITION_SETPOINT_LENGTH (8u)
#define SPARK_VOLTAGE_SETPOINT_LENGTH (8u)
#define SPARK_CURRENT_SETPOINT_LENGTH (8u)
#define SPARK_SMART_MOTION_SETPOINT_LENGTH (8u)
#define SPARK_MAXMOTION_SETPOINT_LENGTH (8u)
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_LENGTH (8u)
#define SPARK_SET_STATUSES_ENABLED_LENGTH (4u)
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_LENGTH (5u)
#define SPARK_PERSIST_PARAMETERS_RESPONSE_LENGTH (1u)
#define SPARK_RESET_SAFE_PARAMETERS_LENGTH (2u)
#define SPARK_RESET_SAFE_PARAMETERS_RESPONSE_LENGTH (1u)
#define SPARK_COMPLETE_FACTORY_RESET_LENGTH (2u)
#define SPARK_COMPLETE_FACTORY_RESET_RESPONSE_LENGTH (1u)
#define SPARK_LEGACY_STATUS_0_LENGTH (8u)
#define SPARK_CLEAR_FAULTS_LENGTH (0u)
#define SPARK_IDENTIFY_UNIQUE_SPARK_LENGTH (4u)
#define SPARK_IDENTIFY_LENGTH (0u)
#define SPARK_NACK_LENGTH (0u)
#define SPARK_ACK_LENGTH (0u)
#define SPARK_LED_SYNC_LENGTH (0u)
#define SPARK_SET_CAN_ID_LENGTH (5u)
#define SPARK_GET_FIRMWARE_VERSION_LENGTH (8u)
#define SPARK_SWDL_DATA_LENGTH (8u)
#define SPARK_SWDL_CHECKSUM_LENGTH (8u)
#define SPARK_SWDL_RETRANSMIT_LENGTH (0u)
#define SPARK_SET_PRIMARY_ENCODER_POSITION_LENGTH (5u)
#define SPARK_SET_I_ACCUMULATION_LENGTH (5u)
#define SPARK_SET_ANALOG_POSITION_LENGTH (5u)
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_LENGTH (5u)
#define SPARK_SET_DUTY_CYCLE_POSITION_LENGTH (5u)
#define SPARK_SECONDARY_HEARTBEAT_LENGTH (8u)
#define SPARK_USB_ONLY_IDENTIFY_LENGTH (0u)
#define SPARK_USB_ONLY_ENTER_DFU_BOOTLOADER_LENGTH (2u)
#define SPARK_GET_TEMPERATURES_LENGTH (8u)
#define SPARK_GET_MOTOR_INTERFACE_LENGTH (3u)
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_LENGTH (8u)
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_LENGTH (8u)
#define SPARK_PARAMETER_WRITE_LENGTH (5u)
#define SPARK_PARAMETER_WRITE_RESPONSE_LENGTH (7u)
#define SPARK_PARAMETERS_0_TO_64_CHANGED_LENGTH (8u)
#define SPARK_PARAMETERS_64_TO_128_CHANGED_LENGTH (8u)
#define SPARK_PARAMETERS_128_TO_192_CHANGED_LENGTH (8u)
#define SPARK_PARAMETERS_192_TO_256_CHANGED_LENGTH (8u)
#define SPARK_GET_PARAMETER_RANGE_LENGTH (2u)
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_LENGTH (6u)
#define SPARK_READ_PARAMETER_0_AND_1_LENGTH (8u)
#define SPARK_READ_PARAMETER_2_AND_3_LENGTH (8u)
#define SPARK_READ_PARAMETER_4_AND_5_LENGTH (8u)
#define SPARK_READ_PARAMETER_6_AND_7_LENGTH (8u)
#define SPARK_READ_PARAMETER_8_AND_9_LENGTH (8u)
#define SPARK_READ_PARAMETER_10_AND_11_LENGTH (8u)
#define SPARK_READ_PARAMETER_12_AND_13_LENGTH (8u)
#define SPARK_READ_PARAMETER_14_AND_15_LENGTH (8u)
#define SPARK_READ_PARAMETER_16_AND_17_LENGTH (8u)
#define SPARK_READ_PARAMETER_18_AND_19_LENGTH (8u)
#define SPARK_READ_PARAMETER_20_AND_21_LENGTH (8u)
#define SPARK_READ_PARAMETER_22_AND_23_LENGTH (8u)
#define SPARK_READ_PARAMETER_24_AND_25_LENGTH (8u)
#define SPARK_READ_PARAMETER_26_AND_27_LENGTH (8u)
#define SPARK_READ_PARAMETER_28_AND_29_LENGTH (8u)
#define SPARK_READ_PARAMETER_30_AND_31_LENGTH (8u)
#define SPARK_READ_PARAMETER_32_AND_33_LENGTH (8u)
#define SPARK_READ_PARAMETER_34_AND_35_LENGTH (8u)
#define SPARK_READ_PARAMETER_36_AND_37_LENGTH (8u)
#define SPARK_READ_PARAMETER_38_AND_39_LENGTH (8u)
#define SPARK_READ_PARAMETER_40_AND_41_LENGTH (8u)
#define SPARK_READ_PARAMETER_42_AND_43_LENGTH (8u)
#define SPARK_READ_PARAMETER_44_AND_45_LENGTH (8u)
#define SPARK_READ_PARAMETER_46_AND_47_LENGTH (8u)
#define SPARK_READ_PARAMETER_48_AND_49_LENGTH (8u)
#define SPARK_READ_PARAMETER_50_AND_51_LENGTH (8u)
#define SPARK_READ_PARAMETER_52_AND_53_LENGTH (8u)
#define SPARK_READ_PARAMETER_54_AND_55_LENGTH (8u)
#define SPARK_READ_PARAMETER_56_AND_57_LENGTH (8u)
#define SPARK_READ_PARAMETER_58_AND_59_LENGTH (8u)
#define SPARK_READ_PARAMETER_60_AND_61_LENGTH (8u)
#define SPARK_READ_PARAMETER_62_AND_63_LENGTH (8u)
#define SPARK_READ_PARAMETER_64_AND_65_LENGTH (8u)
#define SPARK_READ_PARAMETER_66_AND_67_LENGTH (8u)
#define SPARK_READ_PARAMETER_68_AND_69_LENGTH (8u)
#define SPARK_READ_PARAMETER_70_AND_71_LENGTH (8u)
#define SPARK_READ_PARAMETER_72_AND_73_LENGTH (8u)
#define SPARK_READ_PARAMETER_74_AND_75_LENGTH (8u)
#define SPARK_READ_PARAMETER_76_AND_77_LENGTH (8u)
#define SPARK_READ_PARAMETER_78_AND_79_LENGTH (8u)
#define SPARK_READ_PARAMETER_80_AND_81_LENGTH (8u)
#define SPARK_READ_PARAMETER_82_AND_83_LENGTH (8u)
#define SPARK_READ_PARAMETER_84_AND_85_LENGTH (8u)
#define SPARK_READ_PARAMETER_86_AND_87_LENGTH (8u)
#define SPARK_READ_PARAMETER_88_AND_89_LENGTH (8u)
#define SPARK_READ_PARAMETER_90_AND_91_LENGTH (8u)
#define SPARK_READ_PARAMETER_92_AND_93_LENGTH (8u)
#define SPARK_READ_PARAMETER_94_AND_95_LENGTH (8u)
#define SPARK_READ_PARAMETER_96_AND_97_LENGTH (8u)
#define SPARK_READ_PARAMETER_98_AND_99_LENGTH (8u)
#define SPARK_READ_PARAMETER_100_AND_101_LENGTH (8u)
#define SPARK_READ_PARAMETER_102_AND_103_LENGTH (8u)
#define SPARK_READ_PARAMETER_104_AND_105_LENGTH (8u)
#define SPARK_READ_PARAMETER_106_AND_107_LENGTH (8u)
#define SPARK_READ_PARAMETER_108_AND_109_LENGTH (8u)
#define SPARK_READ_PARAMETER_110_AND_111_LENGTH (8u)
#define SPARK_READ_PARAMETER_112_AND_113_LENGTH (8u)
#define SPARK_READ_PARAMETER_114_AND_115_LENGTH (8u)
#define SPARK_READ_PARAMETER_116_AND_117_LENGTH (8u)
#define SPARK_READ_PARAMETER_118_AND_119_LENGTH (8u)
#define SPARK_READ_PARAMETER_120_AND_121_LENGTH (8u)
#define SPARK_READ_PARAMETER_122_AND_123_LENGTH (8u)
#define SPARK_READ_PARAMETER_124_AND_125_LENGTH (8u)
#define SPARK_READ_PARAMETER_126_AND_127_LENGTH (8u)
#define SPARK_READ_PARAMETER_128_AND_129_LENGTH (8u)
#define SPARK_READ_PARAMETER_130_AND_131_LENGTH (8u)
#define SPARK_READ_PARAMETER_132_AND_133_LENGTH (8u)
#define SPARK_READ_PARAMETER_134_AND_135_LENGTH (8u)
#define SPARK_READ_PARAMETER_136_AND_137_LENGTH (8u)
#define SPARK_READ_PARAMETER_138_AND_139_LENGTH (8u)
#define SPARK_READ_PARAMETER_140_AND_141_LENGTH (8u)
#define SPARK_READ_PARAMETER_142_AND_143_LENGTH (8u)
#define SPARK_READ_PARAMETER_144_AND_145_LENGTH (8u)
#define SPARK_READ_PARAMETER_146_AND_147_LENGTH (8u)
#define SPARK_READ_PARAMETER_148_AND_149_LENGTH (8u)
#define SPARK_READ_PARAMETER_150_AND_151_LENGTH (8u)
#define SPARK_READ_PARAMETER_152_AND_153_LENGTH (8u)
#define SPARK_READ_PARAMETER_154_AND_155_LENGTH (8u)
#define SPARK_READ_PARAMETER_156_AND_157_LENGTH (8u)
#define SPARK_READ_PARAMETER_158_AND_159_LENGTH (8u)
#define SPARK_READ_PARAMETER_160_AND_161_LENGTH (8u)
#define SPARK_READ_PARAMETER_162_AND_163_LENGTH (8u)
#define SPARK_READ_PARAMETER_164_AND_165_LENGTH (8u)
#define SPARK_READ_PARAMETER_166_AND_167_LENGTH (8u)
#define SPARK_READ_PARAMETER_168_AND_169_LENGTH (8u)
#define SPARK_READ_PARAMETER_170_AND_171_LENGTH (8u)
#define SPARK_READ_PARAMETER_172_AND_173_LENGTH (8u)
#define SPARK_READ_PARAMETER_174_AND_175_LENGTH (8u)
#define SPARK_READ_PARAMETER_176_AND_177_LENGTH (8u)
#define SPARK_READ_PARAMETER_178_AND_179_LENGTH (8u)
#define SPARK_READ_PARAMETER_180_AND_181_LENGTH (8u)
#define SPARK_READ_PARAMETER_182_AND_183_LENGTH (8u)
#define SPARK_READ_PARAMETER_184_AND_185_LENGTH (8u)
#define SPARK_READ_PARAMETER_186_AND_187_LENGTH (8u)
#define SPARK_READ_PARAMETER_188_AND_189_LENGTH (8u)
#define SPARK_READ_PARAMETER_190_AND_191_LENGTH (8u)
#define SPARK_READ_PARAMETER_192_AND_193_LENGTH (8u)
#define SPARK_READ_PARAMETER_194_AND_195_LENGTH (8u)
#define SPARK_READ_PARAMETER_196_AND_197_LENGTH (8u)
#define SPARK_READ_PARAMETER_198_AND_199_LENGTH (8u)
#define SPARK_READ_PARAMETER_200_AND_201_LENGTH (8u)
#define SPARK_READ_PARAMETER_202_AND_203_LENGTH (8u)
#define SPARK_READ_PARAMETER_204_AND_205_LENGTH (8u)
#define SPARK_READ_PARAMETER_206_AND_207_LENGTH (8u)
#define SPARK_READ_PARAMETER_208_AND_209_LENGTH (8u)
#define SPARK_READ_PARAMETER_210_AND_211_LENGTH (8u)
#define SPARK_READ_PARAMETER_212_AND_213_LENGTH (8u)
#define SPARK_READ_PARAMETER_214_AND_215_LENGTH (8u)
#define SPARK_READ_PARAMETER_216_AND_217_LENGTH (8u)
#define SPARK_READ_PARAMETER_218_AND_219_LENGTH (8u)
#define SPARK_READ_PARAMETER_220_AND_221_LENGTH (8u)
#define SPARK_READ_PARAMETER_222_AND_223_LENGTH (8u)
#define SPARK_READ_PARAMETER_224_AND_225_LENGTH (8u)
#define SPARK_READ_PARAMETER_226_AND_227_LENGTH (8u)
#define SPARK_READ_PARAMETER_228_AND_229_LENGTH (8u)
#define SPARK_READ_PARAMETER_230_AND_231_LENGTH (8u)
#define SPARK_READ_PARAMETER_232_AND_233_LENGTH (8u)
#define SPARK_READ_PARAMETER_234_AND_235_LENGTH (8u)
#define SPARK_READ_PARAMETER_236_AND_237_LENGTH (8u)
#define SPARK_READ_PARAMETER_238_AND_239_LENGTH (8u)
#define SPARK_READ_PARAMETER_240_AND_241_LENGTH (8u)
#define SPARK_READ_PARAMETER_242_AND_243_LENGTH (8u)
#define SPARK_READ_PARAMETER_244_AND_245_LENGTH (8u)
#define SPARK_READ_PARAMETER_246_AND_247_LENGTH (8u)
#define SPARK_READ_PARAMETER_248_AND_249_LENGTH (8u)
#define SPARK_READ_PARAMETER_250_AND_251_LENGTH (8u)
#define SPARK_READ_PARAMETER_252_AND_253_LENGTH (8u)
#define SPARK_READ_PARAMETER_254_AND_255_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_0_AND_1_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_2_AND_3_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_4_AND_5_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_6_AND_7_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_8_AND_9_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_10_AND_11_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_12_AND_13_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_14_AND_15_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_16_AND_17_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_18_AND_19_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_20_AND_21_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_22_AND_23_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_24_AND_25_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_26_AND_27_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_28_AND_29_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_30_AND_31_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_32_AND_33_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_34_AND_35_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_36_AND_37_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_38_AND_39_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_40_AND_41_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_42_AND_43_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_44_AND_45_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_46_AND_47_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_48_AND_49_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_50_AND_51_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_52_AND_53_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_54_AND_55_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_56_AND_57_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_58_AND_59_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_60_AND_61_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_62_AND_63_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_64_AND_65_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_66_AND_67_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_68_AND_69_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_70_AND_71_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_72_AND_73_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_74_AND_75_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_76_AND_77_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_78_AND_79_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_80_AND_81_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_82_AND_83_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_84_AND_85_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_86_AND_87_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_88_AND_89_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_90_AND_91_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_92_AND_93_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_94_AND_95_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_96_AND_97_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_98_AND_99_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_100_AND_101_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_102_AND_103_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_104_AND_105_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_106_AND_107_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_108_AND_109_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_110_AND_111_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_112_AND_113_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_114_AND_115_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_116_AND_117_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_118_AND_119_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_120_AND_121_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_122_AND_123_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_124_AND_125_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_126_AND_127_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_128_AND_129_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_130_AND_131_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_132_AND_133_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_134_AND_135_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_136_AND_137_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_138_AND_139_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_140_AND_141_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_142_AND_143_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_144_AND_145_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_146_AND_147_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_148_AND_149_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_150_AND_151_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_152_AND_153_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_154_AND_155_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_156_AND_157_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_158_AND_159_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_160_AND_161_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_162_AND_163_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_164_AND_165_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_166_AND_167_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_168_AND_169_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_170_AND_171_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_172_AND_173_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_174_AND_175_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_176_AND_177_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_178_AND_179_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_180_AND_181_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_182_AND_183_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_184_AND_185_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_186_AND_187_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_188_AND_189_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_190_AND_191_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_192_AND_193_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_194_AND_195_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_196_AND_197_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_198_AND_199_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_200_AND_201_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_202_AND_203_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_204_AND_205_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_206_AND_207_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_208_AND_209_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_210_AND_211_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_212_AND_213_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_214_AND_215_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_216_AND_217_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_218_AND_219_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_220_AND_221_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_222_AND_223_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_224_AND_225_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_226_AND_227_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_228_AND_229_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_230_AND_231_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_232_AND_233_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_234_AND_235_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_236_AND_237_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_238_AND_239_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_240_AND_241_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_242_AND_243_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_244_AND_245_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_246_AND_247_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_248_AND_249_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_250_AND_251_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_252_AND_253_LENGTH (8u)
#define SPARK_WRITE_PARAMETER_254_AND_255_LENGTH (8u)
#define SPARK_START_FOLLOWER_MODE_LENGTH (0u)
#define SPARK_START_FOLLOWER_MODE_RESPONSE_LENGTH (1u)
#define SPARK_STOP_FOLLOWER_MODE_LENGTH (0u)
#define SPARK_STOP_FOLLOWER_MODE_RESPONSE_LENGTH (0u)
#define SPARK_ENTER_SWDL_CAN_BOOTLOADER_LENGTH (0u)
#define SPARK_STATUS_0_LENGTH (8u)
#define SPARK_STATUS_1_LENGTH (8u)
#define SPARK_STATUS_2_LENGTH (8u)
#define SPARK_STATUS_3_LENGTH (8u)
#define SPARK_STATUS_4_LENGTH (8u)
#define SPARK_STATUS_5_LENGTH (8u)
#define SPARK_STATUS_6_LENGTH (8u)
#define SPARK_STATUS_7_LENGTH (8u)
#define SPARK_UNIQUE_ID_BROADCAST_LENGTH (4u)
#define SPARK_PERSIST_PARAMETERS_LENGTH (2u)

/* Extended or standard frame types. */
#define SPARK_VELOCITY_SETPOINT_IS_EXTENDED (1)
#define SPARK_DUTY_CYCLE_SETPOINT_IS_EXTENDED (1)
#define SPARK_SMART_VELOCITY_SETPOINT_IS_EXTENDED (1)
#define SPARK_POSITION_SETPOINT_IS_EXTENDED (1)
#define SPARK_VOLTAGE_SETPOINT_IS_EXTENDED (1)
#define SPARK_CURRENT_SETPOINT_IS_EXTENDED (1)
#define SPARK_SMART_MOTION_SETPOINT_IS_EXTENDED (1)
#define SPARK_MAXMOTION_SETPOINT_IS_EXTENDED (1)
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_IS_EXTENDED (1)
#define SPARK_SET_STATUSES_ENABLED_IS_EXTENDED (1)
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_IS_EXTENDED (1)
#define SPARK_PERSIST_PARAMETERS_RESPONSE_IS_EXTENDED (1)
#define SPARK_RESET_SAFE_PARAMETERS_IS_EXTENDED (1)
#define SPARK_RESET_SAFE_PARAMETERS_RESPONSE_IS_EXTENDED (1)
#define SPARK_COMPLETE_FACTORY_RESET_IS_EXTENDED (1)
#define SPARK_COMPLETE_FACTORY_RESET_RESPONSE_IS_EXTENDED (1)
#define SPARK_LEGACY_STATUS_0_IS_EXTENDED (1)
#define SPARK_CLEAR_FAULTS_IS_EXTENDED (1)
#define SPARK_IDENTIFY_UNIQUE_SPARK_IS_EXTENDED (1)
#define SPARK_IDENTIFY_IS_EXTENDED (1)
#define SPARK_NACK_IS_EXTENDED (1)
#define SPARK_ACK_IS_EXTENDED (1)
#define SPARK_LED_SYNC_IS_EXTENDED (1)
#define SPARK_SET_CAN_ID_IS_EXTENDED (1)
#define SPARK_GET_FIRMWARE_VERSION_IS_EXTENDED (1)
#define SPARK_SWDL_DATA_IS_EXTENDED (1)
#define SPARK_SWDL_CHECKSUM_IS_EXTENDED (1)
#define SPARK_SWDL_RETRANSMIT_IS_EXTENDED (1)
#define SPARK_SET_PRIMARY_ENCODER_POSITION_IS_EXTENDED (1)
#define SPARK_SET_I_ACCUMULATION_IS_EXTENDED (1)
#define SPARK_SET_ANALOG_POSITION_IS_EXTENDED (1)
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_IS_EXTENDED (1)
#define SPARK_SET_DUTY_CYCLE_POSITION_IS_EXTENDED (1)
#define SPARK_SECONDARY_HEARTBEAT_IS_EXTENDED (1)
#define SPARK_USB_ONLY_IDENTIFY_IS_EXTENDED (1)
#define SPARK_USB_ONLY_ENTER_DFU_BOOTLOADER_IS_EXTENDED (1)
#define SPARK_GET_TEMPERATURES_IS_EXTENDED (1)
#define SPARK_GET_MOTOR_INTERFACE_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_IS_EXTENDED (1)
#define SPARK_PARAMETER_WRITE_IS_EXTENDED (1)
#define SPARK_PARAMETER_WRITE_RESPONSE_IS_EXTENDED (1)
#define SPARK_PARAMETERS_0_TO_64_CHANGED_IS_EXTENDED (1)
#define SPARK_PARAMETERS_64_TO_128_CHANGED_IS_EXTENDED (1)
#define SPARK_PARAMETERS_128_TO_192_CHANGED_IS_EXTENDED (1)
#define SPARK_PARAMETERS_192_TO_256_CHANGED_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_RANGE_IS_EXTENDED (1)
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_0_AND_1_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_2_AND_3_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_4_AND_5_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_6_AND_7_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_8_AND_9_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_10_AND_11_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_12_AND_13_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_14_AND_15_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_16_AND_17_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_18_AND_19_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_20_AND_21_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_22_AND_23_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_24_AND_25_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_26_AND_27_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_28_AND_29_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_30_AND_31_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_32_AND_33_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_34_AND_35_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_36_AND_37_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_38_AND_39_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_40_AND_41_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_42_AND_43_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_44_AND_45_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_46_AND_47_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_48_AND_49_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_50_AND_51_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_52_AND_53_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_54_AND_55_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_56_AND_57_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_58_AND_59_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_60_AND_61_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_62_AND_63_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_64_AND_65_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_66_AND_67_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_68_AND_69_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_70_AND_71_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_72_AND_73_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_74_AND_75_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_76_AND_77_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_78_AND_79_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_80_AND_81_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_82_AND_83_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_84_AND_85_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_86_AND_87_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_88_AND_89_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_90_AND_91_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_92_AND_93_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_94_AND_95_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_96_AND_97_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_98_AND_99_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_100_AND_101_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_102_AND_103_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_104_AND_105_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_106_AND_107_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_108_AND_109_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_110_AND_111_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_112_AND_113_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_114_AND_115_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_116_AND_117_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_118_AND_119_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_120_AND_121_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_122_AND_123_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_124_AND_125_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_126_AND_127_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_128_AND_129_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_130_AND_131_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_132_AND_133_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_134_AND_135_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_136_AND_137_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_138_AND_139_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_140_AND_141_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_142_AND_143_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_144_AND_145_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_146_AND_147_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_148_AND_149_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_150_AND_151_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_152_AND_153_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_154_AND_155_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_156_AND_157_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_158_AND_159_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_160_AND_161_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_162_AND_163_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_164_AND_165_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_166_AND_167_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_168_AND_169_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_170_AND_171_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_172_AND_173_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_174_AND_175_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_176_AND_177_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_178_AND_179_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_180_AND_181_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_182_AND_183_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_184_AND_185_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_186_AND_187_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_188_AND_189_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_190_AND_191_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_192_AND_193_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_194_AND_195_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_196_AND_197_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_198_AND_199_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_200_AND_201_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_202_AND_203_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_204_AND_205_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_206_AND_207_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_208_AND_209_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_210_AND_211_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_212_AND_213_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_214_AND_215_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_216_AND_217_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_218_AND_219_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_220_AND_221_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_222_AND_223_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_224_AND_225_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_226_AND_227_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_228_AND_229_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_230_AND_231_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_232_AND_233_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_234_AND_235_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_236_AND_237_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_238_AND_239_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_240_AND_241_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_242_AND_243_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_244_AND_245_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_246_AND_247_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_248_AND_249_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_250_AND_251_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_252_AND_253_IS_EXTENDED (1)
#define SPARK_READ_PARAMETER_254_AND_255_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_0_AND_1_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_2_AND_3_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_4_AND_5_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_6_AND_7_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_8_AND_9_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_10_AND_11_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_12_AND_13_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_14_AND_15_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_16_AND_17_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_18_AND_19_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_20_AND_21_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_22_AND_23_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_24_AND_25_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_26_AND_27_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_28_AND_29_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_30_AND_31_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_32_AND_33_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_34_AND_35_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_36_AND_37_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_38_AND_39_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_40_AND_41_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_42_AND_43_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_44_AND_45_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_46_AND_47_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_48_AND_49_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_50_AND_51_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_52_AND_53_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_54_AND_55_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_56_AND_57_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_58_AND_59_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_60_AND_61_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_62_AND_63_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_64_AND_65_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_66_AND_67_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_68_AND_69_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_70_AND_71_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_72_AND_73_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_74_AND_75_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_76_AND_77_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_78_AND_79_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_80_AND_81_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_82_AND_83_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_84_AND_85_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_86_AND_87_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_88_AND_89_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_90_AND_91_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_92_AND_93_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_94_AND_95_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_96_AND_97_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_98_AND_99_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_100_AND_101_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_102_AND_103_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_104_AND_105_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_106_AND_107_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_108_AND_109_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_110_AND_111_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_112_AND_113_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_114_AND_115_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_116_AND_117_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_118_AND_119_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_120_AND_121_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_122_AND_123_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_124_AND_125_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_126_AND_127_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_128_AND_129_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_130_AND_131_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_132_AND_133_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_134_AND_135_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_136_AND_137_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_138_AND_139_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_140_AND_141_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_142_AND_143_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_144_AND_145_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_146_AND_147_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_148_AND_149_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_150_AND_151_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_152_AND_153_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_154_AND_155_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_156_AND_157_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_158_AND_159_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_160_AND_161_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_162_AND_163_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_164_AND_165_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_166_AND_167_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_168_AND_169_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_170_AND_171_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_172_AND_173_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_174_AND_175_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_176_AND_177_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_178_AND_179_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_180_AND_181_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_182_AND_183_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_184_AND_185_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_186_AND_187_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_188_AND_189_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_190_AND_191_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_192_AND_193_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_194_AND_195_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_196_AND_197_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_198_AND_199_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_200_AND_201_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_202_AND_203_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_204_AND_205_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_206_AND_207_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_208_AND_209_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_210_AND_211_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_212_AND_213_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_214_AND_215_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_216_AND_217_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_218_AND_219_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_220_AND_221_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_222_AND_223_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_224_AND_225_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_226_AND_227_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_228_AND_229_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_230_AND_231_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_232_AND_233_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_234_AND_235_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_236_AND_237_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_238_AND_239_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_240_AND_241_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_242_AND_243_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_244_AND_245_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_246_AND_247_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_248_AND_249_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_250_AND_251_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_252_AND_253_IS_EXTENDED (1)
#define SPARK_WRITE_PARAMETER_254_AND_255_IS_EXTENDED (1)
#define SPARK_START_FOLLOWER_MODE_IS_EXTENDED (1)
#define SPARK_START_FOLLOWER_MODE_RESPONSE_IS_EXTENDED (1)
#define SPARK_STOP_FOLLOWER_MODE_IS_EXTENDED (1)
#define SPARK_STOP_FOLLOWER_MODE_RESPONSE_IS_EXTENDED (1)
#define SPARK_ENTER_SWDL_CAN_BOOTLOADER_IS_EXTENDED (1)
#define SPARK_STATUS_0_IS_EXTENDED (1)
#define SPARK_STATUS_1_IS_EXTENDED (1)
#define SPARK_STATUS_2_IS_EXTENDED (1)
#define SPARK_STATUS_3_IS_EXTENDED (1)
#define SPARK_STATUS_4_IS_EXTENDED (1)
#define SPARK_STATUS_5_IS_EXTENDED (1)
#define SPARK_STATUS_6_IS_EXTENDED (1)
#define SPARK_STATUS_7_IS_EXTENDED (1)
#define SPARK_UNIQUE_ID_BROADCAST_IS_EXTENDED (1)
#define SPARK_PERSIST_PARAMETERS_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */

/* Signal choices. */

/* Frame Names. */
#define SPARK_VELOCITY_SETPOINT_NAME "VELOCITY_SETPOINT"
#define SPARK_DUTY_CYCLE_SETPOINT_NAME "DUTY_CYCLE_SETPOINT"
#define SPARK_SMART_VELOCITY_SETPOINT_NAME "SMART_VELOCITY_SETPOINT"
#define SPARK_POSITION_SETPOINT_NAME "POSITION_SETPOINT"
#define SPARK_VOLTAGE_SETPOINT_NAME "VOLTAGE_SETPOINT"
#define SPARK_CURRENT_SETPOINT_NAME "CURRENT_SETPOINT"
#define SPARK_SMART_MOTION_SETPOINT_NAME "SMART_MOTION_SETPOINT"
#define SPARK_MAXMOTION_SETPOINT_NAME "MAXMOTION_SETPOINT"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_NAME "MAXMOTION_VELOCITY_SETPOINT"
#define SPARK_SET_STATUSES_ENABLED_NAME "SET_STATUSES_ENABLED"
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_NAME "SET_STATUSES_ENABLED_RESPONSE"
#define SPARK_PERSIST_PARAMETERS_RESPONSE_NAME "PERSIST_PARAMETERS_RESPONSE"
#define SPARK_RESET_SAFE_PARAMETERS_NAME "RESET_SAFE_PARAMETERS"
#define SPARK_RESET_SAFE_PARAMETERS_RESPONSE_NAME \
    "RESET_SAFE_PARAMETERS_RESPONSE"
#define SPARK_COMPLETE_FACTORY_RESET_NAME "COMPLETE_FACTORY_RESET"
#define SPARK_COMPLETE_FACTORY_RESET_RESPONSE_NAME \
    "COMPLETE_FACTORY_RESET_RESPONSE"
#define SPARK_LEGACY_STATUS_0_NAME "LEGACY_STATUS_0"
#define SPARK_CLEAR_FAULTS_NAME "CLEAR_FAULTS"
#define SPARK_IDENTIFY_UNIQUE_SPARK_NAME "IDENTIFY_UNIQUE_SPARK"
#define SPARK_IDENTIFY_NAME "IDENTIFY"
#define SPARK_NACK_NAME "NACK"
#define SPARK_ACK_NAME "ACK"
#define SPARK_LED_SYNC_NAME "LED_SYNC"
#define SPARK_SET_CAN_ID_NAME "SET_CAN_ID"
#define SPARK_GET_FIRMWARE_VERSION_NAME "GET_FIRMWARE_VERSION"
#define SPARK_SWDL_DATA_NAME "SWDL_DATA"
#define SPARK_SWDL_CHECKSUM_NAME "SWDL_CHECKSUM"
#define SPARK_SWDL_RETRANSMIT_NAME "SWDL_RETRANSMIT"
#define SPARK_SET_PRIMARY_ENCODER_POSITION_NAME "SET_PRIMARY_ENCODER_POSITION"
#define SPARK_SET_I_ACCUMULATION_NAME "SET_I_ACCUMULATION"
#define SPARK_SET_ANALOG_POSITION_NAME "SET_ANALOG_POSITION"
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_NAME \
    "SET_EXT_OR_ALT_ENCODER_POSITION"
#define SPARK_SET_DUTY_CYCLE_POSITION_NAME "SET_DUTY_CYCLE_POSITION"
#define SPARK_SECONDARY_HEARTBEAT_NAME "SECONDARY_HEARTBEAT"
#define SPARK_USB_ONLY_IDENTIFY_NAME "USB_ONLY_IDENTIFY"
#define SPARK_USB_ONLY_ENTER_DFU_BOOTLOADER_NAME "USB_ONLY_ENTER_DFU_BOOTLOADER"
#define SPARK_GET_TEMPERATURES_NAME "GET_TEMPERATURES"
#define SPARK_GET_MOTOR_INTERFACE_NAME "GET_MOTOR_INTERFACE"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_NAME "GET_PARAMETER_0_TO_15_TYPES"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_NAME "GET_PARAMETER_16_TO_31_TYPES"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_NAME "GET_PARAMETER_32_TO_47_TYPES"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_NAME "GET_PARAMETER_48_TO_63_TYPES"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_NAME "GET_PARAMETER_64_TO_79_TYPES"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_NAME "GET_PARAMETER_80_TO_95_TYPES"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_NAME "GET_PARAMETER_96_TO_111_TYPES"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_NAME \
    "GET_PARAMETER_112_TO_127_TYPES"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_NAME \
    "GET_PARAMETER_128_TO_143_TYPES"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_NAME \
    "GET_PARAMETER_144_TO_159_TYPES"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_NAME \
    "GET_PARAMETER_160_TO_175_TYPES"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_NAME \
    "GET_PARAMETER_176_TO_191_TYPES"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_NAME \
    "GET_PARAMETER_192_TO_207_TYPES"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_NAME \
    "GET_PARAMETER_208_TO_223_TYPES"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_NAME \
    "GET_PARAMETER_224_TO_239_TYPES"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_NAME \
    "GET_PARAMETER_240_TO_255_TYPES"
#define SPARK_PARAMETER_WRITE_NAME "PARAMETER_WRITE"
#define SPARK_PARAMETER_WRITE_RESPONSE_NAME "PARAMETER_WRITE_RESPONSE"
#define SPARK_PARAMETERS_0_TO_64_CHANGED_NAME "PARAMETERS_0_TO_64_CHANGED"
#define SPARK_PARAMETERS_64_TO_128_CHANGED_NAME "PARAMETERS_64_TO_128_CHANGED"
#define SPARK_PARAMETERS_128_TO_192_CHANGED_NAME "PARAMETERS_128_TO_192_CHANGED"
#define SPARK_PARAMETERS_192_TO_256_CHANGED_NAME "PARAMETERS_192_TO_256_CHANGED"
#define SPARK_GET_PARAMETER_RANGE_NAME "GET_PARAMETER_RANGE"
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_NAME "GET_PARAMETER_RANGE_RESPONSE"
#define SPARK_READ_PARAMETER_0_AND_1_NAME "READ_PARAMETER_0_AND_1"
#define SPARK_READ_PARAMETER_2_AND_3_NAME "READ_PARAMETER_2_AND_3"
#define SPARK_READ_PARAMETER_4_AND_5_NAME "READ_PARAMETER_4_AND_5"
#define SPARK_READ_PARAMETER_6_AND_7_NAME "READ_PARAMETER_6_AND_7"
#define SPARK_READ_PARAMETER_8_AND_9_NAME "READ_PARAMETER_8_AND_9"
#define SPARK_READ_PARAMETER_10_AND_11_NAME "READ_PARAMETER_10_AND_11"
#define SPARK_READ_PARAMETER_12_AND_13_NAME "READ_PARAMETER_12_AND_13"
#define SPARK_READ_PARAMETER_14_AND_15_NAME "READ_PARAMETER_14_AND_15"
#define SPARK_READ_PARAMETER_16_AND_17_NAME "READ_PARAMETER_16_AND_17"
#define SPARK_READ_PARAMETER_18_AND_19_NAME "READ_PARAMETER_18_AND_19"
#define SPARK_READ_PARAMETER_20_AND_21_NAME "READ_PARAMETER_20_AND_21"
#define SPARK_READ_PARAMETER_22_AND_23_NAME "READ_PARAMETER_22_AND_23"
#define SPARK_READ_PARAMETER_24_AND_25_NAME "READ_PARAMETER_24_AND_25"
#define SPARK_READ_PARAMETER_26_AND_27_NAME "READ_PARAMETER_26_AND_27"
#define SPARK_READ_PARAMETER_28_AND_29_NAME "READ_PARAMETER_28_AND_29"
#define SPARK_READ_PARAMETER_30_AND_31_NAME "READ_PARAMETER_30_AND_31"
#define SPARK_READ_PARAMETER_32_AND_33_NAME "READ_PARAMETER_32_AND_33"
#define SPARK_READ_PARAMETER_34_AND_35_NAME "READ_PARAMETER_34_AND_35"
#define SPARK_READ_PARAMETER_36_AND_37_NAME "READ_PARAMETER_36_AND_37"
#define SPARK_READ_PARAMETER_38_AND_39_NAME "READ_PARAMETER_38_AND_39"
#define SPARK_READ_PARAMETER_40_AND_41_NAME "READ_PARAMETER_40_AND_41"
#define SPARK_READ_PARAMETER_42_AND_43_NAME "READ_PARAMETER_42_AND_43"
#define SPARK_READ_PARAMETER_44_AND_45_NAME "READ_PARAMETER_44_AND_45"
#define SPARK_READ_PARAMETER_46_AND_47_NAME "READ_PARAMETER_46_AND_47"
#define SPARK_READ_PARAMETER_48_AND_49_NAME "READ_PARAMETER_48_AND_49"
#define SPARK_READ_PARAMETER_50_AND_51_NAME "READ_PARAMETER_50_AND_51"
#define SPARK_READ_PARAMETER_52_AND_53_NAME "READ_PARAMETER_52_AND_53"
#define SPARK_READ_PARAMETER_54_AND_55_NAME "READ_PARAMETER_54_AND_55"
#define SPARK_READ_PARAMETER_56_AND_57_NAME "READ_PARAMETER_56_AND_57"
#define SPARK_READ_PARAMETER_58_AND_59_NAME "READ_PARAMETER_58_AND_59"
#define SPARK_READ_PARAMETER_60_AND_61_NAME "READ_PARAMETER_60_AND_61"
#define SPARK_READ_PARAMETER_62_AND_63_NAME "READ_PARAMETER_62_AND_63"
#define SPARK_READ_PARAMETER_64_AND_65_NAME "READ_PARAMETER_64_AND_65"
#define SPARK_READ_PARAMETER_66_AND_67_NAME "READ_PARAMETER_66_AND_67"
#define SPARK_READ_PARAMETER_68_AND_69_NAME "READ_PARAMETER_68_AND_69"
#define SPARK_READ_PARAMETER_70_AND_71_NAME "READ_PARAMETER_70_AND_71"
#define SPARK_READ_PARAMETER_72_AND_73_NAME "READ_PARAMETER_72_AND_73"
#define SPARK_READ_PARAMETER_74_AND_75_NAME "READ_PARAMETER_74_AND_75"
#define SPARK_READ_PARAMETER_76_AND_77_NAME "READ_PARAMETER_76_AND_77"
#define SPARK_READ_PARAMETER_78_AND_79_NAME "READ_PARAMETER_78_AND_79"
#define SPARK_READ_PARAMETER_80_AND_81_NAME "READ_PARAMETER_80_AND_81"
#define SPARK_READ_PARAMETER_82_AND_83_NAME "READ_PARAMETER_82_AND_83"
#define SPARK_READ_PARAMETER_84_AND_85_NAME "READ_PARAMETER_84_AND_85"
#define SPARK_READ_PARAMETER_86_AND_87_NAME "READ_PARAMETER_86_AND_87"
#define SPARK_READ_PARAMETER_88_AND_89_NAME "READ_PARAMETER_88_AND_89"
#define SPARK_READ_PARAMETER_90_AND_91_NAME "READ_PARAMETER_90_AND_91"
#define SPARK_READ_PARAMETER_92_AND_93_NAME "READ_PARAMETER_92_AND_93"
#define SPARK_READ_PARAMETER_94_AND_95_NAME "READ_PARAMETER_94_AND_95"
#define SPARK_READ_PARAMETER_96_AND_97_NAME "READ_PARAMETER_96_AND_97"
#define SPARK_READ_PARAMETER_98_AND_99_NAME "READ_PARAMETER_98_AND_99"
#define SPARK_READ_PARAMETER_100_AND_101_NAME "READ_PARAMETER_100_AND_101"
#define SPARK_READ_PARAMETER_102_AND_103_NAME "READ_PARAMETER_102_AND_103"
#define SPARK_READ_PARAMETER_104_AND_105_NAME "READ_PARAMETER_104_AND_105"
#define SPARK_READ_PARAMETER_106_AND_107_NAME "READ_PARAMETER_106_AND_107"
#define SPARK_READ_PARAMETER_108_AND_109_NAME "READ_PARAMETER_108_AND_109"
#define SPARK_READ_PARAMETER_110_AND_111_NAME "READ_PARAMETER_110_AND_111"
#define SPARK_READ_PARAMETER_112_AND_113_NAME "READ_PARAMETER_112_AND_113"
#define SPARK_READ_PARAMETER_114_AND_115_NAME "READ_PARAMETER_114_AND_115"
#define SPARK_READ_PARAMETER_116_AND_117_NAME "READ_PARAMETER_116_AND_117"
#define SPARK_READ_PARAMETER_118_AND_119_NAME "READ_PARAMETER_118_AND_119"
#define SPARK_READ_PARAMETER_120_AND_121_NAME "READ_PARAMETER_120_AND_121"
#define SPARK_READ_PARAMETER_122_AND_123_NAME "READ_PARAMETER_122_AND_123"
#define SPARK_READ_PARAMETER_124_AND_125_NAME "READ_PARAMETER_124_AND_125"
#define SPARK_READ_PARAMETER_126_AND_127_NAME "READ_PARAMETER_126_AND_127"
#define SPARK_READ_PARAMETER_128_AND_129_NAME "READ_PARAMETER_128_AND_129"
#define SPARK_READ_PARAMETER_130_AND_131_NAME "READ_PARAMETER_130_AND_131"
#define SPARK_READ_PARAMETER_132_AND_133_NAME "READ_PARAMETER_132_AND_133"
#define SPARK_READ_PARAMETER_134_AND_135_NAME "READ_PARAMETER_134_AND_135"
#define SPARK_READ_PARAMETER_136_AND_137_NAME "READ_PARAMETER_136_AND_137"
#define SPARK_READ_PARAMETER_138_AND_139_NAME "READ_PARAMETER_138_AND_139"
#define SPARK_READ_PARAMETER_140_AND_141_NAME "READ_PARAMETER_140_AND_141"
#define SPARK_READ_PARAMETER_142_AND_143_NAME "READ_PARAMETER_142_AND_143"
#define SPARK_READ_PARAMETER_144_AND_145_NAME "READ_PARAMETER_144_AND_145"
#define SPARK_READ_PARAMETER_146_AND_147_NAME "READ_PARAMETER_146_AND_147"
#define SPARK_READ_PARAMETER_148_AND_149_NAME "READ_PARAMETER_148_AND_149"
#define SPARK_READ_PARAMETER_150_AND_151_NAME "READ_PARAMETER_150_AND_151"
#define SPARK_READ_PARAMETER_152_AND_153_NAME "READ_PARAMETER_152_AND_153"
#define SPARK_READ_PARAMETER_154_AND_155_NAME "READ_PARAMETER_154_AND_155"
#define SPARK_READ_PARAMETER_156_AND_157_NAME "READ_PARAMETER_156_AND_157"
#define SPARK_READ_PARAMETER_158_AND_159_NAME "READ_PARAMETER_158_AND_159"
#define SPARK_READ_PARAMETER_160_AND_161_NAME "READ_PARAMETER_160_AND_161"
#define SPARK_READ_PARAMETER_162_AND_163_NAME "READ_PARAMETER_162_AND_163"
#define SPARK_READ_PARAMETER_164_AND_165_NAME "READ_PARAMETER_164_AND_165"
#define SPARK_READ_PARAMETER_166_AND_167_NAME "READ_PARAMETER_166_AND_167"
#define SPARK_READ_PARAMETER_168_AND_169_NAME "READ_PARAMETER_168_AND_169"
#define SPARK_READ_PARAMETER_170_AND_171_NAME "READ_PARAMETER_170_AND_171"
#define SPARK_READ_PARAMETER_172_AND_173_NAME "READ_PARAMETER_172_AND_173"
#define SPARK_READ_PARAMETER_174_AND_175_NAME "READ_PARAMETER_174_AND_175"
#define SPARK_READ_PARAMETER_176_AND_177_NAME "READ_PARAMETER_176_AND_177"
#define SPARK_READ_PARAMETER_178_AND_179_NAME "READ_PARAMETER_178_AND_179"
#define SPARK_READ_PARAMETER_180_AND_181_NAME "READ_PARAMETER_180_AND_181"
#define SPARK_READ_PARAMETER_182_AND_183_NAME "READ_PARAMETER_182_AND_183"
#define SPARK_READ_PARAMETER_184_AND_185_NAME "READ_PARAMETER_184_AND_185"
#define SPARK_READ_PARAMETER_186_AND_187_NAME "READ_PARAMETER_186_AND_187"
#define SPARK_READ_PARAMETER_188_AND_189_NAME "READ_PARAMETER_188_AND_189"
#define SPARK_READ_PARAMETER_190_AND_191_NAME "READ_PARAMETER_190_AND_191"
#define SPARK_READ_PARAMETER_192_AND_193_NAME "READ_PARAMETER_192_AND_193"
#define SPARK_READ_PARAMETER_194_AND_195_NAME "READ_PARAMETER_194_AND_195"
#define SPARK_READ_PARAMETER_196_AND_197_NAME "READ_PARAMETER_196_AND_197"
#define SPARK_READ_PARAMETER_198_AND_199_NAME "READ_PARAMETER_198_AND_199"
#define SPARK_READ_PARAMETER_200_AND_201_NAME "READ_PARAMETER_200_AND_201"
#define SPARK_READ_PARAMETER_202_AND_203_NAME "READ_PARAMETER_202_AND_203"
#define SPARK_READ_PARAMETER_204_AND_205_NAME "READ_PARAMETER_204_AND_205"
#define SPARK_READ_PARAMETER_206_AND_207_NAME "READ_PARAMETER_206_AND_207"
#define SPARK_READ_PARAMETER_208_AND_209_NAME "READ_PARAMETER_208_AND_209"
#define SPARK_READ_PARAMETER_210_AND_211_NAME "READ_PARAMETER_210_AND_211"
#define SPARK_READ_PARAMETER_212_AND_213_NAME "READ_PARAMETER_212_AND_213"
#define SPARK_READ_PARAMETER_214_AND_215_NAME "READ_PARAMETER_214_AND_215"
#define SPARK_READ_PARAMETER_216_AND_217_NAME "READ_PARAMETER_216_AND_217"
#define SPARK_READ_PARAMETER_218_AND_219_NAME "READ_PARAMETER_218_AND_219"
#define SPARK_READ_PARAMETER_220_AND_221_NAME "READ_PARAMETER_220_AND_221"
#define SPARK_READ_PARAMETER_222_AND_223_NAME "READ_PARAMETER_222_AND_223"
#define SPARK_READ_PARAMETER_224_AND_225_NAME "READ_PARAMETER_224_AND_225"
#define SPARK_READ_PARAMETER_226_AND_227_NAME "READ_PARAMETER_226_AND_227"
#define SPARK_READ_PARAMETER_228_AND_229_NAME "READ_PARAMETER_228_AND_229"
#define SPARK_READ_PARAMETER_230_AND_231_NAME "READ_PARAMETER_230_AND_231"
#define SPARK_READ_PARAMETER_232_AND_233_NAME "READ_PARAMETER_232_AND_233"
#define SPARK_READ_PARAMETER_234_AND_235_NAME "READ_PARAMETER_234_AND_235"
#define SPARK_READ_PARAMETER_236_AND_237_NAME "READ_PARAMETER_236_AND_237"
#define SPARK_READ_PARAMETER_238_AND_239_NAME "READ_PARAMETER_238_AND_239"
#define SPARK_READ_PARAMETER_240_AND_241_NAME "READ_PARAMETER_240_AND_241"
#define SPARK_READ_PARAMETER_242_AND_243_NAME "READ_PARAMETER_242_AND_243"
#define SPARK_READ_PARAMETER_244_AND_245_NAME "READ_PARAMETER_244_AND_245"
#define SPARK_READ_PARAMETER_246_AND_247_NAME "READ_PARAMETER_246_AND_247"
#define SPARK_READ_PARAMETER_248_AND_249_NAME "READ_PARAMETER_248_AND_249"
#define SPARK_READ_PARAMETER_250_AND_251_NAME "READ_PARAMETER_250_AND_251"
#define SPARK_READ_PARAMETER_252_AND_253_NAME "READ_PARAMETER_252_AND_253"
#define SPARK_READ_PARAMETER_254_AND_255_NAME "READ_PARAMETER_254_AND_255"
#define SPARK_WRITE_PARAMETER_0_AND_1_NAME "WRITE_PARAMETER_0_AND_1"
#define SPARK_WRITE_PARAMETER_2_AND_3_NAME "WRITE_PARAMETER_2_AND_3"
#define SPARK_WRITE_PARAMETER_4_AND_5_NAME "WRITE_PARAMETER_4_AND_5"
#define SPARK_WRITE_PARAMETER_6_AND_7_NAME "WRITE_PARAMETER_6_AND_7"
#define SPARK_WRITE_PARAMETER_8_AND_9_NAME "WRITE_PARAMETER_8_AND_9"
#define SPARK_WRITE_PARAMETER_10_AND_11_NAME "WRITE_PARAMETER_10_AND_11"
#define SPARK_WRITE_PARAMETER_12_AND_13_NAME "WRITE_PARAMETER_12_AND_13"
#define SPARK_WRITE_PARAMETER_14_AND_15_NAME "WRITE_PARAMETER_14_AND_15"
#define SPARK_WRITE_PARAMETER_16_AND_17_NAME "WRITE_PARAMETER_16_AND_17"
#define SPARK_WRITE_PARAMETER_18_AND_19_NAME "WRITE_PARAMETER_18_AND_19"
#define SPARK_WRITE_PARAMETER_20_AND_21_NAME "WRITE_PARAMETER_20_AND_21"
#define SPARK_WRITE_PARAMETER_22_AND_23_NAME "WRITE_PARAMETER_22_AND_23"
#define SPARK_WRITE_PARAMETER_24_AND_25_NAME "WRITE_PARAMETER_24_AND_25"
#define SPARK_WRITE_PARAMETER_26_AND_27_NAME "WRITE_PARAMETER_26_AND_27"
#define SPARK_WRITE_PARAMETER_28_AND_29_NAME "WRITE_PARAMETER_28_AND_29"
#define SPARK_WRITE_PARAMETER_30_AND_31_NAME "WRITE_PARAMETER_30_AND_31"
#define SPARK_WRITE_PARAMETER_32_AND_33_NAME "WRITE_PARAMETER_32_AND_33"
#define SPARK_WRITE_PARAMETER_34_AND_35_NAME "WRITE_PARAMETER_34_AND_35"
#define SPARK_WRITE_PARAMETER_36_AND_37_NAME "WRITE_PARAMETER_36_AND_37"
#define SPARK_WRITE_PARAMETER_38_AND_39_NAME "WRITE_PARAMETER_38_AND_39"
#define SPARK_WRITE_PARAMETER_40_AND_41_NAME "WRITE_PARAMETER_40_AND_41"
#define SPARK_WRITE_PARAMETER_42_AND_43_NAME "WRITE_PARAMETER_42_AND_43"
#define SPARK_WRITE_PARAMETER_44_AND_45_NAME "WRITE_PARAMETER_44_AND_45"
#define SPARK_WRITE_PARAMETER_46_AND_47_NAME "WRITE_PARAMETER_46_AND_47"
#define SPARK_WRITE_PARAMETER_48_AND_49_NAME "WRITE_PARAMETER_48_AND_49"
#define SPARK_WRITE_PARAMETER_50_AND_51_NAME "WRITE_PARAMETER_50_AND_51"
#define SPARK_WRITE_PARAMETER_52_AND_53_NAME "WRITE_PARAMETER_52_AND_53"
#define SPARK_WRITE_PARAMETER_54_AND_55_NAME "WRITE_PARAMETER_54_AND_55"
#define SPARK_WRITE_PARAMETER_56_AND_57_NAME "WRITE_PARAMETER_56_AND_57"
#define SPARK_WRITE_PARAMETER_58_AND_59_NAME "WRITE_PARAMETER_58_AND_59"
#define SPARK_WRITE_PARAMETER_60_AND_61_NAME "WRITE_PARAMETER_60_AND_61"
#define SPARK_WRITE_PARAMETER_62_AND_63_NAME "WRITE_PARAMETER_62_AND_63"
#define SPARK_WRITE_PARAMETER_64_AND_65_NAME "WRITE_PARAMETER_64_AND_65"
#define SPARK_WRITE_PARAMETER_66_AND_67_NAME "WRITE_PARAMETER_66_AND_67"
#define SPARK_WRITE_PARAMETER_68_AND_69_NAME "WRITE_PARAMETER_68_AND_69"
#define SPARK_WRITE_PARAMETER_70_AND_71_NAME "WRITE_PARAMETER_70_AND_71"
#define SPARK_WRITE_PARAMETER_72_AND_73_NAME "WRITE_PARAMETER_72_AND_73"
#define SPARK_WRITE_PARAMETER_74_AND_75_NAME "WRITE_PARAMETER_74_AND_75"
#define SPARK_WRITE_PARAMETER_76_AND_77_NAME "WRITE_PARAMETER_76_AND_77"
#define SPARK_WRITE_PARAMETER_78_AND_79_NAME "WRITE_PARAMETER_78_AND_79"
#define SPARK_WRITE_PARAMETER_80_AND_81_NAME "WRITE_PARAMETER_80_AND_81"
#define SPARK_WRITE_PARAMETER_82_AND_83_NAME "WRITE_PARAMETER_82_AND_83"
#define SPARK_WRITE_PARAMETER_84_AND_85_NAME "WRITE_PARAMETER_84_AND_85"
#define SPARK_WRITE_PARAMETER_86_AND_87_NAME "WRITE_PARAMETER_86_AND_87"
#define SPARK_WRITE_PARAMETER_88_AND_89_NAME "WRITE_PARAMETER_88_AND_89"
#define SPARK_WRITE_PARAMETER_90_AND_91_NAME "WRITE_PARAMETER_90_AND_91"
#define SPARK_WRITE_PARAMETER_92_AND_93_NAME "WRITE_PARAMETER_92_AND_93"
#define SPARK_WRITE_PARAMETER_94_AND_95_NAME "WRITE_PARAMETER_94_AND_95"
#define SPARK_WRITE_PARAMETER_96_AND_97_NAME "WRITE_PARAMETER_96_AND_97"
#define SPARK_WRITE_PARAMETER_98_AND_99_NAME "WRITE_PARAMETER_98_AND_99"
#define SPARK_WRITE_PARAMETER_100_AND_101_NAME "WRITE_PARAMETER_100_AND_101"
#define SPARK_WRITE_PARAMETER_102_AND_103_NAME "WRITE_PARAMETER_102_AND_103"
#define SPARK_WRITE_PARAMETER_104_AND_105_NAME "WRITE_PARAMETER_104_AND_105"
#define SPARK_WRITE_PARAMETER_106_AND_107_NAME "WRITE_PARAMETER_106_AND_107"
#define SPARK_WRITE_PARAMETER_108_AND_109_NAME "WRITE_PARAMETER_108_AND_109"
#define SPARK_WRITE_PARAMETER_110_AND_111_NAME "WRITE_PARAMETER_110_AND_111"
#define SPARK_WRITE_PARAMETER_112_AND_113_NAME "WRITE_PARAMETER_112_AND_113"
#define SPARK_WRITE_PARAMETER_114_AND_115_NAME "WRITE_PARAMETER_114_AND_115"
#define SPARK_WRITE_PARAMETER_116_AND_117_NAME "WRITE_PARAMETER_116_AND_117"
#define SPARK_WRITE_PARAMETER_118_AND_119_NAME "WRITE_PARAMETER_118_AND_119"
#define SPARK_WRITE_PARAMETER_120_AND_121_NAME "WRITE_PARAMETER_120_AND_121"
#define SPARK_WRITE_PARAMETER_122_AND_123_NAME "WRITE_PARAMETER_122_AND_123"
#define SPARK_WRITE_PARAMETER_124_AND_125_NAME "WRITE_PARAMETER_124_AND_125"
#define SPARK_WRITE_PARAMETER_126_AND_127_NAME "WRITE_PARAMETER_126_AND_127"
#define SPARK_WRITE_PARAMETER_128_AND_129_NAME "WRITE_PARAMETER_128_AND_129"
#define SPARK_WRITE_PARAMETER_130_AND_131_NAME "WRITE_PARAMETER_130_AND_131"
#define SPARK_WRITE_PARAMETER_132_AND_133_NAME "WRITE_PARAMETER_132_AND_133"
#define SPARK_WRITE_PARAMETER_134_AND_135_NAME "WRITE_PARAMETER_134_AND_135"
#define SPARK_WRITE_PARAMETER_136_AND_137_NAME "WRITE_PARAMETER_136_AND_137"
#define SPARK_WRITE_PARAMETER_138_AND_139_NAME "WRITE_PARAMETER_138_AND_139"
#define SPARK_WRITE_PARAMETER_140_AND_141_NAME "WRITE_PARAMETER_140_AND_141"
#define SPARK_WRITE_PARAMETER_142_AND_143_NAME "WRITE_PARAMETER_142_AND_143"
#define SPARK_WRITE_PARAMETER_144_AND_145_NAME "WRITE_PARAMETER_144_AND_145"
#define SPARK_WRITE_PARAMETER_146_AND_147_NAME "WRITE_PARAMETER_146_AND_147"
#define SPARK_WRITE_PARAMETER_148_AND_149_NAME "WRITE_PARAMETER_148_AND_149"
#define SPARK_WRITE_PARAMETER_150_AND_151_NAME "WRITE_PARAMETER_150_AND_151"
#define SPARK_WRITE_PARAMETER_152_AND_153_NAME "WRITE_PARAMETER_152_AND_153"
#define SPARK_WRITE_PARAMETER_154_AND_155_NAME "WRITE_PARAMETER_154_AND_155"
#define SPARK_WRITE_PARAMETER_156_AND_157_NAME "WRITE_PARAMETER_156_AND_157"
#define SPARK_WRITE_PARAMETER_158_AND_159_NAME "WRITE_PARAMETER_158_AND_159"
#define SPARK_WRITE_PARAMETER_160_AND_161_NAME "WRITE_PARAMETER_160_AND_161"
#define SPARK_WRITE_PARAMETER_162_AND_163_NAME "WRITE_PARAMETER_162_AND_163"
#define SPARK_WRITE_PARAMETER_164_AND_165_NAME "WRITE_PARAMETER_164_AND_165"
#define SPARK_WRITE_PARAMETER_166_AND_167_NAME "WRITE_PARAMETER_166_AND_167"
#define SPARK_WRITE_PARAMETER_168_AND_169_NAME "WRITE_PARAMETER_168_AND_169"
#define SPARK_WRITE_PARAMETER_170_AND_171_NAME "WRITE_PARAMETER_170_AND_171"
#define SPARK_WRITE_PARAMETER_172_AND_173_NAME "WRITE_PARAMETER_172_AND_173"
#define SPARK_WRITE_PARAMETER_174_AND_175_NAME "WRITE_PARAMETER_174_AND_175"
#define SPARK_WRITE_PARAMETER_176_AND_177_NAME "WRITE_PARAMETER_176_AND_177"
#define SPARK_WRITE_PARAMETER_178_AND_179_NAME "WRITE_PARAMETER_178_AND_179"
#define SPARK_WRITE_PARAMETER_180_AND_181_NAME "WRITE_PARAMETER_180_AND_181"
#define SPARK_WRITE_PARAMETER_182_AND_183_NAME "WRITE_PARAMETER_182_AND_183"
#define SPARK_WRITE_PARAMETER_184_AND_185_NAME "WRITE_PARAMETER_184_AND_185"
#define SPARK_WRITE_PARAMETER_186_AND_187_NAME "WRITE_PARAMETER_186_AND_187"
#define SPARK_WRITE_PARAMETER_188_AND_189_NAME "WRITE_PARAMETER_188_AND_189"
#define SPARK_WRITE_PARAMETER_190_AND_191_NAME "WRITE_PARAMETER_190_AND_191"
#define SPARK_WRITE_PARAMETER_192_AND_193_NAME "WRITE_PARAMETER_192_AND_193"
#define SPARK_WRITE_PARAMETER_194_AND_195_NAME "WRITE_PARAMETER_194_AND_195"
#define SPARK_WRITE_PARAMETER_196_AND_197_NAME "WRITE_PARAMETER_196_AND_197"
#define SPARK_WRITE_PARAMETER_198_AND_199_NAME "WRITE_PARAMETER_198_AND_199"
#define SPARK_WRITE_PARAMETER_200_AND_201_NAME "WRITE_PARAMETER_200_AND_201"
#define SPARK_WRITE_PARAMETER_202_AND_203_NAME "WRITE_PARAMETER_202_AND_203"
#define SPARK_WRITE_PARAMETER_204_AND_205_NAME "WRITE_PARAMETER_204_AND_205"
#define SPARK_WRITE_PARAMETER_206_AND_207_NAME "WRITE_PARAMETER_206_AND_207"
#define SPARK_WRITE_PARAMETER_208_AND_209_NAME "WRITE_PARAMETER_208_AND_209"
#define SPARK_WRITE_PARAMETER_210_AND_211_NAME "WRITE_PARAMETER_210_AND_211"
#define SPARK_WRITE_PARAMETER_212_AND_213_NAME "WRITE_PARAMETER_212_AND_213"
#define SPARK_WRITE_PARAMETER_214_AND_215_NAME "WRITE_PARAMETER_214_AND_215"
#define SPARK_WRITE_PARAMETER_216_AND_217_NAME "WRITE_PARAMETER_216_AND_217"
#define SPARK_WRITE_PARAMETER_218_AND_219_NAME "WRITE_PARAMETER_218_AND_219"
#define SPARK_WRITE_PARAMETER_220_AND_221_NAME "WRITE_PARAMETER_220_AND_221"
#define SPARK_WRITE_PARAMETER_222_AND_223_NAME "WRITE_PARAMETER_222_AND_223"
#define SPARK_WRITE_PARAMETER_224_AND_225_NAME "WRITE_PARAMETER_224_AND_225"
#define SPARK_WRITE_PARAMETER_226_AND_227_NAME "WRITE_PARAMETER_226_AND_227"
#define SPARK_WRITE_PARAMETER_228_AND_229_NAME "WRITE_PARAMETER_228_AND_229"
#define SPARK_WRITE_PARAMETER_230_AND_231_NAME "WRITE_PARAMETER_230_AND_231"
#define SPARK_WRITE_PARAMETER_232_AND_233_NAME "WRITE_PARAMETER_232_AND_233"
#define SPARK_WRITE_PARAMETER_234_AND_235_NAME "WRITE_PARAMETER_234_AND_235"
#define SPARK_WRITE_PARAMETER_236_AND_237_NAME "WRITE_PARAMETER_236_AND_237"
#define SPARK_WRITE_PARAMETER_238_AND_239_NAME "WRITE_PARAMETER_238_AND_239"
#define SPARK_WRITE_PARAMETER_240_AND_241_NAME "WRITE_PARAMETER_240_AND_241"
#define SPARK_WRITE_PARAMETER_242_AND_243_NAME "WRITE_PARAMETER_242_AND_243"
#define SPARK_WRITE_PARAMETER_244_AND_245_NAME "WRITE_PARAMETER_244_AND_245"
#define SPARK_WRITE_PARAMETER_246_AND_247_NAME "WRITE_PARAMETER_246_AND_247"
#define SPARK_WRITE_PARAMETER_248_AND_249_NAME "WRITE_PARAMETER_248_AND_249"
#define SPARK_WRITE_PARAMETER_250_AND_251_NAME "WRITE_PARAMETER_250_AND_251"
#define SPARK_WRITE_PARAMETER_252_AND_253_NAME "WRITE_PARAMETER_252_AND_253"
#define SPARK_WRITE_PARAMETER_254_AND_255_NAME "WRITE_PARAMETER_254_AND_255"
#define SPARK_START_FOLLOWER_MODE_NAME "START_FOLLOWER_MODE"
#define SPARK_START_FOLLOWER_MODE_RESPONSE_NAME "START_FOLLOWER_MODE_RESPONSE"
#define SPARK_STOP_FOLLOWER_MODE_NAME "STOP_FOLLOWER_MODE"
#define SPARK_STOP_FOLLOWER_MODE_RESPONSE_NAME "STOP_FOLLOWER_MODE_RESPONSE"
#define SPARK_ENTER_SWDL_CAN_BOOTLOADER_NAME "ENTER_SWDL_CAN_BOOTLOADER"
#define SPARK_STATUS_0_NAME "STATUS_0"
#define SPARK_STATUS_1_NAME "STATUS_1"
#define SPARK_STATUS_2_NAME "STATUS_2"
#define SPARK_STATUS_3_NAME "STATUS_3"
#define SPARK_STATUS_4_NAME "STATUS_4"
#define SPARK_STATUS_5_NAME "STATUS_5"
#define SPARK_STATUS_6_NAME "STATUS_6"
#define SPARK_STATUS_7_NAME "STATUS_7"
#define SPARK_UNIQUE_ID_BROADCAST_NAME "UNIQUE_ID_BROADCAST"
#define SPARK_PERSIST_PARAMETERS_NAME "PERSIST_PARAMETERS"

/* Signal Names. */
#define SPARK_VELOCITY_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_VELOCITY_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_VELOCITY_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_DUTY_CYCLE_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_DUTY_CYCLE_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_DUTY_CYCLE_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_DUTY_CYCLE_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_DUTY_CYCLE_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_SMART_VELOCITY_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_SMART_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_SMART_VELOCITY_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_SMART_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_SMART_VELOCITY_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_POSITION_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_POSITION_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_POSITION_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_POSITION_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_POSITION_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_VOLTAGE_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_VOLTAGE_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_VOLTAGE_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_VOLTAGE_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_VOLTAGE_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_CURRENT_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_CURRENT_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_CURRENT_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_CURRENT_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_CURRENT_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_SMART_MOTION_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_SMART_MOTION_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_SMART_MOTION_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_SMART_MOTION_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_SMART_MOTION_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_MAXMOTION_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_MAXMOTION_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_MAXMOTION_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_MAXMOTION_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_MAXMOTION_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_SETPOINT_NAME "SETPOINT"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_NAME \
    "ARBITRARY_FEEDFORWARD"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_PID_SLOT_NAME "PID_SLOT"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_ARBITRARY_FEEDFORWARD_UNITS_NAME \
    "ARBITRARY_FEEDFORWARD_UNITS"
#define SPARK_MAXMOTION_VELOCITY_SETPOINT_RESERVED_NAME "RESERVED"
#define SPARK_SET_STATUSES_ENABLED_MASK_NAME "MASK"
#define SPARK_SET_STATUSES_ENABLED_ENABLED_BITFIELD_NAME "ENABLED_BITFIELD"
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_RESULT_CODE_NAME "RESULT_CODE"
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_SPECIFIED_MASK_NAME "SPECIFIED_MASK"
#define SPARK_SET_STATUSES_ENABLED_RESPONSE_ENABLED_BITFIELD_NAME \
    "ENABLED_BITFIELD"
#define SPARK_PERSIST_PARAMETERS_RESPONSE_RESULT_CODE_NAME "RESULT_CODE"
#define SPARK_RESET_SAFE_PARAMETERS_MAGIC_NUMBER_NAME "MAGIC_NUMBER"
#define SPARK_RESET_SAFE_PARAMETERS_RESPONSE_RESULT_CODE_NAME "RESULT_CODE"
#define SPARK_COMPLETE_FACTORY_RESET_MAGIC_NUMBER_NAME "MAGIC_NUMBER"
#define SPARK_COMPLETE_FACTORY_RESET_RESPONSE_RESULT_CODE_NAME "RESULT_CODE"
#define SPARK_LEGACY_STATUS_0_APPLIED_OUTPUT_NAME "APPLIED_OUTPUT"
#define SPARK_LEGACY_STATUS_0_FAULTS_AND_STICKY_FAULTS_NAME \
    "FAULTS_AND_STICKY_FAULTS"
#define SPARK_LEGACY_STATUS_0_OTHER_SIGNALS_NAME "OTHER_SIGNALS"
#define SPARK_IDENTIFY_UNIQUE_SPARK_UNIQUE_ID_NAME "UNIQUE_ID"
#define SPARK_SET_CAN_ID_UNIQUE_ID_NAME "UNIQUE_ID"
#define SPARK_SET_CAN_ID_CAN_ID_NAME "CAN_ID"
#define SPARK_GET_FIRMWARE_VERSION_MAJOR_NAME "MAJOR"
#define SPARK_GET_FIRMWARE_VERSION_MINOR_NAME "MINOR"
#define SPARK_GET_FIRMWARE_VERSION_BUILD_NAME "BUILD"
#define SPARK_GET_FIRMWARE_VERSION_DEBUG_BUILD_NAME "DEBUG_BUILD"
#define SPARK_GET_FIRMWARE_VERSION_HW_REV_NAME "HW_REV"
#define SPARK_GET_FIRMWARE_VERSION_RESERVED_NAME "RESERVED"
#define SPARK_SWDL_DATA_DATA_NAME "DATA"
#define SPARK_SWDL_CHECKSUM_CHECKSUM_NAME "CHECKSUM"
#define SPARK_SET_PRIMARY_ENCODER_POSITION_POSITION_NAME "POSITION"
#define SPARK_SET_PRIMARY_ENCODER_POSITION_DATA_TYPE_NAME "DATA_TYPE"
#define SPARK_SET_I_ACCUMULATION_I_ACCUMULATION_NAME "I_ACCUMULATION"
#define SPARK_SET_I_ACCUMULATION_DATA_TYPE_NAME "DATA_TYPE"
#define SPARK_SET_ANALOG_POSITION_POSITION_NAME "POSITION"
#define SPARK_SET_ANALOG_POSITION_DATA_TYPE_NAME "DATA_TYPE"
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_POSITION_NAME "POSITION"
#define SPARK_SET_EXT_OR_ALT_ENCODER_POSITION_DATA_TYPE_NAME "DATA_TYPE"
#define SPARK_SET_DUTY_CYCLE_POSITION_POSITION_NAME "POSITION"
#define SPARK_SET_DUTY_CYCLE_POSITION_DATA_TYPE_NAME "DATA_TYPE"
#define SPARK_SECONDARY_HEARTBEAT_ENABLED_SPARKS_BITFIELD_NAME \
    "ENABLED_SPARKS_BITFIELD"
#define SPARK_USB_ONLY_ENTER_DFU_BOOTLOADER_MAGIC_NUMBER_NAME "MAGIC_NUMBER"
#define SPARK_GET_TEMPERATURES_MOTOR_TEMPERATURE_NAME "MOTOR_TEMPERATURE"
#define SPARK_GET_TEMPERATURES_MICROCONTROLLER_TEMPERATURE_NAME \
    "MICROCONTROLLER_TEMPERATURE"
#define SPARK_GET_TEMPERATURES_FET_TEMPERATURE_NAME "FET_TEMPERATURE"
#define SPARK_GET_TEMPERATURES_MOTOR_TEMPERATURE_2_NAME "MOTOR_TEMPERATURE_2"
#define SPARK_GET_TEMPERATURES_DOCK_TEMPERATURE_NAME "DOCK_TEMPERATURE"
#define SPARK_GET_TEMPERATURES_RESERVED_1_NAME "RESERVED_1"
#define SPARK_GET_TEMPERATURES_RESERVED_2_NAME "RESERVED_2"
#define SPARK_GET_TEMPERATURES_VALID_TEMPERATURES_BITMASK_NAME \
    "VALID_TEMPERATURES_BITMASK"
#define SPARK_GET_TEMPERATURES_UNUSED_NAME "UNUSED"
#define SPARK_GET_MOTOR_INTERFACE_MOTOR_INTERFACE_NAME "MOTOR_INTERFACE"
#define SPARK_GET_MOTOR_INTERFACE_PRIMARY_SENSOR_TYPE_NAME "PRIMARY_SENSOR_TYPE"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_0_TO_15_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_16_TO_31_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_32_TO_47_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_48_TO_63_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_64_TO_79_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_80_TO_95_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_96_TO_111_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_112_TO_127_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_128_TO_143_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_144_TO_159_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_160_TO_175_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_176_TO_191_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_192_TO_207_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_208_TO_223_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_224_TO_239_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_0_NAME "TYPE_0"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_1_NAME "TYPE_1"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_2_NAME "TYPE_2"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_3_NAME "TYPE_3"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_4_NAME "TYPE_4"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_5_NAME "TYPE_5"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_6_NAME "TYPE_6"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_7_NAME "TYPE_7"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_8_NAME "TYPE_8"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_9_NAME "TYPE_9"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_10_NAME "TYPE_10"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_11_NAME "TYPE_11"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_12_NAME "TYPE_12"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_13_NAME "TYPE_13"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_14_NAME "TYPE_14"
#define SPARK_GET_PARAMETER_240_TO_255_TYPES_TYPE_15_NAME "TYPE_15"
#define SPARK_PARAMETER_WRITE_PARAMETER_ID_NAME "PARAMETER_ID"
#define SPARK_PARAMETER_WRITE_VALUE_NAME "VALUE"
#define SPARK_PARAMETER_WRITE_RESPONSE_PARAMETER_ID_NAME "PARAMETER_ID"
#define SPARK_PARAMETER_WRITE_RESPONSE_PARAMETER_TYPE_NAME "PARAMETER_TYPE"
#define SPARK_PARAMETER_WRITE_RESPONSE_VALUE_NAME "VALUE"
#define SPARK_PARAMETER_WRITE_RESPONSE_RESULT_CODE_NAME "RESULT_CODE"
#define SPARK_PARAMETERS_0_TO_64_CHANGED_CHANGED_PARAMETERS_BITFIELD_NAME \
    "CHANGED_PARAMETERS_BITFIELD"
#define SPARK_PARAMETERS_64_TO_128_CHANGED_CHANGED_PARAMETERS_BITFIELD_NAME \
    "CHANGED_PARAMETERS_BITFIELD"
#define SPARK_PARAMETERS_128_TO_192_CHANGED_CHANGED_PARAMETERS_BITFIELD_NAME \
    "CHANGED_PARAMETERS_BITFIELD"
#define SPARK_PARAMETERS_192_TO_256_CHANGED_CHANGED_PARAMETERS_BITFIELD_NAME \
    "CHANGED_PARAMETERS_BITFIELD"
#define SPARK_GET_PARAMETER_RANGE_PARAMETER_ID_NAME "PARAMETER_ID"
#define SPARK_GET_PARAMETER_RANGE_GET_MIN_VALUE_NAME "GET_MIN_VALUE"
#define SPARK_GET_PARAMETER_RANGE_RESERVED_NAME "RESERVED"
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_PARAMETER_ID_NAME "PARAMETER_ID"
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_IS_MIN_VALUE_NAME "IS_MIN_VALUE"
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_VALUE_NAME "VALUE"
#define SPARK_GET_PARAMETER_RANGE_RESPONSE_RESERVED_NAME "RESERVED"
#define SPARK_READ_PARAMETER_0_AND_1_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_0_AND_1_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_2_AND_3_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_2_AND_3_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_4_AND_5_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_4_AND_5_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_6_AND_7_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_6_AND_7_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_8_AND_9_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_8_AND_9_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_10_AND_11_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_10_AND_11_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_12_AND_13_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_12_AND_13_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_14_AND_15_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_14_AND_15_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_16_AND_17_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_16_AND_17_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_18_AND_19_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_18_AND_19_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_20_AND_21_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_20_AND_21_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_22_AND_23_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_22_AND_23_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_24_AND_25_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_24_AND_25_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_26_AND_27_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_26_AND_27_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_28_AND_29_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_28_AND_29_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_30_AND_31_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_30_AND_31_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_32_AND_33_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_32_AND_33_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_34_AND_35_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_34_AND_35_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_36_AND_37_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_36_AND_37_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_38_AND_39_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_38_AND_39_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_40_AND_41_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_40_AND_41_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_42_AND_43_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_42_AND_43_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_44_AND_45_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_44_AND_45_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_46_AND_47_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_46_AND_47_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_48_AND_49_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_48_AND_49_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_50_AND_51_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_50_AND_51_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_52_AND_53_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_52_AND_53_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_54_AND_55_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_54_AND_55_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_56_AND_57_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_56_AND_57_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_58_AND_59_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_58_AND_59_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_60_AND_61_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_60_AND_61_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_62_AND_63_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_62_AND_63_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_64_AND_65_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_64_AND_65_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_66_AND_67_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_66_AND_67_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_68_AND_69_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_68_AND_69_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_70_AND_71_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_70_AND_71_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_72_AND_73_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_72_AND_73_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_74_AND_75_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_74_AND_75_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_76_AND_77_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_76_AND_77_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_78_AND_79_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_78_AND_79_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_80_AND_81_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_80_AND_81_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_82_AND_83_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_82_AND_83_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_84_AND_85_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_84_AND_85_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_86_AND_87_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_86_AND_87_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_88_AND_89_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_88_AND_89_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_90_AND_91_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_90_AND_91_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_92_AND_93_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_92_AND_93_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_94_AND_95_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_94_AND_95_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_96_AND_97_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_96_AND_97_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_98_AND_99_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_98_AND_99_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_100_AND_101_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_100_AND_101_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_102_AND_103_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_102_AND_103_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_104_AND_105_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_104_AND_105_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_106_AND_107_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_106_AND_107_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_108_AND_109_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_108_AND_109_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_110_AND_111_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_110_AND_111_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_112_AND_113_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_112_AND_113_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_114_AND_115_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_114_AND_115_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_116_AND_117_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_116_AND_117_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_118_AND_119_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_118_AND_119_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_120_AND_121_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_120_AND_121_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_122_AND_123_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_122_AND_123_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_124_AND_125_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_124_AND_125_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_126_AND_127_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_126_AND_127_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_128_AND_129_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_128_AND_129_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_130_AND_131_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_130_AND_131_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_132_AND_133_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_132_AND_133_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_134_AND_135_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_134_AND_135_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_136_AND_137_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_136_AND_137_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_138_AND_139_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_138_AND_139_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_140_AND_141_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_140_AND_141_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_142_AND_143_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_142_AND_143_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_144_AND_145_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_144_AND_145_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_146_AND_147_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_146_AND_147_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_148_AND_149_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_148_AND_149_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_150_AND_151_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_150_AND_151_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_152_AND_153_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_152_AND_153_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_154_AND_155_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_154_AND_155_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_156_AND_157_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_156_AND_157_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_158_AND_159_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_158_AND_159_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_160_AND_161_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_160_AND_161_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_162_AND_163_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_162_AND_163_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_164_AND_165_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_164_AND_165_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_166_AND_167_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_166_AND_167_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_168_AND_169_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_168_AND_169_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_170_AND_171_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_170_AND_171_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_172_AND_173_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_172_AND_173_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_174_AND_175_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_174_AND_175_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_176_AND_177_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_176_AND_177_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_178_AND_179_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_178_AND_179_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_180_AND_181_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_180_AND_181_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_182_AND_183_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_182_AND_183_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_184_AND_185_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_184_AND_185_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_186_AND_187_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_186_AND_187_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_188_AND_189_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_188_AND_189_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_190_AND_191_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_190_AND_191_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_192_AND_193_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_192_AND_193_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_194_AND_195_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_194_AND_195_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_196_AND_197_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_196_AND_197_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_198_AND_199_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_198_AND_199_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_200_AND_201_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_200_AND_201_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_202_AND_203_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_202_AND_203_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_204_AND_205_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_204_AND_205_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_206_AND_207_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_206_AND_207_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_208_AND_209_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_208_AND_209_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_210_AND_211_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_210_AND_211_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_212_AND_213_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_212_AND_213_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_214_AND_215_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_214_AND_215_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_216_AND_217_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_216_AND_217_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_218_AND_219_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_218_AND_219_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_220_AND_221_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_220_AND_221_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_222_AND_223_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_222_AND_223_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_224_AND_225_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_224_AND_225_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_226_AND_227_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_226_AND_227_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_228_AND_229_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_228_AND_229_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_230_AND_231_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_230_AND_231_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_232_AND_233_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_232_AND_233_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_234_AND_235_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_234_AND_235_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_236_AND_237_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_236_AND_237_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_238_AND_239_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_238_AND_239_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_240_AND_241_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_240_AND_241_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_242_AND_243_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_242_AND_243_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_244_AND_245_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_244_AND_245_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_246_AND_247_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_246_AND_247_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_248_AND_249_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_248_AND_249_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_250_AND_251_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_250_AND_251_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_252_AND_253_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_252_AND_253_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_254_AND_255_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_READ_PARAMETER_254_AND_255_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_0_AND_1_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_0_AND_1_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_2_AND_3_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_2_AND_3_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_4_AND_5_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_4_AND_5_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_6_AND_7_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_6_AND_7_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_8_AND_9_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_8_AND_9_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_10_AND_11_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_10_AND_11_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_12_AND_13_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_12_AND_13_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_14_AND_15_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_14_AND_15_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_16_AND_17_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_16_AND_17_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_18_AND_19_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_18_AND_19_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_20_AND_21_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_20_AND_21_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_22_AND_23_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_22_AND_23_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_24_AND_25_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_24_AND_25_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_26_AND_27_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_26_AND_27_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_28_AND_29_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_28_AND_29_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_30_AND_31_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_30_AND_31_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_32_AND_33_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_32_AND_33_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_34_AND_35_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_34_AND_35_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_36_AND_37_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_36_AND_37_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_38_AND_39_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_38_AND_39_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_40_AND_41_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_40_AND_41_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_42_AND_43_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_42_AND_43_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_44_AND_45_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_44_AND_45_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_46_AND_47_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_46_AND_47_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_48_AND_49_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_48_AND_49_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_50_AND_51_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_50_AND_51_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_52_AND_53_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_52_AND_53_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_54_AND_55_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_54_AND_55_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_56_AND_57_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_56_AND_57_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_58_AND_59_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_58_AND_59_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_60_AND_61_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_60_AND_61_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_62_AND_63_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_62_AND_63_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_64_AND_65_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_64_AND_65_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_66_AND_67_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_66_AND_67_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_68_AND_69_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_68_AND_69_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_70_AND_71_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_70_AND_71_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_72_AND_73_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_72_AND_73_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_74_AND_75_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_74_AND_75_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_76_AND_77_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_76_AND_77_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_78_AND_79_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_78_AND_79_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_80_AND_81_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_80_AND_81_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_82_AND_83_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_82_AND_83_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_84_AND_85_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_84_AND_85_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_86_AND_87_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_86_AND_87_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_88_AND_89_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_88_AND_89_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_90_AND_91_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_90_AND_91_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_92_AND_93_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_92_AND_93_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_94_AND_95_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_94_AND_95_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_96_AND_97_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_96_AND_97_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_98_AND_99_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_98_AND_99_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_100_AND_101_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_100_AND_101_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_102_AND_103_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_102_AND_103_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_104_AND_105_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_104_AND_105_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_106_AND_107_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_106_AND_107_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_108_AND_109_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_108_AND_109_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_110_AND_111_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_110_AND_111_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_112_AND_113_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_112_AND_113_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_114_AND_115_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_114_AND_115_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_116_AND_117_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_116_AND_117_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_118_AND_119_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_118_AND_119_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_120_AND_121_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_120_AND_121_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_122_AND_123_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_122_AND_123_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_124_AND_125_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_124_AND_125_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_126_AND_127_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_126_AND_127_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_128_AND_129_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_128_AND_129_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_130_AND_131_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_130_AND_131_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_132_AND_133_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_132_AND_133_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_134_AND_135_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_134_AND_135_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_136_AND_137_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_136_AND_137_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_138_AND_139_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_138_AND_139_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_140_AND_141_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_140_AND_141_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_142_AND_143_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_142_AND_143_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_144_AND_145_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_144_AND_145_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_146_AND_147_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_146_AND_147_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_148_AND_149_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_148_AND_149_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_150_AND_151_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_150_AND_151_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_152_AND_153_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_152_AND_153_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_154_AND_155_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_154_AND_155_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_156_AND_157_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_156_AND_157_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_158_AND_159_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_158_AND_159_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_160_AND_161_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_160_AND_161_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_162_AND_163_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_162_AND_163_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_164_AND_165_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_164_AND_165_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_166_AND_167_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_166_AND_167_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_168_AND_169_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_168_AND_169_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_170_AND_171_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_170_AND_171_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_172_AND_173_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_172_AND_173_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_174_AND_175_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_174_AND_175_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_176_AND_177_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_176_AND_177_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_178_AND_179_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_178_AND_179_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_180_AND_181_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_180_AND_181_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_182_AND_183_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_182_AND_183_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_184_AND_185_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_184_AND_185_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_186_AND_187_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_186_AND_187_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_188_AND_189_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_188_AND_189_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_190_AND_191_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_190_AND_191_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_192_AND_193_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_192_AND_193_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_194_AND_195_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_194_AND_195_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_196_AND_197_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_196_AND_197_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_198_AND_199_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_198_AND_199_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_200_AND_201_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_200_AND_201_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_202_AND_203_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_202_AND_203_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_204_AND_205_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_204_AND_205_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_206_AND_207_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_206_AND_207_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_208_AND_209_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_208_AND_209_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_210_AND_211_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_210_AND_211_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_212_AND_213_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_212_AND_213_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_214_AND_215_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_214_AND_215_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_216_AND_217_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_216_AND_217_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_218_AND_219_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_218_AND_219_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_220_AND_221_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_220_AND_221_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_222_AND_223_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_222_AND_223_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_224_AND_225_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_224_AND_225_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_226_AND_227_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_226_AND_227_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_228_AND_229_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_228_AND_229_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_230_AND_231_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_230_AND_231_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_232_AND_233_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_232_AND_233_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_234_AND_235_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_234_AND_235_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_236_AND_237_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_236_AND_237_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_238_AND_239_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_238_AND_239_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_240_AND_241_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_240_AND_241_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_242_AND_243_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_242_AND_243_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_244_AND_245_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_244_AND_245_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_246_AND_247_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_246_AND_247_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_248_AND_249_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_248_AND_249_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_250_AND_251_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_250_AND_251_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_252_AND_253_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_252_AND_253_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_254_AND_255_FIRST_PARAMETER_VALUE_NAME \
    "FIRST_PARAMETER_VALUE"
#define SPARK_WRITE_PARAMETER_254_AND_255_SECOND_PARAMETER_VALUE_NAME \
    "SECOND_PARAMETER_VALUE"
#define SPARK_START_FOLLOWER_MODE_RESPONSE_STATUS_NAME "STATUS"
#define SPARK_STATUS_0_APPLIED_OUTPUT_NAME "APPLIED_OUTPUT"
#define SPARK_STATUS_0_VOLTAGE_NAME "VOLTAGE"
#define SPARK_STATUS_0_CURRENT_NAME "CURRENT"
#define SPARK_STATUS_0_MOTOR_TEMPERATURE_NAME "MOTOR_TEMPERATURE"
#define SPARK_STATUS_0_HARD_FORWARD_LIMIT_REACHED_NAME \
    "HARD_FORWARD_LIMIT_REACHED"
#define SPARK_STATUS_0_HARD_REVERSE_LIMIT_REACHED_NAME \
    "HARD_REVERSE_LIMIT_REACHED"
#define SPARK_STATUS_0_SOFT_FORWARD_LIMIT_REACHED_NAME \
    "SOFT_FORWARD_LIMIT_REACHED"
#define SPARK_STATUS_0_SOFT_REVERSE_LIMIT_REACHED_NAME \
    "SOFT_REVERSE_LIMIT_REACHED"
#define SPARK_STATUS_0_INVERTED_NAME "INVERTED"
#define SPARK_STATUS_0_PRIMARY_HEARTBEAT_LOCK_NAME "PRIMARY_HEARTBEAT_LOCK"
#define SPARK_STATUS_0_RESERVED_NAME "RESERVED"
#define SPARK_STATUS_1_OTHER_FAULT_NAME "OTHER_FAULT"
#define SPARK_STATUS_1_MOTOR_TYPE_FAULT_NAME "MOTOR_TYPE_FAULT"
#define SPARK_STATUS_1_SENSOR_FAULT_NAME "SENSOR_FAULT"
#define SPARK_STATUS_1_CAN_FAULT_NAME "CAN_FAULT"
#define SPARK_STATUS_1_TEMPERATURE_FAULT_NAME "TEMPERATURE_FAULT"
#define SPARK_STATUS_1_DRV_FAULT_NAME "DRV_FAULT"
#define SPARK_STATUS_1_ESC_EEPROM_FAULT_NAME "ESC_EEPROM_FAULT"
#define SPARK_STATUS_1_FIRMWARE_FAULT_NAME "FIRMWARE_FAULT"
#define SPARK_STATUS_1_RESERVED_ACTIVES_NAME "RESERVED_ACTIVES"
#define SPARK_STATUS_1_BROWNOUT_WARNING_NAME "BROWNOUT_WARNING"
#define SPARK_STATUS_1_OVERCURRENT_WARNING_NAME "OVERCURRENT_WARNING"
#define SPARK_STATUS_1_ESC_EEPROM_WARNING_NAME "ESC_EEPROM_WARNING"
#define SPARK_STATUS_1_EXT_EEPROM_WARNING_NAME "EXT_EEPROM_WARNING"
#define SPARK_STATUS_1_SENSOR_WARNING_NAME "SENSOR_WARNING"
#define SPARK_STATUS_1_STALL_WARNING_NAME "STALL_WARNING"
#define SPARK_STATUS_1_HAS_RESET_WARNING_NAME "HAS_RESET_WARNING"
#define SPARK_STATUS_1_OTHER_WARNING_NAME "OTHER_WARNING"
#define SPARK_STATUS_1_OTHER_STICKY_FAULT_NAME "OTHER_STICKY_FAULT"
#define SPARK_STATUS_1_MOTOR_TYPE_STICKY_FAULT_NAME "MOTOR_TYPE_STICKY_FAULT"
#define SPARK_STATUS_1_SENSOR_STICKY_FAULT_NAME "SENSOR_STICKY_FAULT"
#define SPARK_STATUS_1_CAN_STICKY_FAULT_NAME "CAN_STICKY_FAULT"
#define SPARK_STATUS_1_TEMPERATURE_STICKY_FAULT_NAME "TEMPERATURE_STICKY_FAULT"
#define SPARK_STATUS_1_DRV_STICKY_FAULT_NAME "DRV_STICKY_FAULT"
#define SPARK_STATUS_1_ESC_EEPROM_STICKY_FAULT_NAME "ESC_EEPROM_STICKY_FAULT"
#define SPARK_STATUS_1_FIRMWARE_STICKY_FAULT_NAME "FIRMWARE_STICKY_FAULT"
#define SPARK_STATUS_1_RESERVED_STICKIES_NAME "RESERVED_STICKIES"
#define SPARK_STATUS_1_BROWNOUT_STICKY_WARNING_NAME "BROWNOUT_STICKY_WARNING"
#define SPARK_STATUS_1_OVERCURRENT_STICKY_WARNING_NAME \
    "OVERCURRENT_STICKY_WARNING"
#define SPARK_STATUS_1_ESC_EEPROM_STICKY_WARNING_NAME \
    "ESC_EEPROM_STICKY_WARNING"
#define SPARK_STATUS_1_EXT_EEPROM_STICKY_WARNING_NAME \
    "EXT_EEPROM_STICKY_WARNING"
#define SPARK_STATUS_1_SENSOR_STICKY_WARNING_NAME "SENSOR_STICKY_WARNING"
#define SPARK_STATUS_1_STALL_STICKY_WARNING_NAME "STALL_STICKY_WARNING"
#define SPARK_STATUS_1_HAS_RESET_STICKY_WARNING_NAME "HAS_RESET_STICKY_WARNING"
#define SPARK_STATUS_1_OTHER_STICKY_WARNING_NAME "OTHER_STICKY_WARNING"
#define SPARK_STATUS_1_IS_FOLLOWER_NAME "IS_FOLLOWER"
#define SPARK_STATUS_1_RESERVED_NAME "RESERVED"
#define SPARK_STATUS_2_PRIMARY_ENCODER_VELOCITY_NAME "PRIMARY_ENCODER_VELOCITY"
#define SPARK_STATUS_2_PRIMARY_ENCODER_POSITION_NAME "PRIMARY_ENCODER_POSITION"
#define SPARK_STATUS_3_ANALOG_VOLTAGE_NAME "ANALOG_VOLTAGE"
#define SPARK_STATUS_3_ANALOG_VELOCITY_NAME "ANALOG_VELOCITY"
#define SPARK_STATUS_3_ANALOG_POSITION_NAME "ANALOG_POSITION"
#define SPARK_STATUS_4_EXTERNAL_OR_ALT_ENCODER_VELOCITY_NAME \
    "EXTERNAL_OR_ALT_ENCODER_VELOCITY"
#define SPARK_STATUS_4_EXTERNAL_OR_ALT_ENCODER_POSITION_NAME \
    "EXTERNAL_OR_ALT_ENCODER_POSITION"
#define SPARK_STATUS_5_DUTY_CYCLE_ENCODER_VELOCITY_NAME \
    "DUTY_CYCLE_ENCODER_VELOCITY"
#define SPARK_STATUS_5_DUTY_CYCLE_ENCODER_POSITION_NAME \
    "DUTY_CYCLE_ENCODER_POSITION"
#define SPARK_STATUS_6_UNADJUSTED_DUTY_CYCLE_NAME "UNADJUSTED_DUTY_CYCLE"
#define SPARK_STATUS_6_DUTY_CYCLE_PERIOD_NAME "DUTY_CYCLE_PERIOD"
#define SPARK_STATUS_6_DUTY_CYCLE_NO_SIGNAL_NAME "DUTY_CYCLE_NO_SIGNAL"
#define SPARK_STATUS_6_DUTY_CYCLE_RESERVED_NAME "DUTY_CYCLE_RESERVED"
#define SPARK_STATUS_7_I_ACCUMULATION_NAME "I_ACCUMULATION"
#define SPARK_STATUS_7_RESERVED_NAME "RESERVED"
#define SPARK_UNIQUE_ID_BROADCAST_UNIQUE_ID_NAME "UNIQUE_ID"
#define SPARK_PERSIST_PARAMETERS_MAGIC_NUMBER_NAME "MAGIC_NUMBER"

/**
 * Signals in message VELOCITY_SETPOINT.
 *
 * Sets the Control Type to Velocity and sets the target velocity
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -1.0..1.0 (-1..1 -)
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_velocity_setpoint_t;

/**
 * Signals in message DUTY_CYCLE_SETPOINT.
 *
 * Sets the Control Type to Duty Cycle and sets the target duty cycle (from -1
 * to 1)
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_duty_cycle_setpoint_t;

/**
 * Signals in message SMART_VELOCITY_SETPOINT.
 *
 * Sets the Control Type to Smart Velocity and sets the target velocity
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_smart_velocity_setpoint_t;

/**
 * Signals in message POSITION_SETPOINT.
 *
 * Sets the Control Type to Position and sets the target position
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_position_setpoint_t;

/**
 * Signals in message VOLTAGE_SETPOINT.
 *
 * Sets the Control Type to Voltage and sets the target voltage
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_voltage_setpoint_t;

/**
 * Signals in message CURRENT_SETPOINT.
 *
 * Sets the Control Type to Current and sets the target current
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_current_setpoint_t;

/**
 * Signals in message SMART_MOTION_SETPOINT.
 *
 * Sets the Control Type to Smart Motion and sets the target position
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_smart_motion_setpoint_t;

/**
 * Signals in message MAXMOTION_SETPOINT.
 *
 * Sets the Control Type to MAXMotion and sets the target position
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_maxmotion_setpoint_t;

/**
 * Signals in message MAXMOTION_VELOCITY_SETPOINT.
 *
 * Sets the Control Type to MAXMotion Velocity and sets the target velocity
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float setpoint;

    /**
     * Range: -
     * Scale: 0.0009765923
     * Offset: 0
     */
    int16_t arbitrary_feedforward;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pid_slot;

    /**
     * 0: Voltage, 1: Duty Cycle (-1 to 1)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t arbitrary_feedforward_units;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_maxmotion_velocity_setpoint_t;

/**
 * Signals in message SET_STATUSES_ENABLED.
 *
 * Enable or disable status frames. In response, a Set Statuses Enabled Response
 * frame will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t mask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t enabled_bitfield;
} spark_set_statuses_enabled_t;

/**
 * Signals in message SET_STATUSES_ENABLED_RESPONSE.
 *
 * Response for a Set Statuses Enabled command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0 on success, 1 if any non-existent or unavailable frames were specified
     * to be enabled
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_code;

    /**
     * Contains the mask specified in the Set Statuses Enabled command that
     * triggered this response
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t specified_mask;

    /**
     * Contains the full bitfield specifying which status frames are currently
     * enabled, without any masking
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t enabled_bitfield;
} spark_set_statuses_enabled_response_t;

/**
 * Signals in message PERSIST_PARAMETERS_RESPONSE.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0 on success
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_code;
} spark_persist_parameters_response_t;

/**
 * Signals in message RESET_SAFE_PARAMETERS.
 *
 * Resets most parameters to default values, except CAN ID, Motor Type, Idle
 * Mode, PWM Input Deadband, and Duty Cycle Offset. In response, a Reset Safe
 * Parameters Response frame is sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 36292..36292 (36292..36292 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic_number;
} spark_reset_safe_parameters_t;

/**
 * Signals in message RESET_SAFE_PARAMETERS_RESPONSE.
 *
 * Response for a Reset Safe Parameters command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0 on success
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_code;
} spark_reset_safe_parameters_response_t;

/**
 * Signals in message COMPLETE_FACTORY_RESET.
 *
 * Resets all parameters to default values, even CAN ID, Motor Type, Idle Mode,
 * PWM Input Deadband, and Duty Cycle Offset. In response, a Complete Factory
 * Reset Response frame is sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 29741..29741 (29741..29741 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic_number;
} spark_complete_factory_reset_t;

/**
 * Signals in message COMPLETE_FACTORY_RESET_RESPONSE.
 *
 * Response for a Complete Factory Reset command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0 on success
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_code;
} spark_complete_factory_reset_response_t;

/**
 * Signals in message LEGACY_STATUS_0.
 *
 * This frame exists purely to inform old software that is not aware of firmware
 * version 25+ that the SPARK is present
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Always 0 so that SPARKs running old firmware trying to follow this SPARK
     * don't move
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t applied_output;

    /**
     * Always has all faults set so that old software knows that something is
     * wrong
     *
     * Range: 4294967295..4294967295 (4294967295..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t faults_and_sticky_faults;

    /**
     * The other signals don't matter very much, and all get set to 0
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t other_signals;
} spark_legacy_status_0_t;

/**
 * Signals in message CLEAR_FAULTS.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_clear_faults_t;

/**
 * Signals in message IDENTIFY_UNIQUE_SPARK.
 *
 * Makes the specified, single SPARK (even if there are multiple SPARKs that
 * have the same CAN ID) temporarily perform a special blink pattern that will
 * make it stand out
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t unique_id;
} spark_identify_unique_spark_t;

/**
 * Signals in message IDENTIFY.
 *
 * Makes the SPARK temporarily perform a special blink pattern that will make it
 * stand out. Use Identify Unique Device if there may be multiple SPARKs with
 * the same CAN ID.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_identify_t;

/**
 * Signals in message NACK.
 *
 * As of SPARK MAX firmware 1.6.3, this is only used as a potential response to
 * setting the CAN ID
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_nack_t;

/**
 * Signals in message ACK.
 *
 * As of SPARK MAX firmware 1.6.3, this is only used as a potential response to
 * setting the CAN ID
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_ack_t;

/**
 * Signals in message LED_SYNC.
 *
 * Causes all SPARKs on the bus to synchronize their LED patterns
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_led_sync_t;

/**
 * Signals in message SET_CAN_ID.
 *
 * Allows changing the CAN ID when multiple devices on the bus currently have
 * the same CAN ID. Under normal circumstances, the CAN ID parameter can be
 * used.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t unique_id;

    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_id;
} spark_set_can_id_t;

/**
 * Signals in message GET_FIRMWARE_VERSION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t major;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t minor;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t build;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t debug_build;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hw_rev;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_get_firmware_version_t;

/**
 * Signals in message SWDL_DATA.
 *
 * Broadcast from the host to all SPARKs in SWDL mode, containing a slice of
 * firmware data
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t data;
} spark_swdl_data_t;

/**
 * Signals in message SWDL_CHECKSUM.
 *
 * Broadcast from the host to all SPARKs in SWDL mode, containing the checksum
 * of the full firmware image that was just sent
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t checksum;
} spark_swdl_checksum_t;

/**
 * Signals in message SWDL_RETRANSMIT.
 *
 * Sent by SPARK devices in response to receiving an SWDL Checksum frame that
 * does not match the firmware data they received
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_swdl_retransmit_t;

/**
 * Signals in message SET_PRIMARY_ENCODER_POSITION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float position;

    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_type;
} spark_set_primary_encoder_position_t;

/**
 * Signals in message SET_I_ACCUMULATION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float i_accumulation;

    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_type;
} spark_set_i_accumulation_t;

/**
 * Signals in message SET_ANALOG_POSITION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Analog Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float position;

    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_type;
} spark_set_analog_position_t;

/**
 * Signals in message SET_EXT_OR_ALT_ENCODER_POSITION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the External/Alternate Encoder Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float position;

    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_type;
} spark_set_ext_or_alt_encoder_position_t;

/**
 * Signals in message SET_DUTY_CYCLE_POSITION.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Duty Cycle Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float position;

    /**
     * Range: 2..2 (2..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t data_type;
} spark_set_duty_cycle_position_t;

/**
 * Signals in message SECONDARY_HEARTBEAT.
 *
 * Heartbeat that allows enabling only specific SPARKs, but only gets respected
 * when the SPARK is not locked to the Universal Heartbeat or Primary Heartbeat
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t enabled_sparks_bitfield;
} spark_secondary_heartbeat_t;

/**
 * Signals in message USB_ONLY_IDENTIFY.
 *
 * The response will only be sent if this command is received directly via USB.
 * This has no relation to the normal Identify command, which displays an LED
 * pattern.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_usb_only_identify_t;

/**
 * Signals in message USB_ONLY_ENTER_DFU_BOOTLOADER.
 *
 * Causes the device to reboot into the DFU bootloader if this command is
 * received directly via USB
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 64069..64069 (64069..64069 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic_number;
} spark_usb_only_enter_dfu_bootloader_t;

/**
 * Signals in message GET_TEMPERATURES.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t microcontroller_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t fet_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_temperature_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dock_temperature;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_2;

    /**
     * Each bit corresponds to one of the 7 temperature fields
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t valid_temperatures_bitmask;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t unused;
} spark_get_temperatures_t;

/**
 * Signals in message GET_MOTOR_INTERFACE.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: None, 1: SPARK Flex Dock / SPARK MAX, 2: SPARK Flex standard motor
     * interface
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t motor_interface;

    /**
     * 0: UVW, 1: Quadrature, 2: Quadrature (integrated)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t primary_sensor_type;
} spark_get_motor_interface_t;

/**
 * Signals in message GET_PARAMETER_0_TO_15_TYPES.
 *
 * Get types of parameters 0 to 15
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_0_to_15_types_t;

/**
 * Signals in message GET_PARAMETER_16_TO_31_TYPES.
 *
 * Get types of parameters 16 to 31
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_16_to_31_types_t;

/**
 * Signals in message GET_PARAMETER_32_TO_47_TYPES.
 *
 * Get types of parameters 32 to 47
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_32_to_47_types_t;

/**
 * Signals in message GET_PARAMETER_48_TO_63_TYPES.
 *
 * Get types of parameters 48 to 63
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_48_to_63_types_t;

/**
 * Signals in message GET_PARAMETER_64_TO_79_TYPES.
 *
 * Get types of parameters 64 to 79
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_64_to_79_types_t;

/**
 * Signals in message GET_PARAMETER_80_TO_95_TYPES.
 *
 * Get types of parameters 80 to 95
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_80_to_95_types_t;

/**
 * Signals in message GET_PARAMETER_96_TO_111_TYPES.
 *
 * Get types of parameters 96 to 111
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_96_to_111_types_t;

/**
 * Signals in message GET_PARAMETER_112_TO_127_TYPES.
 *
 * Get types of parameters 112 to 127
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_112_to_127_types_t;

/**
 * Signals in message GET_PARAMETER_128_TO_143_TYPES.
 *
 * Get types of parameters 128 to 143
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_128_to_143_types_t;

/**
 * Signals in message GET_PARAMETER_144_TO_159_TYPES.
 *
 * Get types of parameters 144 to 159
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_144_to_159_types_t;

/**
 * Signals in message GET_PARAMETER_160_TO_175_TYPES.
 *
 * Get types of parameters 160 to 175
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_160_to_175_types_t;

/**
 * Signals in message GET_PARAMETER_176_TO_191_TYPES.
 *
 * Get types of parameters 176 to 191
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_176_to_191_types_t;

/**
 * Signals in message GET_PARAMETER_192_TO_207_TYPES.
 *
 * Get types of parameters 192 to 207
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_192_to_207_types_t;

/**
 * Signals in message GET_PARAMETER_208_TO_223_TYPES.
 *
 * Get types of parameters 208 to 223
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_208_to_223_types_t;

/**
 * Signals in message GET_PARAMETER_224_TO_239_TYPES.
 *
 * Get types of parameters 224 to 239
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_224_to_239_types_t;

/**
 * Signals in message GET_PARAMETER_240_TO_255_TYPES.
 *
 * Get types of parameters 240 to 255
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_0;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_1;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_2;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_3;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_4;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_5;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_6;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_7;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_8;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_9;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_10;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_11;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_12;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_13;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_14;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t type_15;
} spark_get_parameter_240_to_255_types_t;

/**
 * Signals in message PARAMETER_WRITE.
 *
 * Write a single parameter value. In response, a Parameter Write Response frame
 * will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t parameter_id;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t value;
} spark_parameter_write_t;

/**
 * Signals in message PARAMETER_WRITE_RESPONSE.
 *
 * Response for a parameter write (including a write done as part of a
 * dual-write)
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t parameter_id;

    /**
     * 0: Unused, 1: Int, 2: Uint, 3: Float, 4: Boolean
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t parameter_type;

    /**
     * The actual type of this field is specified by the Parameter Type field.
     * Contains the current value of the parameter, which will not match what
     * was specified in the write command if the write failed.
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t value;

    /**
     * 0 on success
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t result_code;
} spark_parameter_write_response_t;

/**
 * Signals in message PARAMETERS_0_TO_64_CHANGED.
 *
 * Get whether parameters 0 to 64 have changed
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t changed_parameters_bitfield;
} spark_parameters_0_to_64_changed_t;

/**
 * Signals in message PARAMETERS_64_TO_128_CHANGED.
 *
 * Get whether parameters 64 to 128 have changed
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t changed_parameters_bitfield;
} spark_parameters_64_to_128_changed_t;

/**
 * Signals in message PARAMETERS_128_TO_192_CHANGED.
 *
 * Get whether parameters 128 to 192 have changed
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t changed_parameters_bitfield;
} spark_parameters_128_to_192_changed_t;

/**
 * Signals in message PARAMETERS_192_TO_256_CHANGED.
 *
 * Get whether parameters 192 to 256 have changed
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint64_t changed_parameters_bitfield;
} spark_parameters_192_to_256_changed_t;

/**
 * Signals in message GET_PARAMETER_RANGE.
 *
 * Get the min or max allowed value for a parameter. In response, a Set Statuses
 * Enabled Response frame will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t parameter_id;

    /**
     * If true, gets the minimum value, otherwise gets the maximum value
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t get_min_value;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} spark_get_parameter_range_t;

/**
 * Signals in message GET_PARAMETER_RANGE_RESPONSE.
 *
 * Response containing the min or max allowed value for a parameter
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t parameter_id;

    /**
     * If true, the Value signal contains the minimum value, otherwise it
     * contains the maximum value
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_min_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t value;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved;
} spark_get_parameter_range_response_t;

/**
 * Signals in message READ_PARAMETER_0_AND_1.
 *
 * Read parameter 0 and 1 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_0_and_1_t;

/**
 * Signals in message READ_PARAMETER_2_AND_3.
 *
 * Read parameter 2 and 3 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_2_and_3_t;

/**
 * Signals in message READ_PARAMETER_4_AND_5.
 *
 * Read parameter 4 and 5 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_4_and_5_t;

/**
 * Signals in message READ_PARAMETER_6_AND_7.
 *
 * Read parameter 6 and 7 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_6_and_7_t;

/**
 * Signals in message READ_PARAMETER_8_AND_9.
 *
 * Read parameter 8 and 9 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_8_and_9_t;

/**
 * Signals in message READ_PARAMETER_10_AND_11.
 *
 * Read parameter 10 and 11 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_10_and_11_t;

/**
 * Signals in message READ_PARAMETER_12_AND_13.
 *
 * Read parameter 12 and 13 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_12_and_13_t;

/**
 * Signals in message READ_PARAMETER_14_AND_15.
 *
 * Read parameter 14 and 15 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_14_and_15_t;

/**
 * Signals in message READ_PARAMETER_16_AND_17.
 *
 * Read parameter 16 and 17 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_16_and_17_t;

/**
 * Signals in message READ_PARAMETER_18_AND_19.
 *
 * Read parameter 18 and 19 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_18_and_19_t;

/**
 * Signals in message READ_PARAMETER_20_AND_21.
 *
 * Read parameter 20 and 21 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_20_and_21_t;

/**
 * Signals in message READ_PARAMETER_22_AND_23.
 *
 * Read parameter 22 and 23 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_22_and_23_t;

/**
 * Signals in message READ_PARAMETER_24_AND_25.
 *
 * Read parameter 24 and 25 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_24_and_25_t;

/**
 * Signals in message READ_PARAMETER_26_AND_27.
 *
 * Read parameter 26 and 27 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_26_and_27_t;

/**
 * Signals in message READ_PARAMETER_28_AND_29.
 *
 * Read parameter 28 and 29 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_28_and_29_t;

/**
 * Signals in message READ_PARAMETER_30_AND_31.
 *
 * Read parameter 30 and 31 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_30_and_31_t;

/**
 * Signals in message READ_PARAMETER_32_AND_33.
 *
 * Read parameter 32 and 33 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_32_and_33_t;

/**
 * Signals in message READ_PARAMETER_34_AND_35.
 *
 * Read parameter 34 and 35 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_34_and_35_t;

/**
 * Signals in message READ_PARAMETER_36_AND_37.
 *
 * Read parameter 36 and 37 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_36_and_37_t;

/**
 * Signals in message READ_PARAMETER_38_AND_39.
 *
 * Read parameter 38 and 39 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_38_and_39_t;

/**
 * Signals in message READ_PARAMETER_40_AND_41.
 *
 * Read parameter 40 and 41 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_40_and_41_t;

/**
 * Signals in message READ_PARAMETER_42_AND_43.
 *
 * Read parameter 42 and 43 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_42_and_43_t;

/**
 * Signals in message READ_PARAMETER_44_AND_45.
 *
 * Read parameter 44 and 45 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_44_and_45_t;

/**
 * Signals in message READ_PARAMETER_46_AND_47.
 *
 * Read parameter 46 and 47 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_46_and_47_t;

/**
 * Signals in message READ_PARAMETER_48_AND_49.
 *
 * Read parameter 48 and 49 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_48_and_49_t;

/**
 * Signals in message READ_PARAMETER_50_AND_51.
 *
 * Read parameter 50 and 51 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_50_and_51_t;

/**
 * Signals in message READ_PARAMETER_52_AND_53.
 *
 * Read parameter 52 and 53 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_52_and_53_t;

/**
 * Signals in message READ_PARAMETER_54_AND_55.
 *
 * Read parameter 54 and 55 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_54_and_55_t;

/**
 * Signals in message READ_PARAMETER_56_AND_57.
 *
 * Read parameter 56 and 57 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_56_and_57_t;

/**
 * Signals in message READ_PARAMETER_58_AND_59.
 *
 * Read parameter 58 and 59 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_58_and_59_t;

/**
 * Signals in message READ_PARAMETER_60_AND_61.
 *
 * Read parameter 60 and 61 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_60_and_61_t;

/**
 * Signals in message READ_PARAMETER_62_AND_63.
 *
 * Read parameter 62 and 63 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_62_and_63_t;

/**
 * Signals in message READ_PARAMETER_64_AND_65.
 *
 * Read parameter 64 and 65 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_64_and_65_t;

/**
 * Signals in message READ_PARAMETER_66_AND_67.
 *
 * Read parameter 66 and 67 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_66_and_67_t;

/**
 * Signals in message READ_PARAMETER_68_AND_69.
 *
 * Read parameter 68 and 69 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_68_and_69_t;

/**
 * Signals in message READ_PARAMETER_70_AND_71.
 *
 * Read parameter 70 and 71 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_70_and_71_t;

/**
 * Signals in message READ_PARAMETER_72_AND_73.
 *
 * Read parameter 72 and 73 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_72_and_73_t;

/**
 * Signals in message READ_PARAMETER_74_AND_75.
 *
 * Read parameter 74 and 75 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_74_and_75_t;

/**
 * Signals in message READ_PARAMETER_76_AND_77.
 *
 * Read parameter 76 and 77 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_76_and_77_t;

/**
 * Signals in message READ_PARAMETER_78_AND_79.
 *
 * Read parameter 78 and 79 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_78_and_79_t;

/**
 * Signals in message READ_PARAMETER_80_AND_81.
 *
 * Read parameter 80 and 81 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_80_and_81_t;

/**
 * Signals in message READ_PARAMETER_82_AND_83.
 *
 * Read parameter 82 and 83 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_82_and_83_t;

/**
 * Signals in message READ_PARAMETER_84_AND_85.
 *
 * Read parameter 84 and 85 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_84_and_85_t;

/**
 * Signals in message READ_PARAMETER_86_AND_87.
 *
 * Read parameter 86 and 87 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_86_and_87_t;

/**
 * Signals in message READ_PARAMETER_88_AND_89.
 *
 * Read parameter 88 and 89 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_88_and_89_t;

/**
 * Signals in message READ_PARAMETER_90_AND_91.
 *
 * Read parameter 90 and 91 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_90_and_91_t;

/**
 * Signals in message READ_PARAMETER_92_AND_93.
 *
 * Read parameter 92 and 93 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_92_and_93_t;

/**
 * Signals in message READ_PARAMETER_94_AND_95.
 *
 * Read parameter 94 and 95 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_94_and_95_t;

/**
 * Signals in message READ_PARAMETER_96_AND_97.
 *
 * Read parameter 96 and 97 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_96_and_97_t;

/**
 * Signals in message READ_PARAMETER_98_AND_99.
 *
 * Read parameter 98 and 99 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_98_and_99_t;

/**
 * Signals in message READ_PARAMETER_100_AND_101.
 *
 * Read parameter 100 and 101 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_100_and_101_t;

/**
 * Signals in message READ_PARAMETER_102_AND_103.
 *
 * Read parameter 102 and 103 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_102_and_103_t;

/**
 * Signals in message READ_PARAMETER_104_AND_105.
 *
 * Read parameter 104 and 105 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_104_and_105_t;

/**
 * Signals in message READ_PARAMETER_106_AND_107.
 *
 * Read parameter 106 and 107 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_106_and_107_t;

/**
 * Signals in message READ_PARAMETER_108_AND_109.
 *
 * Read parameter 108 and 109 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_108_and_109_t;

/**
 * Signals in message READ_PARAMETER_110_AND_111.
 *
 * Read parameter 110 and 111 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_110_and_111_t;

/**
 * Signals in message READ_PARAMETER_112_AND_113.
 *
 * Read parameter 112 and 113 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_112_and_113_t;

/**
 * Signals in message READ_PARAMETER_114_AND_115.
 *
 * Read parameter 114 and 115 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_114_and_115_t;

/**
 * Signals in message READ_PARAMETER_116_AND_117.
 *
 * Read parameter 116 and 117 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_116_and_117_t;

/**
 * Signals in message READ_PARAMETER_118_AND_119.
 *
 * Read parameter 118 and 119 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_118_and_119_t;

/**
 * Signals in message READ_PARAMETER_120_AND_121.
 *
 * Read parameter 120 and 121 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_120_and_121_t;

/**
 * Signals in message READ_PARAMETER_122_AND_123.
 *
 * Read parameter 122 and 123 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_122_and_123_t;

/**
 * Signals in message READ_PARAMETER_124_AND_125.
 *
 * Read parameter 124 and 125 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_124_and_125_t;

/**
 * Signals in message READ_PARAMETER_126_AND_127.
 *
 * Read parameter 126 and 127 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_126_and_127_t;

/**
 * Signals in message READ_PARAMETER_128_AND_129.
 *
 * Read parameter 128 and 129 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_128_and_129_t;

/**
 * Signals in message READ_PARAMETER_130_AND_131.
 *
 * Read parameter 130 and 131 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_130_and_131_t;

/**
 * Signals in message READ_PARAMETER_132_AND_133.
 *
 * Read parameter 132 and 133 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_132_and_133_t;

/**
 * Signals in message READ_PARAMETER_134_AND_135.
 *
 * Read parameter 134 and 135 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_134_and_135_t;

/**
 * Signals in message READ_PARAMETER_136_AND_137.
 *
 * Read parameter 136 and 137 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_136_and_137_t;

/**
 * Signals in message READ_PARAMETER_138_AND_139.
 *
 * Read parameter 138 and 139 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_138_and_139_t;

/**
 * Signals in message READ_PARAMETER_140_AND_141.
 *
 * Read parameter 140 and 141 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_140_and_141_t;

/**
 * Signals in message READ_PARAMETER_142_AND_143.
 *
 * Read parameter 142 and 143 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_142_and_143_t;

/**
 * Signals in message READ_PARAMETER_144_AND_145.
 *
 * Read parameter 144 and 145 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_144_and_145_t;

/**
 * Signals in message READ_PARAMETER_146_AND_147.
 *
 * Read parameter 146 and 147 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_146_and_147_t;

/**
 * Signals in message READ_PARAMETER_148_AND_149.
 *
 * Read parameter 148 and 149 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_148_and_149_t;

/**
 * Signals in message READ_PARAMETER_150_AND_151.
 *
 * Read parameter 150 and 151 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_150_and_151_t;

/**
 * Signals in message READ_PARAMETER_152_AND_153.
 *
 * Read parameter 152 and 153 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_152_and_153_t;

/**
 * Signals in message READ_PARAMETER_154_AND_155.
 *
 * Read parameter 154 and 155 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_154_and_155_t;

/**
 * Signals in message READ_PARAMETER_156_AND_157.
 *
 * Read parameter 156 and 157 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_156_and_157_t;

/**
 * Signals in message READ_PARAMETER_158_AND_159.
 *
 * Read parameter 158 and 159 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_158_and_159_t;

/**
 * Signals in message READ_PARAMETER_160_AND_161.
 *
 * Read parameter 160 and 161 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_160_and_161_t;

/**
 * Signals in message READ_PARAMETER_162_AND_163.
 *
 * Read parameter 162 and 163 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_162_and_163_t;

/**
 * Signals in message READ_PARAMETER_164_AND_165.
 *
 * Read parameter 164 and 165 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_164_and_165_t;

/**
 * Signals in message READ_PARAMETER_166_AND_167.
 *
 * Read parameter 166 and 167 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_166_and_167_t;

/**
 * Signals in message READ_PARAMETER_168_AND_169.
 *
 * Read parameter 168 and 169 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_168_and_169_t;

/**
 * Signals in message READ_PARAMETER_170_AND_171.
 *
 * Read parameter 170 and 171 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_170_and_171_t;

/**
 * Signals in message READ_PARAMETER_172_AND_173.
 *
 * Read parameter 172 and 173 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_172_and_173_t;

/**
 * Signals in message READ_PARAMETER_174_AND_175.
 *
 * Read parameter 174 and 175 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_174_and_175_t;

/**
 * Signals in message READ_PARAMETER_176_AND_177.
 *
 * Read parameter 176 and 177 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_176_and_177_t;

/**
 * Signals in message READ_PARAMETER_178_AND_179.
 *
 * Read parameter 178 and 179 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_178_and_179_t;

/**
 * Signals in message READ_PARAMETER_180_AND_181.
 *
 * Read parameter 180 and 181 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_180_and_181_t;

/**
 * Signals in message READ_PARAMETER_182_AND_183.
 *
 * Read parameter 182 and 183 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_182_and_183_t;

/**
 * Signals in message READ_PARAMETER_184_AND_185.
 *
 * Read parameter 184 and 185 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_184_and_185_t;

/**
 * Signals in message READ_PARAMETER_186_AND_187.
 *
 * Read parameter 186 and 187 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_186_and_187_t;

/**
 * Signals in message READ_PARAMETER_188_AND_189.
 *
 * Read parameter 188 and 189 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_188_and_189_t;

/**
 * Signals in message READ_PARAMETER_190_AND_191.
 *
 * Read parameter 190 and 191 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_190_and_191_t;

/**
 * Signals in message READ_PARAMETER_192_AND_193.
 *
 * Read parameter 192 and 193 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_192_and_193_t;

/**
 * Signals in message READ_PARAMETER_194_AND_195.
 *
 * Read parameter 194 and 195 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_194_and_195_t;

/**
 * Signals in message READ_PARAMETER_196_AND_197.
 *
 * Read parameter 196 and 197 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_196_and_197_t;

/**
 * Signals in message READ_PARAMETER_198_AND_199.
 *
 * Read parameter 198 and 199 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_198_and_199_t;

/**
 * Signals in message READ_PARAMETER_200_AND_201.
 *
 * Read parameter 200 and 201 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_200_and_201_t;

/**
 * Signals in message READ_PARAMETER_202_AND_203.
 *
 * Read parameter 202 and 203 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_202_and_203_t;

/**
 * Signals in message READ_PARAMETER_204_AND_205.
 *
 * Read parameter 204 and 205 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_204_and_205_t;

/**
 * Signals in message READ_PARAMETER_206_AND_207.
 *
 * Read parameter 206 and 207 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_206_and_207_t;

/**
 * Signals in message READ_PARAMETER_208_AND_209.
 *
 * Read parameter 208 and 209 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_208_and_209_t;

/**
 * Signals in message READ_PARAMETER_210_AND_211.
 *
 * Read parameter 210 and 211 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_210_and_211_t;

/**
 * Signals in message READ_PARAMETER_212_AND_213.
 *
 * Read parameter 212 and 213 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_212_and_213_t;

/**
 * Signals in message READ_PARAMETER_214_AND_215.
 *
 * Read parameter 214 and 215 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_214_and_215_t;

/**
 * Signals in message READ_PARAMETER_216_AND_217.
 *
 * Read parameter 216 and 217 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_216_and_217_t;

/**
 * Signals in message READ_PARAMETER_218_AND_219.
 *
 * Read parameter 218 and 219 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_218_and_219_t;

/**
 * Signals in message READ_PARAMETER_220_AND_221.
 *
 * Read parameter 220 and 221 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_220_and_221_t;

/**
 * Signals in message READ_PARAMETER_222_AND_223.
 *
 * Read parameter 222 and 223 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_222_and_223_t;

/**
 * Signals in message READ_PARAMETER_224_AND_225.
 *
 * Read parameter 224 and 225 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_224_and_225_t;

/**
 * Signals in message READ_PARAMETER_226_AND_227.
 *
 * Read parameter 226 and 227 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_226_and_227_t;

/**
 * Signals in message READ_PARAMETER_228_AND_229.
 *
 * Read parameter 228 and 229 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_228_and_229_t;

/**
 * Signals in message READ_PARAMETER_230_AND_231.
 *
 * Read parameter 230 and 231 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_230_and_231_t;

/**
 * Signals in message READ_PARAMETER_232_AND_233.
 *
 * Read parameter 232 and 233 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_232_and_233_t;

/**
 * Signals in message READ_PARAMETER_234_AND_235.
 *
 * Read parameter 234 and 235 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_234_and_235_t;

/**
 * Signals in message READ_PARAMETER_236_AND_237.
 *
 * Read parameter 236 and 237 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_236_and_237_t;

/**
 * Signals in message READ_PARAMETER_238_AND_239.
 *
 * Read parameter 238 and 239 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_238_and_239_t;

/**
 * Signals in message READ_PARAMETER_240_AND_241.
 *
 * Read parameter 240 and 241 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_240_and_241_t;

/**
 * Signals in message READ_PARAMETER_242_AND_243.
 *
 * Read parameter 242 and 243 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_242_and_243_t;

/**
 * Signals in message READ_PARAMETER_244_AND_245.
 *
 * Read parameter 244 and 245 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_244_and_245_t;

/**
 * Signals in message READ_PARAMETER_246_AND_247.
 *
 * Read parameter 246 and 247 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_246_and_247_t;

/**
 * Signals in message READ_PARAMETER_248_AND_249.
 *
 * Read parameter 248 and 249 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_248_and_249_t;

/**
 * Signals in message READ_PARAMETER_250_AND_251.
 *
 * Read parameter 250 and 251 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_250_and_251_t;

/**
 * Signals in message READ_PARAMETER_252_AND_253.
 *
 * Read parameter 252 and 253 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_252_and_253_t;

/**
 * Signals in message READ_PARAMETER_254_AND_255.
 *
 * Read parameter 254 and 255 at the same time
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_read_parameter_254_and_255_t;

/**
 * Signals in message WRITE_PARAMETER_0_AND_1.
 *
 * Write Parameter 0 and 1 at the same time. Two Write Parameter Response frames
 * will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_0_and_1_t;

/**
 * Signals in message WRITE_PARAMETER_2_AND_3.
 *
 * Write Parameter 2 and 3 at the same time. Two Write Parameter Response frames
 * will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_2_and_3_t;

/**
 * Signals in message WRITE_PARAMETER_4_AND_5.
 *
 * Write Parameter 4 and 5 at the same time. Two Write Parameter Response frames
 * will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_4_and_5_t;

/**
 * Signals in message WRITE_PARAMETER_6_AND_7.
 *
 * Write Parameter 6 and 7 at the same time. Two Write Parameter Response frames
 * will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_6_and_7_t;

/**
 * Signals in message WRITE_PARAMETER_8_AND_9.
 *
 * Write Parameter 8 and 9 at the same time. Two Write Parameter Response frames
 * will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_8_and_9_t;

/**
 * Signals in message WRITE_PARAMETER_10_AND_11.
 *
 * Write Parameter 10 and 11 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_10_and_11_t;

/**
 * Signals in message WRITE_PARAMETER_12_AND_13.
 *
 * Write Parameter 12 and 13 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_12_and_13_t;

/**
 * Signals in message WRITE_PARAMETER_14_AND_15.
 *
 * Write Parameter 14 and 15 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_14_and_15_t;

/**
 * Signals in message WRITE_PARAMETER_16_AND_17.
 *
 * Write Parameter 16 and 17 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_16_and_17_t;

/**
 * Signals in message WRITE_PARAMETER_18_AND_19.
 *
 * Write Parameter 18 and 19 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_18_and_19_t;

/**
 * Signals in message WRITE_PARAMETER_20_AND_21.
 *
 * Write Parameter 20 and 21 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_20_and_21_t;

/**
 * Signals in message WRITE_PARAMETER_22_AND_23.
 *
 * Write Parameter 22 and 23 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_22_and_23_t;

/**
 * Signals in message WRITE_PARAMETER_24_AND_25.
 *
 * Write Parameter 24 and 25 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_24_and_25_t;

/**
 * Signals in message WRITE_PARAMETER_26_AND_27.
 *
 * Write Parameter 26 and 27 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_26_and_27_t;

/**
 * Signals in message WRITE_PARAMETER_28_AND_29.
 *
 * Write Parameter 28 and 29 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_28_and_29_t;

/**
 * Signals in message WRITE_PARAMETER_30_AND_31.
 *
 * Write Parameter 30 and 31 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_30_and_31_t;

/**
 * Signals in message WRITE_PARAMETER_32_AND_33.
 *
 * Write Parameter 32 and 33 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_32_and_33_t;

/**
 * Signals in message WRITE_PARAMETER_34_AND_35.
 *
 * Write Parameter 34 and 35 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_34_and_35_t;

/**
 * Signals in message WRITE_PARAMETER_36_AND_37.
 *
 * Write Parameter 36 and 37 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_36_and_37_t;

/**
 * Signals in message WRITE_PARAMETER_38_AND_39.
 *
 * Write Parameter 38 and 39 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_38_and_39_t;

/**
 * Signals in message WRITE_PARAMETER_40_AND_41.
 *
 * Write Parameter 40 and 41 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_40_and_41_t;

/**
 * Signals in message WRITE_PARAMETER_42_AND_43.
 *
 * Write Parameter 42 and 43 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_42_and_43_t;

/**
 * Signals in message WRITE_PARAMETER_44_AND_45.
 *
 * Write Parameter 44 and 45 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_44_and_45_t;

/**
 * Signals in message WRITE_PARAMETER_46_AND_47.
 *
 * Write Parameter 46 and 47 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_46_and_47_t;

/**
 * Signals in message WRITE_PARAMETER_48_AND_49.
 *
 * Write Parameter 48 and 49 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_48_and_49_t;

/**
 * Signals in message WRITE_PARAMETER_50_AND_51.
 *
 * Write Parameter 50 and 51 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_50_and_51_t;

/**
 * Signals in message WRITE_PARAMETER_52_AND_53.
 *
 * Write Parameter 52 and 53 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_52_and_53_t;

/**
 * Signals in message WRITE_PARAMETER_54_AND_55.
 *
 * Write Parameter 54 and 55 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_54_and_55_t;

/**
 * Signals in message WRITE_PARAMETER_56_AND_57.
 *
 * Write Parameter 56 and 57 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_56_and_57_t;

/**
 * Signals in message WRITE_PARAMETER_58_AND_59.
 *
 * Write Parameter 58 and 59 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_58_and_59_t;

/**
 * Signals in message WRITE_PARAMETER_60_AND_61.
 *
 * Write Parameter 60 and 61 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_60_and_61_t;

/**
 * Signals in message WRITE_PARAMETER_62_AND_63.
 *
 * Write Parameter 62 and 63 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_62_and_63_t;

/**
 * Signals in message WRITE_PARAMETER_64_AND_65.
 *
 * Write Parameter 64 and 65 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_64_and_65_t;

/**
 * Signals in message WRITE_PARAMETER_66_AND_67.
 *
 * Write Parameter 66 and 67 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_66_and_67_t;

/**
 * Signals in message WRITE_PARAMETER_68_AND_69.
 *
 * Write Parameter 68 and 69 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_68_and_69_t;

/**
 * Signals in message WRITE_PARAMETER_70_AND_71.
 *
 * Write Parameter 70 and 71 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_70_and_71_t;

/**
 * Signals in message WRITE_PARAMETER_72_AND_73.
 *
 * Write Parameter 72 and 73 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_72_and_73_t;

/**
 * Signals in message WRITE_PARAMETER_74_AND_75.
 *
 * Write Parameter 74 and 75 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_74_and_75_t;

/**
 * Signals in message WRITE_PARAMETER_76_AND_77.
 *
 * Write Parameter 76 and 77 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_76_and_77_t;

/**
 * Signals in message WRITE_PARAMETER_78_AND_79.
 *
 * Write Parameter 78 and 79 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_78_and_79_t;

/**
 * Signals in message WRITE_PARAMETER_80_AND_81.
 *
 * Write Parameter 80 and 81 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_80_and_81_t;

/**
 * Signals in message WRITE_PARAMETER_82_AND_83.
 *
 * Write Parameter 82 and 83 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_82_and_83_t;

/**
 * Signals in message WRITE_PARAMETER_84_AND_85.
 *
 * Write Parameter 84 and 85 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_84_and_85_t;

/**
 * Signals in message WRITE_PARAMETER_86_AND_87.
 *
 * Write Parameter 86 and 87 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_86_and_87_t;

/**
 * Signals in message WRITE_PARAMETER_88_AND_89.
 *
 * Write Parameter 88 and 89 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_88_and_89_t;

/**
 * Signals in message WRITE_PARAMETER_90_AND_91.
 *
 * Write Parameter 90 and 91 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_90_and_91_t;

/**
 * Signals in message WRITE_PARAMETER_92_AND_93.
 *
 * Write Parameter 92 and 93 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_92_and_93_t;

/**
 * Signals in message WRITE_PARAMETER_94_AND_95.
 *
 * Write Parameter 94 and 95 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_94_and_95_t;

/**
 * Signals in message WRITE_PARAMETER_96_AND_97.
 *
 * Write Parameter 96 and 97 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_96_and_97_t;

/**
 * Signals in message WRITE_PARAMETER_98_AND_99.
 *
 * Write Parameter 98 and 99 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_98_and_99_t;

/**
 * Signals in message WRITE_PARAMETER_100_AND_101.
 *
 * Write Parameter 100 and 101 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_100_and_101_t;

/**
 * Signals in message WRITE_PARAMETER_102_AND_103.
 *
 * Write Parameter 102 and 103 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_102_and_103_t;

/**
 * Signals in message WRITE_PARAMETER_104_AND_105.
 *
 * Write Parameter 104 and 105 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_104_and_105_t;

/**
 * Signals in message WRITE_PARAMETER_106_AND_107.
 *
 * Write Parameter 106 and 107 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_106_and_107_t;

/**
 * Signals in message WRITE_PARAMETER_108_AND_109.
 *
 * Write Parameter 108 and 109 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_108_and_109_t;

/**
 * Signals in message WRITE_PARAMETER_110_AND_111.
 *
 * Write Parameter 110 and 111 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_110_and_111_t;

/**
 * Signals in message WRITE_PARAMETER_112_AND_113.
 *
 * Write Parameter 112 and 113 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_112_and_113_t;

/**
 * Signals in message WRITE_PARAMETER_114_AND_115.
 *
 * Write Parameter 114 and 115 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_114_and_115_t;

/**
 * Signals in message WRITE_PARAMETER_116_AND_117.
 *
 * Write Parameter 116 and 117 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_116_and_117_t;

/**
 * Signals in message WRITE_PARAMETER_118_AND_119.
 *
 * Write Parameter 118 and 119 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_118_and_119_t;

/**
 * Signals in message WRITE_PARAMETER_120_AND_121.
 *
 * Write Parameter 120 and 121 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_120_and_121_t;

/**
 * Signals in message WRITE_PARAMETER_122_AND_123.
 *
 * Write Parameter 122 and 123 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_122_and_123_t;

/**
 * Signals in message WRITE_PARAMETER_124_AND_125.
 *
 * Write Parameter 124 and 125 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_124_and_125_t;

/**
 * Signals in message WRITE_PARAMETER_126_AND_127.
 *
 * Write Parameter 126 and 127 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_126_and_127_t;

/**
 * Signals in message WRITE_PARAMETER_128_AND_129.
 *
 * Write Parameter 128 and 129 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_128_and_129_t;

/**
 * Signals in message WRITE_PARAMETER_130_AND_131.
 *
 * Write Parameter 130 and 131 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_130_and_131_t;

/**
 * Signals in message WRITE_PARAMETER_132_AND_133.
 *
 * Write Parameter 132 and 133 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_132_and_133_t;

/**
 * Signals in message WRITE_PARAMETER_134_AND_135.
 *
 * Write Parameter 134 and 135 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_134_and_135_t;

/**
 * Signals in message WRITE_PARAMETER_136_AND_137.
 *
 * Write Parameter 136 and 137 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_136_and_137_t;

/**
 * Signals in message WRITE_PARAMETER_138_AND_139.
 *
 * Write Parameter 138 and 139 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_138_and_139_t;

/**
 * Signals in message WRITE_PARAMETER_140_AND_141.
 *
 * Write Parameter 140 and 141 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_140_and_141_t;

/**
 * Signals in message WRITE_PARAMETER_142_AND_143.
 *
 * Write Parameter 142 and 143 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_142_and_143_t;

/**
 * Signals in message WRITE_PARAMETER_144_AND_145.
 *
 * Write Parameter 144 and 145 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_144_and_145_t;

/**
 * Signals in message WRITE_PARAMETER_146_AND_147.
 *
 * Write Parameter 146 and 147 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_146_and_147_t;

/**
 * Signals in message WRITE_PARAMETER_148_AND_149.
 *
 * Write Parameter 148 and 149 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_148_and_149_t;

/**
 * Signals in message WRITE_PARAMETER_150_AND_151.
 *
 * Write Parameter 150 and 151 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_150_and_151_t;

/**
 * Signals in message WRITE_PARAMETER_152_AND_153.
 *
 * Write Parameter 152 and 153 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_152_and_153_t;

/**
 * Signals in message WRITE_PARAMETER_154_AND_155.
 *
 * Write Parameter 154 and 155 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_154_and_155_t;

/**
 * Signals in message WRITE_PARAMETER_156_AND_157.
 *
 * Write Parameter 156 and 157 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_156_and_157_t;

/**
 * Signals in message WRITE_PARAMETER_158_AND_159.
 *
 * Write Parameter 158 and 159 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_158_and_159_t;

/**
 * Signals in message WRITE_PARAMETER_160_AND_161.
 *
 * Write Parameter 160 and 161 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_160_and_161_t;

/**
 * Signals in message WRITE_PARAMETER_162_AND_163.
 *
 * Write Parameter 162 and 163 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_162_and_163_t;

/**
 * Signals in message WRITE_PARAMETER_164_AND_165.
 *
 * Write Parameter 164 and 165 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_164_and_165_t;

/**
 * Signals in message WRITE_PARAMETER_166_AND_167.
 *
 * Write Parameter 166 and 167 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_166_and_167_t;

/**
 * Signals in message WRITE_PARAMETER_168_AND_169.
 *
 * Write Parameter 168 and 169 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_168_and_169_t;

/**
 * Signals in message WRITE_PARAMETER_170_AND_171.
 *
 * Write Parameter 170 and 171 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_170_and_171_t;

/**
 * Signals in message WRITE_PARAMETER_172_AND_173.
 *
 * Write Parameter 172 and 173 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_172_and_173_t;

/**
 * Signals in message WRITE_PARAMETER_174_AND_175.
 *
 * Write Parameter 174 and 175 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_174_and_175_t;

/**
 * Signals in message WRITE_PARAMETER_176_AND_177.
 *
 * Write Parameter 176 and 177 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_176_and_177_t;

/**
 * Signals in message WRITE_PARAMETER_178_AND_179.
 *
 * Write Parameter 178 and 179 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_178_and_179_t;

/**
 * Signals in message WRITE_PARAMETER_180_AND_181.
 *
 * Write Parameter 180 and 181 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_180_and_181_t;

/**
 * Signals in message WRITE_PARAMETER_182_AND_183.
 *
 * Write Parameter 182 and 183 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_182_and_183_t;

/**
 * Signals in message WRITE_PARAMETER_184_AND_185.
 *
 * Write Parameter 184 and 185 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_184_and_185_t;

/**
 * Signals in message WRITE_PARAMETER_186_AND_187.
 *
 * Write Parameter 186 and 187 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_186_and_187_t;

/**
 * Signals in message WRITE_PARAMETER_188_AND_189.
 *
 * Write Parameter 188 and 189 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_188_and_189_t;

/**
 * Signals in message WRITE_PARAMETER_190_AND_191.
 *
 * Write Parameter 190 and 191 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_190_and_191_t;

/**
 * Signals in message WRITE_PARAMETER_192_AND_193.
 *
 * Write Parameter 192 and 193 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_192_and_193_t;

/**
 * Signals in message WRITE_PARAMETER_194_AND_195.
 *
 * Write Parameter 194 and 195 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_194_and_195_t;

/**
 * Signals in message WRITE_PARAMETER_196_AND_197.
 *
 * Write Parameter 196 and 197 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_196_and_197_t;

/**
 * Signals in message WRITE_PARAMETER_198_AND_199.
 *
 * Write Parameter 198 and 199 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_198_and_199_t;

/**
 * Signals in message WRITE_PARAMETER_200_AND_201.
 *
 * Write Parameter 200 and 201 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_200_and_201_t;

/**
 * Signals in message WRITE_PARAMETER_202_AND_203.
 *
 * Write Parameter 202 and 203 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_202_and_203_t;

/**
 * Signals in message WRITE_PARAMETER_204_AND_205.
 *
 * Write Parameter 204 and 205 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_204_and_205_t;

/**
 * Signals in message WRITE_PARAMETER_206_AND_207.
 *
 * Write Parameter 206 and 207 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_206_and_207_t;

/**
 * Signals in message WRITE_PARAMETER_208_AND_209.
 *
 * Write Parameter 208 and 209 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_208_and_209_t;

/**
 * Signals in message WRITE_PARAMETER_210_AND_211.
 *
 * Write Parameter 210 and 211 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_210_and_211_t;

/**
 * Signals in message WRITE_PARAMETER_212_AND_213.
 *
 * Write Parameter 212 and 213 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_212_and_213_t;

/**
 * Signals in message WRITE_PARAMETER_214_AND_215.
 *
 * Write Parameter 214 and 215 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_214_and_215_t;

/**
 * Signals in message WRITE_PARAMETER_216_AND_217.
 *
 * Write Parameter 216 and 217 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_216_and_217_t;

/**
 * Signals in message WRITE_PARAMETER_218_AND_219.
 *
 * Write Parameter 218 and 219 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_218_and_219_t;

/**
 * Signals in message WRITE_PARAMETER_220_AND_221.
 *
 * Write Parameter 220 and 221 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_220_and_221_t;

/**
 * Signals in message WRITE_PARAMETER_222_AND_223.
 *
 * Write Parameter 222 and 223 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_222_and_223_t;

/**
 * Signals in message WRITE_PARAMETER_224_AND_225.
 *
 * Write Parameter 224 and 225 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_224_and_225_t;

/**
 * Signals in message WRITE_PARAMETER_226_AND_227.
 *
 * Write Parameter 226 and 227 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_226_and_227_t;

/**
 * Signals in message WRITE_PARAMETER_228_AND_229.
 *
 * Write Parameter 228 and 229 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_228_and_229_t;

/**
 * Signals in message WRITE_PARAMETER_230_AND_231.
 *
 * Write Parameter 230 and 231 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_230_and_231_t;

/**
 * Signals in message WRITE_PARAMETER_232_AND_233.
 *
 * Write Parameter 232 and 233 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_232_and_233_t;

/**
 * Signals in message WRITE_PARAMETER_234_AND_235.
 *
 * Write Parameter 234 and 235 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_234_and_235_t;

/**
 * Signals in message WRITE_PARAMETER_236_AND_237.
 *
 * Write Parameter 236 and 237 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_236_and_237_t;

/**
 * Signals in message WRITE_PARAMETER_238_AND_239.
 *
 * Write Parameter 238 and 239 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_238_and_239_t;

/**
 * Signals in message WRITE_PARAMETER_240_AND_241.
 *
 * Write Parameter 240 and 241 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_240_and_241_t;

/**
 * Signals in message WRITE_PARAMETER_242_AND_243.
 *
 * Write Parameter 242 and 243 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_242_and_243_t;

/**
 * Signals in message WRITE_PARAMETER_244_AND_245.
 *
 * Write Parameter 244 and 245 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_244_and_245_t;

/**
 * Signals in message WRITE_PARAMETER_246_AND_247.
 *
 * Write Parameter 246 and 247 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_246_and_247_t;

/**
 * Signals in message WRITE_PARAMETER_248_AND_249.
 *
 * Write Parameter 248 and 249 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_248_and_249_t;

/**
 * Signals in message WRITE_PARAMETER_250_AND_251.
 *
 * Write Parameter 250 and 251 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_250_and_251_t;

/**
 * Signals in message WRITE_PARAMETER_252_AND_253.
 *
 * Write Parameter 252 and 253 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_252_and_253_t;

/**
 * Signals in message WRITE_PARAMETER_254_AND_255.
 *
 * Write Parameter 254 and 255 at the same time. Two Write Parameter Response
 * frames will be sent in response.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t first_parameter_value;

    /**
     * The actual type of this data depends on the Parameter Type of the
     * parameter in question
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t second_parameter_value;
} spark_write_parameter_254_and_255_t;

/**
 * Signals in message START_FOLLOWER_MODE.
 *
 * Starts follower mode. The relevant parameters must already be configured. In
 * response, a Start Follower Mode Response frame will be sent. Follower mode
 * will be auto-started on boot if the Follower Mode Leader ID parameter is set
 * to a non-zero value.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_start_follower_mode_t;

/**
 * Signals in message START_FOLLOWER_MODE_RESPONSE.
 *
 * Response for a Start Follower Mode command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * 0 for success. 1 for invalid parameters
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;
} spark_start_follower_mode_response_t;

/**
 * Signals in message STOP_FOLLOWER_MODE.
 *
 * Exits follower mode and causes the device to resume listening for setpoints
 * addressed directly to it. In response, a Stop Follower Mode Response frame
 * will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_stop_follower_mode_t;

/**
 * Signals in message STOP_FOLLOWER_MODE_RESPONSE.
 *
 * Response for a Stop Follower Mode Command
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_stop_follower_mode_response_t;

/**
 * Signals in message ENTER_SWDL_CAN_BOOTLOADER.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
} spark_enter_swdl_can_bootloader_t;

/**
 * Signals in message STATUS_0.
 *
 * Includes general data that is likely to need frequent refreshing
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 0..32443 (0..1 -)
     * Scale: 3.082369457075716e-05
     * Offset: 0
     */
    int16_t applied_output;

    /**
     * Range: -
     * Scale: 0.0073260073260073
     * Offset: 0
     */
    uint16_t voltage;

    /**
     * Range: -
     * Scale: 0.0366300366300366
     * Offset: 0
     */
    uint16_t current;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_temperature;

    /**
     * Whether the forward physical limit switch has been reached
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hard_forward_limit_reached;

    /**
     * Whether the reverse physical limit switch has been reached
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t hard_reverse_limit_reached;

    /**
     * Whether the forward software-defined position limit has been reached
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t soft_forward_limit_reached;

    /**
     * Whether the reverse software-defined position limit has been reached
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t soft_reverse_limit_reached;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t inverted;

    /**
     * Indicates that the SPARK is in competition mode and will ignore the
     * Secondary Heartbeat until it is power cycled
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t primary_heartbeat_lock;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_status_0_t;

/**
 * Signals in message STATUS_1.
 *
 * Includes general data that can likely tolerate infrequent refreshing
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t other_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_type_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sensor_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drv_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_eeprom_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_fault;

    /**
     * Reserved space for future active (non-sticky) faults and warnings
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_actives;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brownout_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t overcurrent_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_eeprom_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ext_eeprom_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sensor_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t stall_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t has_reset_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t other_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t other_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_type_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sensor_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t can_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drv_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_eeprom_sticky_fault;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t firmware_sticky_fault;

    /**
     * Reserved space for future sticky faults and warnings
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t reserved_stickies;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brownout_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t overcurrent_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t esc_eeprom_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ext_eeprom_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sensor_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t stall_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t has_reset_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t other_sticky_warning;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_follower;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t reserved;
} spark_status_1_t;

/**
 * Signals in message STATUS_2.
 *
 * Includes data from the primary encoder (either a brushless motor's internal
 * encoder, or the primary encoder associated with a brushed motor)
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float primary_encoder_velocity;

    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float primary_encoder_position;
} spark_status_2_t;

/**
 * Signals in message STATUS_3.
 *
 * Includes data from an analog sensor
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 0..1021 (0..5 V)
     * Scale: 0.0048973607038123
     * Offset: 0
     */
    uint16_t analog_voltage;

    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Analog Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 0.007812026887906498
     * Offset: 0
     */
    int32_t analog_velocity;

    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Analog Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float analog_position;
} spark_status_3_t;

/**
 * Signals in message STATUS_4.
 *
 * Includes data from the External Encoder (on SPARK MAX, this is the Alternate
 * Encoder)
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * External/Alternate Encoder Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float external_or_alt_encoder_velocity;

    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the External/Alternate Encoder Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float external_or_alt_encoder_position;
} spark_status_4_t;

/**
 * Signals in message STATUS_5.
 *
 * Includes velocity and position data from a duty-cycle absolute encoder
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * By default, the unit is RPM, but it can be changed implicitly using the
     * Duty Cycle Velocity Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float duty_cycle_encoder_velocity;

    /**
     * By default, the unit is rotations, but it can be changed implicitly using
     * the Duty Cycle Position Conversion Factor parameter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float duty_cycle_encoder_position;
} spark_status_5_t;

/**
 * Signals in message STATUS_6.
 *
 * Includes other data from a duty-cycle absolute encoder
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * The duty cycle from 0 to 1, with no inversion or conversion factor
     * applied
     *
     * Range: 0..64886 (0..1 -)
     * Scale: 1.541161211566339e-05
     * Offset: 0
     */
    uint16_t unadjusted_duty_cycle;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t duty_cycle_period;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_cycle_no_signal;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t duty_cycle_reserved;
} spark_status_6_t;

/**
 * Signals in message STATUS_7.
 *
 * Includes diagnostic data for closed-loop control
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    float i_accumulation;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int32_t reserved;
} spark_status_7_t;

/**
 * Signals in message UNIQUE_ID_BROADCAST.
 *
 * Contains the unique ID of the device, to allow detecting duplicate CAN IDs.
 * To avoid collisions, the SPARK firmware will send this at an irregular period
 * between 1000ms and 2000ms
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t unique_id;
} spark_unique_id_broadcast_t;

/**
 * Signals in message PERSIST_PARAMETERS.
 *
 * Causes all parameters to be written to non-volatile storage. After the
 * operation (which may take up to a second) completes, a Persist Parameters
 * Response frame will be sent.
 *
 * All signal values are as on the CAN bus.
 */
typedef struct {
    /**
     * Range: 15011..15011 (15011..15011 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t magic_number;
} spark_persist_parameters_t;

/**
 * Pack message VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_velocity_setpoint_pack(uint8_t *dst_p,
                                 const spark_velocity_setpoint_t *src_p,
                                 size_t size);

/**
 * Unpack message VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_velocity_setpoint_unpack(spark_velocity_setpoint_t *dst_p,
                                   const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from VELOCITY_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_velocity_setpoint_init(spark_velocity_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_velocity_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_velocity_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_velocity_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_velocity_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_velocity_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_velocity_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_velocity_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_velocity_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_velocity_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_velocity_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_velocity_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_velocity_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_velocity_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_velocity_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_velocity_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message DUTY_CYCLE_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_duty_cycle_setpoint_pack(uint8_t *dst_p,
                                   const spark_duty_cycle_setpoint_t *src_p,
                                   size_t size);

/**
 * Unpack message DUTY_CYCLE_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_duty_cycle_setpoint_unpack(spark_duty_cycle_setpoint_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from DUTY_CYCLE_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_duty_cycle_setpoint_init(spark_duty_cycle_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_duty_cycle_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_duty_cycle_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_duty_cycle_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_duty_cycle_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_duty_cycle_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_duty_cycle_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_duty_cycle_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_duty_cycle_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_duty_cycle_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_duty_cycle_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_duty_cycle_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_duty_cycle_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_duty_cycle_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_duty_cycle_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_duty_cycle_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message SMART_VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_smart_velocity_setpoint_pack(
    uint8_t *dst_p, const spark_smart_velocity_setpoint_t *src_p, size_t size);

/**
 * Unpack message SMART_VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_smart_velocity_setpoint_unpack(spark_smart_velocity_setpoint_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SMART_VELOCITY_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_smart_velocity_setpoint_init(spark_smart_velocity_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_smart_velocity_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_velocity_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_velocity_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_smart_velocity_setpoint_arbitrary_feedforward_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_velocity_setpoint_arbitrary_feedforward_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_velocity_setpoint_arbitrary_feedforward_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_smart_velocity_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_velocity_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_velocity_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_smart_velocity_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_velocity_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_velocity_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_smart_velocity_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_velocity_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_velocity_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message POSITION_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_position_setpoint_pack(uint8_t *dst_p,
                                 const spark_position_setpoint_t *src_p,
                                 size_t size);

/**
 * Unpack message POSITION_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_position_setpoint_unpack(spark_position_setpoint_t *dst_p,
                                   const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from POSITION_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_position_setpoint_init(spark_position_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_position_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_position_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_position_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_position_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_position_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_position_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_position_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_position_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_position_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_position_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_position_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_position_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_position_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_position_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_position_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message VOLTAGE_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_voltage_setpoint_pack(uint8_t *dst_p,
                                const spark_voltage_setpoint_t *src_p,
                                size_t size);

/**
 * Unpack message VOLTAGE_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_voltage_setpoint_unpack(spark_voltage_setpoint_t *dst_p,
                                  const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from VOLTAGE_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_voltage_setpoint_init(spark_voltage_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_voltage_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_voltage_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_voltage_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_voltage_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_voltage_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_voltage_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_voltage_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_voltage_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_voltage_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_voltage_setpoint_arbitrary_feedforward_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_voltage_setpoint_arbitrary_feedforward_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_voltage_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_voltage_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_voltage_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_voltage_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message CURRENT_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_current_setpoint_pack(uint8_t *dst_p,
                                const spark_current_setpoint_t *src_p,
                                size_t size);

/**
 * Unpack message CURRENT_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_current_setpoint_unpack(spark_current_setpoint_t *dst_p,
                                  const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from CURRENT_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_current_setpoint_init(spark_current_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_current_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_current_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_current_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_current_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_current_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_current_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_current_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_current_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_current_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_current_setpoint_arbitrary_feedforward_units_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_current_setpoint_arbitrary_feedforward_units_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_current_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_current_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_current_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_current_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message SMART_MOTION_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_smart_motion_setpoint_pack(uint8_t *dst_p,
                                     const spark_smart_motion_setpoint_t *src_p,
                                     size_t size);

/**
 * Unpack message SMART_MOTION_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_smart_motion_setpoint_unpack(spark_smart_motion_setpoint_t *dst_p,
                                       const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SMART_MOTION_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_smart_motion_setpoint_init(spark_smart_motion_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_smart_motion_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_motion_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_motion_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_smart_motion_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_motion_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_motion_setpoint_arbitrary_feedforward_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_smart_motion_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_motion_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_motion_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_smart_motion_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_motion_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_motion_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_smart_motion_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_smart_motion_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_smart_motion_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message MAXMOTION_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_maxmotion_setpoint_pack(uint8_t *dst_p,
                                  const spark_maxmotion_setpoint_t *src_p,
                                  size_t size);

/**
 * Unpack message MAXMOTION_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_maxmotion_setpoint_unpack(spark_maxmotion_setpoint_t *dst_p,
                                    const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from MAXMOTION_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_maxmotion_setpoint_init(spark_maxmotion_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_maxmotion_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_maxmotion_setpoint_arbitrary_feedforward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_setpoint_arbitrary_feedforward_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_setpoint_arbitrary_feedforward_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_maxmotion_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_maxmotion_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_maxmotion_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message MAXMOTION_VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_maxmotion_velocity_setpoint_pack(
    uint8_t *dst_p, const spark_maxmotion_velocity_setpoint_t *src_p,
    size_t size);

/**
 * Unpack message MAXMOTION_VELOCITY_SETPOINT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_maxmotion_velocity_setpoint_unpack(
    spark_maxmotion_velocity_setpoint_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MAXMOTION_VELOCITY_SETPOINT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_maxmotion_velocity_setpoint_init(
    spark_maxmotion_velocity_setpoint_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_maxmotion_velocity_setpoint_setpoint_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_velocity_setpoint_setpoint_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_velocity_setpoint_setpoint_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_maxmotion_velocity_setpoint_arbitrary_feedforward_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_velocity_setpoint_arbitrary_feedforward_decode(
    int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_velocity_setpoint_arbitrary_feedforward_is_in_range(
    int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_maxmotion_velocity_setpoint_pid_slot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_velocity_setpoint_pid_slot_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_velocity_setpoint_pid_slot_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_maxmotion_velocity_setpoint_arbitrary_feedforward_units_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_velocity_setpoint_arbitrary_feedforward_units_decode(
    uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_velocity_setpoint_arbitrary_feedforward_units_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_maxmotion_velocity_setpoint_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_maxmotion_velocity_setpoint_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_maxmotion_velocity_setpoint_reserved_is_in_range(uint16_t value);

/**
 * Pack message SET_STATUSES_ENABLED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_statuses_enabled_pack(uint8_t *dst_p,
                                    const spark_set_statuses_enabled_t *src_p,
                                    size_t size);

/**
 * Unpack message SET_STATUSES_ENABLED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_statuses_enabled_unpack(spark_set_statuses_enabled_t *dst_p,
                                      const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SET_STATUSES_ENABLED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_statuses_enabled_init(spark_set_statuses_enabled_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_set_statuses_enabled_mask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_statuses_enabled_mask_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_statuses_enabled_mask_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_set_statuses_enabled_enabled_bitfield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_statuses_enabled_enabled_bitfield_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_statuses_enabled_enabled_bitfield_is_in_range(uint16_t value);

/**
 * Pack message SET_STATUSES_ENABLED_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_statuses_enabled_response_pack(
    uint8_t *dst_p, const spark_set_statuses_enabled_response_t *src_p,
    size_t size);

/**
 * Unpack message SET_STATUSES_ENABLED_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_statuses_enabled_response_unpack(
    spark_set_statuses_enabled_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SET_STATUSES_ENABLED_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_statuses_enabled_response_init(
    spark_set_statuses_enabled_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_statuses_enabled_response_result_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_statuses_enabled_response_result_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_statuses_enabled_response_result_code_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_set_statuses_enabled_response_specified_mask_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_statuses_enabled_response_specified_mask_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_statuses_enabled_response_specified_mask_is_in_range(
    uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_set_statuses_enabled_response_enabled_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_statuses_enabled_response_enabled_bitfield_decode(
    uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_statuses_enabled_response_enabled_bitfield_is_in_range(
    uint16_t value);

/**
 * Pack message PERSIST_PARAMETERS_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_persist_parameters_response_pack(
    uint8_t *dst_p, const spark_persist_parameters_response_t *src_p,
    size_t size);

/**
 * Unpack message PERSIST_PARAMETERS_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_persist_parameters_response_unpack(
    spark_persist_parameters_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PERSIST_PARAMETERS_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_persist_parameters_response_init(
    spark_persist_parameters_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_persist_parameters_response_result_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_persist_parameters_response_result_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_persist_parameters_response_result_code_is_in_range(uint8_t value);

/**
 * Pack message RESET_SAFE_PARAMETERS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_reset_safe_parameters_pack(uint8_t *dst_p,
                                     const spark_reset_safe_parameters_t *src_p,
                                     size_t size);

/**
 * Unpack message RESET_SAFE_PARAMETERS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_reset_safe_parameters_unpack(spark_reset_safe_parameters_t *dst_p,
                                       const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from RESET_SAFE_PARAMETERS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_reset_safe_parameters_init(spark_reset_safe_parameters_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_reset_safe_parameters_magic_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_reset_safe_parameters_magic_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_reset_safe_parameters_magic_number_is_in_range(uint16_t value);

/**
 * Pack message RESET_SAFE_PARAMETERS_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_reset_safe_parameters_response_pack(
    uint8_t *dst_p, const spark_reset_safe_parameters_response_t *src_p,
    size_t size);

/**
 * Unpack message RESET_SAFE_PARAMETERS_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_reset_safe_parameters_response_unpack(
    spark_reset_safe_parameters_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RESET_SAFE_PARAMETERS_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_reset_safe_parameters_response_init(
    spark_reset_safe_parameters_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_reset_safe_parameters_response_result_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_reset_safe_parameters_response_result_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_reset_safe_parameters_response_result_code_is_in_range(
    uint8_t value);

/**
 * Pack message COMPLETE_FACTORY_RESET.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_complete_factory_reset_pack(
    uint8_t *dst_p, const spark_complete_factory_reset_t *src_p, size_t size);

/**
 * Unpack message COMPLETE_FACTORY_RESET.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_complete_factory_reset_unpack(spark_complete_factory_reset_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from COMPLETE_FACTORY_RESET.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_complete_factory_reset_init(spark_complete_factory_reset_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_complete_factory_reset_magic_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_complete_factory_reset_magic_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_complete_factory_reset_magic_number_is_in_range(uint16_t value);

/**
 * Pack message COMPLETE_FACTORY_RESET_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_complete_factory_reset_response_pack(
    uint8_t *dst_p, const spark_complete_factory_reset_response_t *src_p,
    size_t size);

/**
 * Unpack message COMPLETE_FACTORY_RESET_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_complete_factory_reset_response_unpack(
    spark_complete_factory_reset_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from COMPLETE_FACTORY_RESET_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_complete_factory_reset_response_init(
    spark_complete_factory_reset_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_complete_factory_reset_response_result_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_complete_factory_reset_response_result_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_complete_factory_reset_response_result_code_is_in_range(
    uint8_t value);

/**
 * Pack message LEGACY_STATUS_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_legacy_status_0_pack(uint8_t *dst_p,
                               const spark_legacy_status_0_t *src_p,
                               size_t size);

/**
 * Unpack message LEGACY_STATUS_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_legacy_status_0_unpack(spark_legacy_status_0_t *dst_p,
                                 const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from LEGACY_STATUS_0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_legacy_status_0_init(spark_legacy_status_0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_legacy_status_0_applied_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_legacy_status_0_applied_output_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_legacy_status_0_applied_output_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_legacy_status_0_faults_and_sticky_faults_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_legacy_status_0_faults_and_sticky_faults_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_legacy_status_0_faults_and_sticky_faults_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_legacy_status_0_other_signals_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_legacy_status_0_other_signals_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_legacy_status_0_other_signals_is_in_range(uint16_t value);

/**
 * Pack message CLEAR_FAULTS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_clear_faults_pack(uint8_t *dst_p, const spark_clear_faults_t *src_p,
                            size_t size);

/**
 * Unpack message CLEAR_FAULTS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_clear_faults_unpack(spark_clear_faults_t *dst_p, const uint8_t *src_p,
                              size_t size);

/**
 * Init message fields to default values from CLEAR_FAULTS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_clear_faults_init(spark_clear_faults_t *msg_p);

/**
 * Pack message IDENTIFY_UNIQUE_SPARK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_identify_unique_spark_pack(uint8_t *dst_p,
                                     const spark_identify_unique_spark_t *src_p,
                                     size_t size);

/**
 * Unpack message IDENTIFY_UNIQUE_SPARK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_identify_unique_spark_unpack(spark_identify_unique_spark_t *dst_p,
                                       const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from IDENTIFY_UNIQUE_SPARK.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_identify_unique_spark_init(spark_identify_unique_spark_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_identify_unique_spark_unique_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_identify_unique_spark_unique_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_identify_unique_spark_unique_id_is_in_range(uint32_t value);

/**
 * Pack message IDENTIFY.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_identify_pack(uint8_t *dst_p, const spark_identify_t *src_p,
                        size_t size);

/**
 * Unpack message IDENTIFY.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_identify_unpack(spark_identify_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from IDENTIFY.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_identify_init(spark_identify_t *msg_p);

/**
 * Pack message NACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_nack_pack(uint8_t *dst_p, const spark_nack_t *src_p, size_t size);

/**
 * Unpack message NACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_nack_unpack(spark_nack_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from NACK.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_nack_init(spark_nack_t *msg_p);

/**
 * Pack message ACK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_ack_pack(uint8_t *dst_p, const spark_ack_t *src_p, size_t size);

/**
 * Unpack message ACK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_ack_unpack(spark_ack_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from ACK.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_ack_init(spark_ack_t *msg_p);

/**
 * Pack message LED_SYNC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_led_sync_pack(uint8_t *dst_p, const spark_led_sync_t *src_p,
                        size_t size);

/**
 * Unpack message LED_SYNC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_led_sync_unpack(spark_led_sync_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from LED_SYNC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_led_sync_init(spark_led_sync_t *msg_p);

/**
 * Pack message SET_CAN_ID.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_can_id_pack(uint8_t *dst_p, const spark_set_can_id_t *src_p,
                          size_t size);

/**
 * Unpack message SET_CAN_ID.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_can_id_unpack(spark_set_can_id_t *dst_p, const uint8_t *src_p,
                            size_t size);

/**
 * Init message fields to default values from SET_CAN_ID.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_can_id_init(spark_set_can_id_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_set_can_id_unique_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_can_id_unique_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_can_id_unique_id_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_can_id_can_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_can_id_can_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_can_id_can_id_is_in_range(uint8_t value);

/**
 * Pack message GET_FIRMWARE_VERSION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_firmware_version_pack(uint8_t *dst_p,
                                    const spark_get_firmware_version_t *src_p,
                                    size_t size);

/**
 * Unpack message GET_FIRMWARE_VERSION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_firmware_version_unpack(spark_get_firmware_version_t *dst_p,
                                      const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from GET_FIRMWARE_VERSION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_firmware_version_init(spark_get_firmware_version_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_firmware_version_major_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_firmware_version_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_get_firmware_version_build_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_build_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_build_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_firmware_version_debug_build_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_debug_build_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_debug_build_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_firmware_version_hw_rev_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_hw_rev_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_hw_rev_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_get_firmware_version_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_firmware_version_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_firmware_version_reserved_is_in_range(uint16_t value);

/**
 * Pack message SWDL_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_swdl_data_pack(uint8_t *dst_p, const spark_swdl_data_t *src_p,
                         size_t size);

/**
 * Unpack message SWDL_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_swdl_data_unpack(spark_swdl_data_t *dst_p, const uint8_t *src_p,
                           size_t size);

/**
 * Init message fields to default values from SWDL_DATA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_swdl_data_init(spark_swdl_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_swdl_data_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_swdl_data_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_swdl_data_data_is_in_range(uint64_t value);

/**
 * Pack message SWDL_CHECKSUM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_swdl_checksum_pack(uint8_t *dst_p, const spark_swdl_checksum_t *src_p,
                             size_t size);

/**
 * Unpack message SWDL_CHECKSUM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_swdl_checksum_unpack(spark_swdl_checksum_t *dst_p,
                               const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SWDL_CHECKSUM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_swdl_checksum_init(spark_swdl_checksum_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_swdl_checksum_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_swdl_checksum_checksum_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_swdl_checksum_checksum_is_in_range(uint64_t value);

/**
 * Pack message SWDL_RETRANSMIT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_swdl_retransmit_pack(uint8_t *dst_p,
                               const spark_swdl_retransmit_t *src_p,
                               size_t size);

/**
 * Unpack message SWDL_RETRANSMIT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_swdl_retransmit_unpack(spark_swdl_retransmit_t *dst_p,
                                 const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SWDL_RETRANSMIT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_swdl_retransmit_init(spark_swdl_retransmit_t *msg_p);

/**
 * Pack message SET_PRIMARY_ENCODER_POSITION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_primary_encoder_position_pack(
    uint8_t *dst_p, const spark_set_primary_encoder_position_t *src_p,
    size_t size);

/**
 * Unpack message SET_PRIMARY_ENCODER_POSITION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_primary_encoder_position_unpack(
    spark_set_primary_encoder_position_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SET_PRIMARY_ENCODER_POSITION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_primary_encoder_position_init(
    spark_set_primary_encoder_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_set_primary_encoder_position_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_primary_encoder_position_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_primary_encoder_position_position_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_primary_encoder_position_data_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_primary_encoder_position_data_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_primary_encoder_position_data_type_is_in_range(uint8_t value);

/**
 * Pack message SET_I_ACCUMULATION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_i_accumulation_pack(uint8_t *dst_p,
                                  const spark_set_i_accumulation_t *src_p,
                                  size_t size);

/**
 * Unpack message SET_I_ACCUMULATION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_i_accumulation_unpack(spark_set_i_accumulation_t *dst_p,
                                    const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SET_I_ACCUMULATION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_i_accumulation_init(spark_set_i_accumulation_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_set_i_accumulation_i_accumulation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_i_accumulation_i_accumulation_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_i_accumulation_i_accumulation_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_i_accumulation_data_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_i_accumulation_data_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_i_accumulation_data_type_is_in_range(uint8_t value);

/**
 * Pack message SET_ANALOG_POSITION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_analog_position_pack(uint8_t *dst_p,
                                   const spark_set_analog_position_t *src_p,
                                   size_t size);

/**
 * Unpack message SET_ANALOG_POSITION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_analog_position_unpack(spark_set_analog_position_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SET_ANALOG_POSITION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_analog_position_init(spark_set_analog_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_set_analog_position_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_analog_position_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_analog_position_position_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_analog_position_data_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_analog_position_data_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_analog_position_data_type_is_in_range(uint8_t value);

/**
 * Pack message SET_EXT_OR_ALT_ENCODER_POSITION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_ext_or_alt_encoder_position_pack(
    uint8_t *dst_p, const spark_set_ext_or_alt_encoder_position_t *src_p,
    size_t size);

/**
 * Unpack message SET_EXT_OR_ALT_ENCODER_POSITION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_ext_or_alt_encoder_position_unpack(
    spark_set_ext_or_alt_encoder_position_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SET_EXT_OR_ALT_ENCODER_POSITION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_ext_or_alt_encoder_position_init(
    spark_set_ext_or_alt_encoder_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_set_ext_or_alt_encoder_position_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_ext_or_alt_encoder_position_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_ext_or_alt_encoder_position_position_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_ext_or_alt_encoder_position_data_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_ext_or_alt_encoder_position_data_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_ext_or_alt_encoder_position_data_type_is_in_range(uint8_t value);

/**
 * Pack message SET_DUTY_CYCLE_POSITION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_set_duty_cycle_position_pack(
    uint8_t *dst_p, const spark_set_duty_cycle_position_t *src_p, size_t size);

/**
 * Unpack message SET_DUTY_CYCLE_POSITION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_set_duty_cycle_position_unpack(spark_set_duty_cycle_position_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SET_DUTY_CYCLE_POSITION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_set_duty_cycle_position_init(spark_set_duty_cycle_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_set_duty_cycle_position_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_duty_cycle_position_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_duty_cycle_position_position_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_set_duty_cycle_position_data_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_set_duty_cycle_position_data_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_set_duty_cycle_position_data_type_is_in_range(uint8_t value);

/**
 * Pack message SECONDARY_HEARTBEAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_secondary_heartbeat_pack(uint8_t *dst_p,
                                   const spark_secondary_heartbeat_t *src_p,
                                   size_t size);

/**
 * Unpack message SECONDARY_HEARTBEAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_secondary_heartbeat_unpack(spark_secondary_heartbeat_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from SECONDARY_HEARTBEAT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_secondary_heartbeat_init(spark_secondary_heartbeat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_secondary_heartbeat_enabled_sparks_bitfield_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_secondary_heartbeat_enabled_sparks_bitfield_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_secondary_heartbeat_enabled_sparks_bitfield_is_in_range(
    uint64_t value);

/**
 * Pack message USB_ONLY_IDENTIFY.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_usb_only_identify_pack(uint8_t *dst_p,
                                 const spark_usb_only_identify_t *src_p,
                                 size_t size);

/**
 * Unpack message USB_ONLY_IDENTIFY.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_usb_only_identify_unpack(spark_usb_only_identify_t *dst_p,
                                   const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from USB_ONLY_IDENTIFY.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_usb_only_identify_init(spark_usb_only_identify_t *msg_p);

/**
 * Pack message USB_ONLY_ENTER_DFU_BOOTLOADER.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_usb_only_enter_dfu_bootloader_pack(
    uint8_t *dst_p, const spark_usb_only_enter_dfu_bootloader_t *src_p,
    size_t size);

/**
 * Unpack message USB_ONLY_ENTER_DFU_BOOTLOADER.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_usb_only_enter_dfu_bootloader_unpack(
    spark_usb_only_enter_dfu_bootloader_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from USB_ONLY_ENTER_DFU_BOOTLOADER.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_usb_only_enter_dfu_bootloader_init(
    spark_usb_only_enter_dfu_bootloader_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_usb_only_enter_dfu_bootloader_magic_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_usb_only_enter_dfu_bootloader_magic_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_usb_only_enter_dfu_bootloader_magic_number_is_in_range(
    uint16_t value);

/**
 * Pack message GET_TEMPERATURES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_temperatures_pack(uint8_t *dst_p,
                                const spark_get_temperatures_t *src_p,
                                size_t size);

/**
 * Unpack message GET_TEMPERATURES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_temperatures_unpack(spark_get_temperatures_t *dst_p,
                                  const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from GET_TEMPERATURES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_temperatures_init(spark_get_temperatures_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_motor_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_motor_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_microcontroller_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_microcontroller_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_microcontroller_temperature_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_fet_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_fet_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_fet_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_motor_temperature_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_motor_temperature_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_motor_temperature_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_dock_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_dock_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_dock_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_reserved_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_reserved_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_reserved_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_reserved_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_reserved_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_reserved_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_valid_temperatures_bitmask_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_valid_temperatures_bitmask_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_valid_temperatures_bitmask_is_in_range(
    uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_temperatures_unused_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_temperatures_unused_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_temperatures_unused_is_in_range(uint8_t value);

/**
 * Pack message GET_MOTOR_INTERFACE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_motor_interface_pack(uint8_t *dst_p,
                                   const spark_get_motor_interface_t *src_p,
                                   size_t size);

/**
 * Unpack message GET_MOTOR_INTERFACE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_motor_interface_unpack(spark_get_motor_interface_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from GET_MOTOR_INTERFACE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_motor_interface_init(spark_get_motor_interface_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_get_motor_interface_motor_interface_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_motor_interface_motor_interface_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_motor_interface_motor_interface_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_motor_interface_primary_sensor_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_motor_interface_primary_sensor_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_motor_interface_primary_sensor_type_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_0_TO_15_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_0_to_15_types_pack(
    uint8_t *dst_p, const spark_get_parameter_0_to_15_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_0_TO_15_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_0_to_15_types_unpack(
    spark_get_parameter_0_to_15_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_0_TO_15_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_0_to_15_types_init(
    spark_get_parameter_0_to_15_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_0_to_15_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_0_to_15_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_0_to_15_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_16_TO_31_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_16_to_31_types_pack(
    uint8_t *dst_p, const spark_get_parameter_16_to_31_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_16_TO_31_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_16_to_31_types_unpack(
    spark_get_parameter_16_to_31_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_16_TO_31_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_16_to_31_types_init(
    spark_get_parameter_16_to_31_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_16_to_31_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_16_to_31_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_16_to_31_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_32_TO_47_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_32_to_47_types_pack(
    uint8_t *dst_p, const spark_get_parameter_32_to_47_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_32_TO_47_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_32_to_47_types_unpack(
    spark_get_parameter_32_to_47_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_32_TO_47_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_32_to_47_types_init(
    spark_get_parameter_32_to_47_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_32_to_47_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_32_to_47_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_32_to_47_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_48_TO_63_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_48_to_63_types_pack(
    uint8_t *dst_p, const spark_get_parameter_48_to_63_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_48_TO_63_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_48_to_63_types_unpack(
    spark_get_parameter_48_to_63_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_48_TO_63_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_48_to_63_types_init(
    spark_get_parameter_48_to_63_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_48_to_63_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_48_to_63_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_48_to_63_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_64_TO_79_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_64_to_79_types_pack(
    uint8_t *dst_p, const spark_get_parameter_64_to_79_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_64_TO_79_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_64_to_79_types_unpack(
    spark_get_parameter_64_to_79_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_64_TO_79_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_64_to_79_types_init(
    spark_get_parameter_64_to_79_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_64_to_79_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_64_to_79_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_64_to_79_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_80_TO_95_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_80_to_95_types_pack(
    uint8_t *dst_p, const spark_get_parameter_80_to_95_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_80_TO_95_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_80_to_95_types_unpack(
    spark_get_parameter_80_to_95_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_80_TO_95_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_80_to_95_types_init(
    spark_get_parameter_80_to_95_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_80_to_95_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_80_to_95_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_80_to_95_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_96_TO_111_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_96_to_111_types_pack(
    uint8_t *dst_p, const spark_get_parameter_96_to_111_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_96_TO_111_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_96_to_111_types_unpack(
    spark_get_parameter_96_to_111_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_96_TO_111_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_96_to_111_types_init(
    spark_get_parameter_96_to_111_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_96_to_111_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_96_to_111_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_96_to_111_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_112_TO_127_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_112_to_127_types_pack(
    uint8_t *dst_p, const spark_get_parameter_112_to_127_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_112_TO_127_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_112_to_127_types_unpack(
    spark_get_parameter_112_to_127_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_112_TO_127_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_112_to_127_types_init(
    spark_get_parameter_112_to_127_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_112_to_127_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_112_to_127_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_112_to_127_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_128_TO_143_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_128_to_143_types_pack(
    uint8_t *dst_p, const spark_get_parameter_128_to_143_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_128_TO_143_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_128_to_143_types_unpack(
    spark_get_parameter_128_to_143_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_128_TO_143_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_128_to_143_types_init(
    spark_get_parameter_128_to_143_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_128_to_143_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_128_to_143_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_128_to_143_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_144_TO_159_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_144_to_159_types_pack(
    uint8_t *dst_p, const spark_get_parameter_144_to_159_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_144_TO_159_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_144_to_159_types_unpack(
    spark_get_parameter_144_to_159_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_144_TO_159_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_144_to_159_types_init(
    spark_get_parameter_144_to_159_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_144_to_159_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_144_to_159_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_144_to_159_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_160_TO_175_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_160_to_175_types_pack(
    uint8_t *dst_p, const spark_get_parameter_160_to_175_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_160_TO_175_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_160_to_175_types_unpack(
    spark_get_parameter_160_to_175_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_160_TO_175_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_160_to_175_types_init(
    spark_get_parameter_160_to_175_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_160_to_175_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_160_to_175_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_160_to_175_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_176_TO_191_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_176_to_191_types_pack(
    uint8_t *dst_p, const spark_get_parameter_176_to_191_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_176_TO_191_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_176_to_191_types_unpack(
    spark_get_parameter_176_to_191_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_176_TO_191_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_176_to_191_types_init(
    spark_get_parameter_176_to_191_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_176_to_191_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_176_to_191_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_176_to_191_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_192_TO_207_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_192_to_207_types_pack(
    uint8_t *dst_p, const spark_get_parameter_192_to_207_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_192_TO_207_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_192_to_207_types_unpack(
    spark_get_parameter_192_to_207_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_192_TO_207_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_192_to_207_types_init(
    spark_get_parameter_192_to_207_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_192_to_207_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_192_to_207_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_192_to_207_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_208_TO_223_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_208_to_223_types_pack(
    uint8_t *dst_p, const spark_get_parameter_208_to_223_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_208_TO_223_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_208_to_223_types_unpack(
    spark_get_parameter_208_to_223_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_208_TO_223_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_208_to_223_types_init(
    spark_get_parameter_208_to_223_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_208_to_223_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_208_to_223_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_208_to_223_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_224_TO_239_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_224_to_239_types_pack(
    uint8_t *dst_p, const spark_get_parameter_224_to_239_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_224_TO_239_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_224_to_239_types_unpack(
    spark_get_parameter_224_to_239_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_224_TO_239_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_224_to_239_types_init(
    spark_get_parameter_224_to_239_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_224_to_239_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_224_to_239_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_224_to_239_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_240_TO_255_TYPES.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_240_to_255_types_pack(
    uint8_t *dst_p, const spark_get_parameter_240_to_255_types_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_240_TO_255_TYPES.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_240_to_255_types_unpack(
    spark_get_parameter_240_to_255_types_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_240_TO_255_TYPES.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_240_to_255_types_init(
    spark_get_parameter_240_to_255_types_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_0_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_0_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_240_to_255_types_type_15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_240_to_255_types_type_15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_240_to_255_types_type_15_is_in_range(uint8_t value);

/**
 * Pack message PARAMETER_WRITE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameter_write_pack(uint8_t *dst_p,
                               const spark_parameter_write_t *src_p,
                               size_t size);

/**
 * Unpack message PARAMETER_WRITE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameter_write_unpack(spark_parameter_write_t *dst_p,
                                 const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from PARAMETER_WRITE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameter_write_init(spark_parameter_write_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_parameter_write_parameter_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_parameter_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_parameter_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_parameter_write_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_value_is_in_range(uint32_t value);

/**
 * Pack message PARAMETER_WRITE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameter_write_response_pack(
    uint8_t *dst_p, const spark_parameter_write_response_t *src_p, size_t size);

/**
 * Unpack message PARAMETER_WRITE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameter_write_response_unpack(
    spark_parameter_write_response_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from PARAMETER_WRITE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameter_write_response_init(
    spark_parameter_write_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_parameter_write_response_parameter_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_response_parameter_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_response_parameter_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_parameter_write_response_parameter_type_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_response_parameter_type_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_response_parameter_type_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_parameter_write_response_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_response_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_response_value_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_parameter_write_response_result_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameter_write_response_result_code_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameter_write_response_result_code_is_in_range(uint8_t value);

/**
 * Pack message PARAMETERS_0_TO_64_CHANGED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameters_0_to_64_changed_pack(
    uint8_t *dst_p, const spark_parameters_0_to_64_changed_t *src_p,
    size_t size);

/**
 * Unpack message PARAMETERS_0_TO_64_CHANGED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameters_0_to_64_changed_unpack(
    spark_parameters_0_to_64_changed_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PARAMETERS_0_TO_64_CHANGED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameters_0_to_64_changed_init(
    spark_parameters_0_to_64_changed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_parameters_0_to_64_changed_changed_parameters_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameters_0_to_64_changed_changed_parameters_bitfield_decode(
    uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameters_0_to_64_changed_changed_parameters_bitfield_is_in_range(
    uint64_t value);

/**
 * Pack message PARAMETERS_64_TO_128_CHANGED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameters_64_to_128_changed_pack(
    uint8_t *dst_p, const spark_parameters_64_to_128_changed_t *src_p,
    size_t size);

/**
 * Unpack message PARAMETERS_64_TO_128_CHANGED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameters_64_to_128_changed_unpack(
    spark_parameters_64_to_128_changed_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PARAMETERS_64_TO_128_CHANGED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameters_64_to_128_changed_init(
    spark_parameters_64_to_128_changed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_parameters_64_to_128_changed_changed_parameters_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameters_64_to_128_changed_changed_parameters_bitfield_decode(
    uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameters_64_to_128_changed_changed_parameters_bitfield_is_in_range(
    uint64_t value);

/**
 * Pack message PARAMETERS_128_TO_192_CHANGED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameters_128_to_192_changed_pack(
    uint8_t *dst_p, const spark_parameters_128_to_192_changed_t *src_p,
    size_t size);

/**
 * Unpack message PARAMETERS_128_TO_192_CHANGED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameters_128_to_192_changed_unpack(
    spark_parameters_128_to_192_changed_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PARAMETERS_128_TO_192_CHANGED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameters_128_to_192_changed_init(
    spark_parameters_128_to_192_changed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_parameters_128_to_192_changed_changed_parameters_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameters_128_to_192_changed_changed_parameters_bitfield_decode(
    uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameters_128_to_192_changed_changed_parameters_bitfield_is_in_range(
    uint64_t value);

/**
 * Pack message PARAMETERS_192_TO_256_CHANGED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_parameters_192_to_256_changed_pack(
    uint8_t *dst_p, const spark_parameters_192_to_256_changed_t *src_p,
    size_t size);

/**
 * Unpack message PARAMETERS_192_TO_256_CHANGED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_parameters_192_to_256_changed_unpack(
    spark_parameters_192_to_256_changed_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PARAMETERS_192_TO_256_CHANGED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_parameters_192_to_256_changed_init(
    spark_parameters_192_to_256_changed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t spark_parameters_192_to_256_changed_changed_parameters_bitfield_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_parameters_192_to_256_changed_changed_parameters_bitfield_decode(
    uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_parameters_192_to_256_changed_changed_parameters_bitfield_is_in_range(
    uint64_t value);

/**
 * Pack message GET_PARAMETER_RANGE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_range_pack(uint8_t *dst_p,
                                   const spark_get_parameter_range_t *src_p,
                                   size_t size);

/**
 * Unpack message GET_PARAMETER_RANGE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_range_unpack(spark_get_parameter_range_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_RANGE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_range_init(spark_get_parameter_range_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_parameter_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_parameter_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_parameter_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_get_min_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_get_min_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_get_min_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_reserved_is_in_range(uint8_t value);

/**
 * Pack message GET_PARAMETER_RANGE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_get_parameter_range_response_pack(
    uint8_t *dst_p, const spark_get_parameter_range_response_t *src_p,
    size_t size);

/**
 * Unpack message GET_PARAMETER_RANGE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_get_parameter_range_response_unpack(
    spark_get_parameter_range_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GET_PARAMETER_RANGE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_get_parameter_range_response_init(
    spark_get_parameter_range_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_response_parameter_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_response_parameter_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_response_parameter_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_response_is_min_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_response_is_min_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_response_is_min_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_get_parameter_range_response_value_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_response_value_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_response_value_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_get_parameter_range_response_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_get_parameter_range_response_reserved_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_get_parameter_range_response_reserved_is_in_range(uint8_t value);

/**
 * Pack message READ_PARAMETER_0_AND_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_0_and_1_pack(
    uint8_t *dst_p, const spark_read_parameter_0_and_1_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_0_AND_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_0_and_1_unpack(spark_read_parameter_0_and_1_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_0_AND_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_0_and_1_init(spark_read_parameter_0_and_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_0_and_1_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_0_and_1_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_0_and_1_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_0_and_1_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_0_and_1_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_0_and_1_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_2_AND_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_2_and_3_pack(
    uint8_t *dst_p, const spark_read_parameter_2_and_3_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_2_AND_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_2_and_3_unpack(spark_read_parameter_2_and_3_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_2_AND_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_2_and_3_init(spark_read_parameter_2_and_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_2_and_3_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_2_and_3_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_2_and_3_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_2_and_3_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_2_and_3_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_2_and_3_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_4_AND_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_4_and_5_pack(
    uint8_t *dst_p, const spark_read_parameter_4_and_5_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_4_AND_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_4_and_5_unpack(spark_read_parameter_4_and_5_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_4_AND_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_4_and_5_init(spark_read_parameter_4_and_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_4_and_5_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_4_and_5_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_4_and_5_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_4_and_5_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_4_and_5_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_4_and_5_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_6_AND_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_6_and_7_pack(
    uint8_t *dst_p, const spark_read_parameter_6_and_7_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_6_AND_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_6_and_7_unpack(spark_read_parameter_6_and_7_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_6_AND_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_6_and_7_init(spark_read_parameter_6_and_7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_6_and_7_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_6_and_7_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_6_and_7_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_6_and_7_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_6_and_7_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_6_and_7_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_8_AND_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_8_and_9_pack(
    uint8_t *dst_p, const spark_read_parameter_8_and_9_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_8_AND_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_8_and_9_unpack(spark_read_parameter_8_and_9_t *dst_p,
                                        const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_8_AND_9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_8_and_9_init(spark_read_parameter_8_and_9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_8_and_9_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_8_and_9_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_8_and_9_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_8_and_9_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_8_and_9_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_8_and_9_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_10_AND_11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_10_and_11_pack(
    uint8_t *dst_p, const spark_read_parameter_10_and_11_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_10_AND_11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_10_and_11_unpack(
    spark_read_parameter_10_and_11_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_10_AND_11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_10_and_11_init(
    spark_read_parameter_10_and_11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_10_and_11_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_10_and_11_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_10_and_11_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_10_and_11_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_10_and_11_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_10_and_11_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_12_AND_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_12_and_13_pack(
    uint8_t *dst_p, const spark_read_parameter_12_and_13_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_12_AND_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_12_and_13_unpack(
    spark_read_parameter_12_and_13_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_12_AND_13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_12_and_13_init(
    spark_read_parameter_12_and_13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_12_and_13_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_12_and_13_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_12_and_13_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_12_and_13_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_12_and_13_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_12_and_13_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_14_AND_15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_14_and_15_pack(
    uint8_t *dst_p, const spark_read_parameter_14_and_15_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_14_AND_15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_14_and_15_unpack(
    spark_read_parameter_14_and_15_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_14_AND_15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_14_and_15_init(
    spark_read_parameter_14_and_15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_14_and_15_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_14_and_15_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_14_and_15_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_14_and_15_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_14_and_15_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_14_and_15_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_16_AND_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_16_and_17_pack(
    uint8_t *dst_p, const spark_read_parameter_16_and_17_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_16_AND_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_16_and_17_unpack(
    spark_read_parameter_16_and_17_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_16_AND_17.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_16_and_17_init(
    spark_read_parameter_16_and_17_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_16_and_17_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_16_and_17_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_16_and_17_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_16_and_17_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_16_and_17_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_16_and_17_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_18_AND_19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_18_and_19_pack(
    uint8_t *dst_p, const spark_read_parameter_18_and_19_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_18_AND_19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_18_and_19_unpack(
    spark_read_parameter_18_and_19_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_18_AND_19.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_18_and_19_init(
    spark_read_parameter_18_and_19_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_18_and_19_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_18_and_19_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_18_and_19_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_18_and_19_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_18_and_19_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_18_and_19_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_20_AND_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_20_and_21_pack(
    uint8_t *dst_p, const spark_read_parameter_20_and_21_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_20_AND_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_20_and_21_unpack(
    spark_read_parameter_20_and_21_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_20_AND_21.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_20_and_21_init(
    spark_read_parameter_20_and_21_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_20_and_21_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_20_and_21_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_20_and_21_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_20_and_21_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_20_and_21_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_20_and_21_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_22_AND_23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_22_and_23_pack(
    uint8_t *dst_p, const spark_read_parameter_22_and_23_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_22_AND_23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_22_and_23_unpack(
    spark_read_parameter_22_and_23_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_22_AND_23.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_22_and_23_init(
    spark_read_parameter_22_and_23_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_22_and_23_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_22_and_23_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_22_and_23_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_22_and_23_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_22_and_23_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_22_and_23_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_24_AND_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_24_and_25_pack(
    uint8_t *dst_p, const spark_read_parameter_24_and_25_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_24_AND_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_24_and_25_unpack(
    spark_read_parameter_24_and_25_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_24_AND_25.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_24_and_25_init(
    spark_read_parameter_24_and_25_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_24_and_25_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_24_and_25_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_24_and_25_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_24_and_25_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_24_and_25_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_24_and_25_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_26_AND_27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_26_and_27_pack(
    uint8_t *dst_p, const spark_read_parameter_26_and_27_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_26_AND_27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_26_and_27_unpack(
    spark_read_parameter_26_and_27_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_26_AND_27.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_26_and_27_init(
    spark_read_parameter_26_and_27_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_26_and_27_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_26_and_27_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_26_and_27_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_26_and_27_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_26_and_27_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_26_and_27_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_28_AND_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_28_and_29_pack(
    uint8_t *dst_p, const spark_read_parameter_28_and_29_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_28_AND_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_28_and_29_unpack(
    spark_read_parameter_28_and_29_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_28_AND_29.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_28_and_29_init(
    spark_read_parameter_28_and_29_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_28_and_29_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_28_and_29_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_28_and_29_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_28_and_29_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_28_and_29_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_28_and_29_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_30_AND_31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_30_and_31_pack(
    uint8_t *dst_p, const spark_read_parameter_30_and_31_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_30_AND_31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_30_and_31_unpack(
    spark_read_parameter_30_and_31_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_30_AND_31.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_30_and_31_init(
    spark_read_parameter_30_and_31_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_30_and_31_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_30_and_31_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_30_and_31_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_30_and_31_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_30_and_31_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_30_and_31_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_32_AND_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_32_and_33_pack(
    uint8_t *dst_p, const spark_read_parameter_32_and_33_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_32_AND_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_32_and_33_unpack(
    spark_read_parameter_32_and_33_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_32_AND_33.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_32_and_33_init(
    spark_read_parameter_32_and_33_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_32_and_33_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_32_and_33_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_32_and_33_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_32_and_33_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_32_and_33_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_32_and_33_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_34_AND_35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_34_and_35_pack(
    uint8_t *dst_p, const spark_read_parameter_34_and_35_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_34_AND_35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_34_and_35_unpack(
    spark_read_parameter_34_and_35_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_34_AND_35.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_34_and_35_init(
    spark_read_parameter_34_and_35_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_34_and_35_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_34_and_35_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_34_and_35_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_34_and_35_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_34_and_35_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_34_and_35_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_36_AND_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_36_and_37_pack(
    uint8_t *dst_p, const spark_read_parameter_36_and_37_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_36_AND_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_36_and_37_unpack(
    spark_read_parameter_36_and_37_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_36_AND_37.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_36_and_37_init(
    spark_read_parameter_36_and_37_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_36_and_37_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_36_and_37_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_36_and_37_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_36_and_37_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_36_and_37_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_36_and_37_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_38_AND_39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_38_and_39_pack(
    uint8_t *dst_p, const spark_read_parameter_38_and_39_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_38_AND_39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_38_and_39_unpack(
    spark_read_parameter_38_and_39_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_38_AND_39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_38_and_39_init(
    spark_read_parameter_38_and_39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_38_and_39_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_38_and_39_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_38_and_39_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_38_and_39_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_38_and_39_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_38_and_39_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_40_AND_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_40_and_41_pack(
    uint8_t *dst_p, const spark_read_parameter_40_and_41_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_40_AND_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_40_and_41_unpack(
    spark_read_parameter_40_and_41_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_40_AND_41.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_40_and_41_init(
    spark_read_parameter_40_and_41_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_40_and_41_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_40_and_41_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_40_and_41_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_40_and_41_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_40_and_41_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_40_and_41_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_42_AND_43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_42_and_43_pack(
    uint8_t *dst_p, const spark_read_parameter_42_and_43_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_42_AND_43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_42_and_43_unpack(
    spark_read_parameter_42_and_43_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_42_AND_43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_42_and_43_init(
    spark_read_parameter_42_and_43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_42_and_43_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_42_and_43_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_42_and_43_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_42_and_43_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_42_and_43_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_42_and_43_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_44_AND_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_44_and_45_pack(
    uint8_t *dst_p, const spark_read_parameter_44_and_45_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_44_AND_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_44_and_45_unpack(
    spark_read_parameter_44_and_45_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_44_AND_45.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_44_and_45_init(
    spark_read_parameter_44_and_45_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_44_and_45_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_44_and_45_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_44_and_45_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_44_and_45_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_44_and_45_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_44_and_45_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_46_AND_47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_46_and_47_pack(
    uint8_t *dst_p, const spark_read_parameter_46_and_47_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_46_AND_47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_46_and_47_unpack(
    spark_read_parameter_46_and_47_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_46_AND_47.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_46_and_47_init(
    spark_read_parameter_46_and_47_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_46_and_47_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_46_and_47_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_46_and_47_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_46_and_47_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_46_and_47_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_46_and_47_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_48_AND_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_48_and_49_pack(
    uint8_t *dst_p, const spark_read_parameter_48_and_49_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_48_AND_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_48_and_49_unpack(
    spark_read_parameter_48_and_49_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_48_AND_49.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_48_and_49_init(
    spark_read_parameter_48_and_49_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_48_and_49_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_48_and_49_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_48_and_49_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_48_and_49_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_48_and_49_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_48_and_49_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_50_AND_51.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_50_and_51_pack(
    uint8_t *dst_p, const spark_read_parameter_50_and_51_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_50_AND_51.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_50_and_51_unpack(
    spark_read_parameter_50_and_51_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_50_AND_51.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_50_and_51_init(
    spark_read_parameter_50_and_51_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_50_and_51_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_50_and_51_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_50_and_51_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_50_and_51_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_50_and_51_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_50_and_51_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_52_AND_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_52_and_53_pack(
    uint8_t *dst_p, const spark_read_parameter_52_and_53_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_52_AND_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_52_and_53_unpack(
    spark_read_parameter_52_and_53_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_52_AND_53.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_52_and_53_init(
    spark_read_parameter_52_and_53_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_52_and_53_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_52_and_53_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_52_and_53_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_52_and_53_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_52_and_53_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_52_and_53_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_54_AND_55.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_54_and_55_pack(
    uint8_t *dst_p, const spark_read_parameter_54_and_55_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_54_AND_55.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_54_and_55_unpack(
    spark_read_parameter_54_and_55_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_54_AND_55.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_54_and_55_init(
    spark_read_parameter_54_and_55_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_54_and_55_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_54_and_55_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_54_and_55_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_54_and_55_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_54_and_55_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_54_and_55_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_56_AND_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_56_and_57_pack(
    uint8_t *dst_p, const spark_read_parameter_56_and_57_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_56_AND_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_56_and_57_unpack(
    spark_read_parameter_56_and_57_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_56_AND_57.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_56_and_57_init(
    spark_read_parameter_56_and_57_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_56_and_57_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_56_and_57_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_56_and_57_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_56_and_57_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_56_and_57_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_56_and_57_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_58_AND_59.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_58_and_59_pack(
    uint8_t *dst_p, const spark_read_parameter_58_and_59_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_58_AND_59.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_58_and_59_unpack(
    spark_read_parameter_58_and_59_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_58_AND_59.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_58_and_59_init(
    spark_read_parameter_58_and_59_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_58_and_59_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_58_and_59_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_58_and_59_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_58_and_59_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_58_and_59_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_58_and_59_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_60_AND_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_60_and_61_pack(
    uint8_t *dst_p, const spark_read_parameter_60_and_61_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_60_AND_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_60_and_61_unpack(
    spark_read_parameter_60_and_61_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_60_AND_61.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_60_and_61_init(
    spark_read_parameter_60_and_61_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_60_and_61_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_60_and_61_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_60_and_61_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_60_and_61_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_60_and_61_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_60_and_61_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_62_AND_63.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_62_and_63_pack(
    uint8_t *dst_p, const spark_read_parameter_62_and_63_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_62_AND_63.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_62_and_63_unpack(
    spark_read_parameter_62_and_63_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_62_AND_63.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_62_and_63_init(
    spark_read_parameter_62_and_63_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_62_and_63_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_62_and_63_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_62_and_63_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_62_and_63_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_62_and_63_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_62_and_63_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_64_AND_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_64_and_65_pack(
    uint8_t *dst_p, const spark_read_parameter_64_and_65_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_64_AND_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_64_and_65_unpack(
    spark_read_parameter_64_and_65_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_64_AND_65.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_64_and_65_init(
    spark_read_parameter_64_and_65_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_64_and_65_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_64_and_65_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_64_and_65_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_64_and_65_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_64_and_65_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_64_and_65_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_66_AND_67.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_66_and_67_pack(
    uint8_t *dst_p, const spark_read_parameter_66_and_67_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_66_AND_67.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_66_and_67_unpack(
    spark_read_parameter_66_and_67_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_66_AND_67.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_66_and_67_init(
    spark_read_parameter_66_and_67_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_66_and_67_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_66_and_67_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_66_and_67_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_66_and_67_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_66_and_67_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_66_and_67_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_68_AND_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_68_and_69_pack(
    uint8_t *dst_p, const spark_read_parameter_68_and_69_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_68_AND_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_68_and_69_unpack(
    spark_read_parameter_68_and_69_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_68_AND_69.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_68_and_69_init(
    spark_read_parameter_68_and_69_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_68_and_69_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_68_and_69_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_68_and_69_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_68_and_69_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_68_and_69_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_68_and_69_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_70_AND_71.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_70_and_71_pack(
    uint8_t *dst_p, const spark_read_parameter_70_and_71_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_70_AND_71.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_70_and_71_unpack(
    spark_read_parameter_70_and_71_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_70_AND_71.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_70_and_71_init(
    spark_read_parameter_70_and_71_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_70_and_71_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_70_and_71_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_70_and_71_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_70_and_71_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_70_and_71_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_70_and_71_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_72_AND_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_72_and_73_pack(
    uint8_t *dst_p, const spark_read_parameter_72_and_73_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_72_AND_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_72_and_73_unpack(
    spark_read_parameter_72_and_73_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_72_AND_73.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_72_and_73_init(
    spark_read_parameter_72_and_73_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_72_and_73_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_72_and_73_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_72_and_73_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_72_and_73_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_72_and_73_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_72_and_73_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_74_AND_75.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_74_and_75_pack(
    uint8_t *dst_p, const spark_read_parameter_74_and_75_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_74_AND_75.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_74_and_75_unpack(
    spark_read_parameter_74_and_75_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_74_AND_75.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_74_and_75_init(
    spark_read_parameter_74_and_75_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_74_and_75_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_74_and_75_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_74_and_75_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_74_and_75_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_74_and_75_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_74_and_75_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_76_AND_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_76_and_77_pack(
    uint8_t *dst_p, const spark_read_parameter_76_and_77_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_76_AND_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_76_and_77_unpack(
    spark_read_parameter_76_and_77_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_76_AND_77.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_76_and_77_init(
    spark_read_parameter_76_and_77_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_76_and_77_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_76_and_77_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_76_and_77_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_76_and_77_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_76_and_77_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_76_and_77_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_78_AND_79.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_78_and_79_pack(
    uint8_t *dst_p, const spark_read_parameter_78_and_79_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_78_AND_79.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_78_and_79_unpack(
    spark_read_parameter_78_and_79_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_78_AND_79.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_78_and_79_init(
    spark_read_parameter_78_and_79_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_78_and_79_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_78_and_79_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_78_and_79_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_78_and_79_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_78_and_79_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_78_and_79_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_80_AND_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_80_and_81_pack(
    uint8_t *dst_p, const spark_read_parameter_80_and_81_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_80_AND_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_80_and_81_unpack(
    spark_read_parameter_80_and_81_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_80_AND_81.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_80_and_81_init(
    spark_read_parameter_80_and_81_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_80_and_81_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_80_and_81_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_80_and_81_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_80_and_81_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_80_and_81_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_80_and_81_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_82_AND_83.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_82_and_83_pack(
    uint8_t *dst_p, const spark_read_parameter_82_and_83_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_82_AND_83.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_82_and_83_unpack(
    spark_read_parameter_82_and_83_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_82_AND_83.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_82_and_83_init(
    spark_read_parameter_82_and_83_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_82_and_83_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_82_and_83_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_82_and_83_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_82_and_83_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_82_and_83_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_82_and_83_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_84_AND_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_84_and_85_pack(
    uint8_t *dst_p, const spark_read_parameter_84_and_85_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_84_AND_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_84_and_85_unpack(
    spark_read_parameter_84_and_85_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_84_AND_85.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_84_and_85_init(
    spark_read_parameter_84_and_85_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_84_and_85_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_84_and_85_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_84_and_85_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_84_and_85_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_84_and_85_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_84_and_85_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_86_AND_87.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_86_and_87_pack(
    uint8_t *dst_p, const spark_read_parameter_86_and_87_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_86_AND_87.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_86_and_87_unpack(
    spark_read_parameter_86_and_87_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_86_AND_87.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_86_and_87_init(
    spark_read_parameter_86_and_87_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_86_and_87_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_86_and_87_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_86_and_87_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_86_and_87_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_86_and_87_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_86_and_87_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_88_AND_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_88_and_89_pack(
    uint8_t *dst_p, const spark_read_parameter_88_and_89_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_88_AND_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_88_and_89_unpack(
    spark_read_parameter_88_and_89_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_88_AND_89.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_88_and_89_init(
    spark_read_parameter_88_and_89_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_88_and_89_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_88_and_89_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_88_and_89_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_88_and_89_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_88_and_89_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_88_and_89_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_90_AND_91.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_90_and_91_pack(
    uint8_t *dst_p, const spark_read_parameter_90_and_91_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_90_AND_91.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_90_and_91_unpack(
    spark_read_parameter_90_and_91_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_90_AND_91.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_90_and_91_init(
    spark_read_parameter_90_and_91_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_90_and_91_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_90_and_91_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_90_and_91_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_90_and_91_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_90_and_91_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_90_and_91_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_92_AND_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_92_and_93_pack(
    uint8_t *dst_p, const spark_read_parameter_92_and_93_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_92_AND_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_92_and_93_unpack(
    spark_read_parameter_92_and_93_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_92_AND_93.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_92_and_93_init(
    spark_read_parameter_92_and_93_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_92_and_93_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_92_and_93_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_92_and_93_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_92_and_93_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_92_and_93_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_92_and_93_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_94_AND_95.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_94_and_95_pack(
    uint8_t *dst_p, const spark_read_parameter_94_and_95_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_94_AND_95.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_94_and_95_unpack(
    spark_read_parameter_94_and_95_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_94_AND_95.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_94_and_95_init(
    spark_read_parameter_94_and_95_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_94_and_95_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_94_and_95_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_94_and_95_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_94_and_95_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_94_and_95_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_94_and_95_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_96_AND_97.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_96_and_97_pack(
    uint8_t *dst_p, const spark_read_parameter_96_and_97_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_96_AND_97.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_96_and_97_unpack(
    spark_read_parameter_96_and_97_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_96_AND_97.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_96_and_97_init(
    spark_read_parameter_96_and_97_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_96_and_97_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_96_and_97_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_96_and_97_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_96_and_97_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_96_and_97_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_96_and_97_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_98_AND_99.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_98_and_99_pack(
    uint8_t *dst_p, const spark_read_parameter_98_and_99_t *src_p, size_t size);

/**
 * Unpack message READ_PARAMETER_98_AND_99.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_98_and_99_unpack(
    spark_read_parameter_98_and_99_t *dst_p, const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_98_AND_99.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_98_and_99_init(
    spark_read_parameter_98_and_99_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_98_and_99_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_98_and_99_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_98_and_99_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_98_and_99_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_98_and_99_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_98_and_99_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_100_AND_101.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_100_and_101_pack(
    uint8_t *dst_p, const spark_read_parameter_100_and_101_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_100_AND_101.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_100_and_101_unpack(
    spark_read_parameter_100_and_101_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_100_AND_101.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_100_and_101_init(
    spark_read_parameter_100_and_101_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_100_and_101_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_100_and_101_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_100_and_101_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_100_and_101_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_100_and_101_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_100_and_101_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_102_AND_103.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_102_and_103_pack(
    uint8_t *dst_p, const spark_read_parameter_102_and_103_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_102_AND_103.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_102_and_103_unpack(
    spark_read_parameter_102_and_103_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_102_AND_103.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_102_and_103_init(
    spark_read_parameter_102_and_103_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_102_and_103_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_102_and_103_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_102_and_103_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_102_and_103_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_102_and_103_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_102_and_103_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_104_AND_105.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_104_and_105_pack(
    uint8_t *dst_p, const spark_read_parameter_104_and_105_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_104_AND_105.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_104_and_105_unpack(
    spark_read_parameter_104_and_105_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_104_AND_105.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_104_and_105_init(
    spark_read_parameter_104_and_105_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_104_and_105_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_104_and_105_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_104_and_105_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_104_and_105_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_104_and_105_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_104_and_105_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_106_AND_107.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_106_and_107_pack(
    uint8_t *dst_p, const spark_read_parameter_106_and_107_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_106_AND_107.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_106_and_107_unpack(
    spark_read_parameter_106_and_107_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_106_AND_107.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_106_and_107_init(
    spark_read_parameter_106_and_107_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_106_and_107_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_106_and_107_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_106_and_107_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_106_and_107_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_106_and_107_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_106_and_107_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_108_AND_109.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_108_and_109_pack(
    uint8_t *dst_p, const spark_read_parameter_108_and_109_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_108_AND_109.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_108_and_109_unpack(
    spark_read_parameter_108_and_109_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_108_AND_109.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_108_and_109_init(
    spark_read_parameter_108_and_109_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_108_and_109_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_108_and_109_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_108_and_109_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_108_and_109_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_108_and_109_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_108_and_109_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_110_AND_111.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_110_and_111_pack(
    uint8_t *dst_p, const spark_read_parameter_110_and_111_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_110_AND_111.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_110_and_111_unpack(
    spark_read_parameter_110_and_111_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_110_AND_111.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_110_and_111_init(
    spark_read_parameter_110_and_111_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_110_and_111_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_110_and_111_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_110_and_111_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_110_and_111_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_110_and_111_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_110_and_111_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_112_AND_113.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_112_and_113_pack(
    uint8_t *dst_p, const spark_read_parameter_112_and_113_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_112_AND_113.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_112_and_113_unpack(
    spark_read_parameter_112_and_113_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_112_AND_113.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_112_and_113_init(
    spark_read_parameter_112_and_113_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_112_and_113_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_112_and_113_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_112_and_113_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_112_and_113_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_112_and_113_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_112_and_113_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_114_AND_115.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_114_and_115_pack(
    uint8_t *dst_p, const spark_read_parameter_114_and_115_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_114_AND_115.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_114_and_115_unpack(
    spark_read_parameter_114_and_115_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_114_AND_115.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_114_and_115_init(
    spark_read_parameter_114_and_115_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_114_and_115_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_114_and_115_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_114_and_115_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_114_and_115_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_114_and_115_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_114_and_115_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_116_AND_117.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_116_and_117_pack(
    uint8_t *dst_p, const spark_read_parameter_116_and_117_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_116_AND_117.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_116_and_117_unpack(
    spark_read_parameter_116_and_117_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_116_AND_117.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_116_and_117_init(
    spark_read_parameter_116_and_117_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_116_and_117_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_116_and_117_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_116_and_117_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_116_and_117_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_116_and_117_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_116_and_117_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_118_AND_119.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_118_and_119_pack(
    uint8_t *dst_p, const spark_read_parameter_118_and_119_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_118_AND_119.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_118_and_119_unpack(
    spark_read_parameter_118_and_119_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_118_AND_119.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_118_and_119_init(
    spark_read_parameter_118_and_119_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_118_and_119_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_118_and_119_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_118_and_119_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_118_and_119_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_118_and_119_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_118_and_119_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_120_AND_121.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_120_and_121_pack(
    uint8_t *dst_p, const spark_read_parameter_120_and_121_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_120_AND_121.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_120_and_121_unpack(
    spark_read_parameter_120_and_121_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_120_AND_121.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_120_and_121_init(
    spark_read_parameter_120_and_121_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_120_and_121_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_120_and_121_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_120_and_121_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_120_and_121_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_120_and_121_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_120_and_121_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_122_AND_123.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_122_and_123_pack(
    uint8_t *dst_p, const spark_read_parameter_122_and_123_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_122_AND_123.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_122_and_123_unpack(
    spark_read_parameter_122_and_123_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_122_AND_123.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_122_and_123_init(
    spark_read_parameter_122_and_123_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_122_and_123_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_122_and_123_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_122_and_123_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_122_and_123_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_122_and_123_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_122_and_123_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_124_AND_125.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_124_and_125_pack(
    uint8_t *dst_p, const spark_read_parameter_124_and_125_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_124_AND_125.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_124_and_125_unpack(
    spark_read_parameter_124_and_125_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_124_AND_125.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_124_and_125_init(
    spark_read_parameter_124_and_125_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_124_and_125_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_124_and_125_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_124_and_125_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_124_and_125_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_124_and_125_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_124_and_125_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_126_AND_127.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_126_and_127_pack(
    uint8_t *dst_p, const spark_read_parameter_126_and_127_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_126_AND_127.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_126_and_127_unpack(
    spark_read_parameter_126_and_127_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_126_AND_127.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_126_and_127_init(
    spark_read_parameter_126_and_127_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_126_and_127_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_126_and_127_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_126_and_127_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_126_and_127_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_126_and_127_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_126_and_127_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_128_AND_129.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_128_and_129_pack(
    uint8_t *dst_p, const spark_read_parameter_128_and_129_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_128_AND_129.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_128_and_129_unpack(
    spark_read_parameter_128_and_129_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_128_AND_129.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_128_and_129_init(
    spark_read_parameter_128_and_129_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_128_and_129_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_128_and_129_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_128_and_129_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_128_and_129_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_128_and_129_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_128_and_129_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_130_AND_131.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_130_and_131_pack(
    uint8_t *dst_p, const spark_read_parameter_130_and_131_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_130_AND_131.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_130_and_131_unpack(
    spark_read_parameter_130_and_131_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_130_AND_131.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_130_and_131_init(
    spark_read_parameter_130_and_131_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_130_and_131_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_130_and_131_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_130_and_131_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_130_and_131_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_130_and_131_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_130_and_131_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_132_AND_133.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_132_and_133_pack(
    uint8_t *dst_p, const spark_read_parameter_132_and_133_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_132_AND_133.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_132_and_133_unpack(
    spark_read_parameter_132_and_133_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_132_AND_133.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_132_and_133_init(
    spark_read_parameter_132_and_133_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_132_and_133_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_132_and_133_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_132_and_133_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_132_and_133_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_132_and_133_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_132_and_133_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_134_AND_135.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_134_and_135_pack(
    uint8_t *dst_p, const spark_read_parameter_134_and_135_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_134_AND_135.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_134_and_135_unpack(
    spark_read_parameter_134_and_135_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_134_AND_135.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_134_and_135_init(
    spark_read_parameter_134_and_135_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_134_and_135_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_134_and_135_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_134_and_135_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_134_and_135_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_134_and_135_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_134_and_135_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_136_AND_137.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_136_and_137_pack(
    uint8_t *dst_p, const spark_read_parameter_136_and_137_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_136_AND_137.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_136_and_137_unpack(
    spark_read_parameter_136_and_137_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_136_AND_137.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_136_and_137_init(
    spark_read_parameter_136_and_137_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_136_and_137_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_136_and_137_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_136_and_137_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_136_and_137_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_136_and_137_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_136_and_137_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_138_AND_139.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_138_and_139_pack(
    uint8_t *dst_p, const spark_read_parameter_138_and_139_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_138_AND_139.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_138_and_139_unpack(
    spark_read_parameter_138_and_139_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_138_AND_139.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_138_and_139_init(
    spark_read_parameter_138_and_139_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_138_and_139_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_138_and_139_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_138_and_139_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_138_and_139_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_138_and_139_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_138_and_139_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_140_AND_141.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_140_and_141_pack(
    uint8_t *dst_p, const spark_read_parameter_140_and_141_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_140_AND_141.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_140_and_141_unpack(
    spark_read_parameter_140_and_141_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_140_AND_141.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_140_and_141_init(
    spark_read_parameter_140_and_141_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_140_and_141_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_140_and_141_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_140_and_141_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_140_and_141_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_140_and_141_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_140_and_141_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_142_AND_143.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_142_and_143_pack(
    uint8_t *dst_p, const spark_read_parameter_142_and_143_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_142_AND_143.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_142_and_143_unpack(
    spark_read_parameter_142_and_143_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_142_AND_143.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_142_and_143_init(
    spark_read_parameter_142_and_143_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_142_and_143_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_142_and_143_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_142_and_143_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_142_and_143_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_142_and_143_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_142_and_143_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_144_AND_145.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_144_and_145_pack(
    uint8_t *dst_p, const spark_read_parameter_144_and_145_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_144_AND_145.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_144_and_145_unpack(
    spark_read_parameter_144_and_145_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_144_AND_145.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_144_and_145_init(
    spark_read_parameter_144_and_145_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_144_and_145_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_144_and_145_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_144_and_145_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_144_and_145_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_144_and_145_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_144_and_145_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_146_AND_147.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_146_and_147_pack(
    uint8_t *dst_p, const spark_read_parameter_146_and_147_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_146_AND_147.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_146_and_147_unpack(
    spark_read_parameter_146_and_147_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_146_AND_147.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_146_and_147_init(
    spark_read_parameter_146_and_147_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_146_and_147_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_146_and_147_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_146_and_147_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_146_and_147_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_146_and_147_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_146_and_147_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_148_AND_149.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_148_and_149_pack(
    uint8_t *dst_p, const spark_read_parameter_148_and_149_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_148_AND_149.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_148_and_149_unpack(
    spark_read_parameter_148_and_149_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_148_AND_149.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_148_and_149_init(
    spark_read_parameter_148_and_149_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_148_and_149_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_148_and_149_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_148_and_149_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_148_and_149_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_148_and_149_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_148_and_149_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_150_AND_151.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_150_and_151_pack(
    uint8_t *dst_p, const spark_read_parameter_150_and_151_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_150_AND_151.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_150_and_151_unpack(
    spark_read_parameter_150_and_151_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_150_AND_151.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_150_and_151_init(
    spark_read_parameter_150_and_151_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_150_and_151_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_150_and_151_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_150_and_151_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_150_and_151_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_150_and_151_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_150_and_151_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_152_AND_153.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_152_and_153_pack(
    uint8_t *dst_p, const spark_read_parameter_152_and_153_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_152_AND_153.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_152_and_153_unpack(
    spark_read_parameter_152_and_153_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_152_AND_153.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_152_and_153_init(
    spark_read_parameter_152_and_153_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_152_and_153_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_152_and_153_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_152_and_153_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_152_and_153_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_152_and_153_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_152_and_153_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_154_AND_155.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_154_and_155_pack(
    uint8_t *dst_p, const spark_read_parameter_154_and_155_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_154_AND_155.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_154_and_155_unpack(
    spark_read_parameter_154_and_155_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_154_AND_155.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_154_and_155_init(
    spark_read_parameter_154_and_155_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_154_and_155_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_154_and_155_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_154_and_155_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_154_and_155_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_154_and_155_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_154_and_155_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_156_AND_157.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_156_and_157_pack(
    uint8_t *dst_p, const spark_read_parameter_156_and_157_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_156_AND_157.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_156_and_157_unpack(
    spark_read_parameter_156_and_157_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_156_AND_157.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_156_and_157_init(
    spark_read_parameter_156_and_157_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_156_and_157_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_156_and_157_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_156_and_157_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_156_and_157_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_156_and_157_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_156_and_157_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_158_AND_159.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_158_and_159_pack(
    uint8_t *dst_p, const spark_read_parameter_158_and_159_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_158_AND_159.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_158_and_159_unpack(
    spark_read_parameter_158_and_159_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_158_AND_159.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_158_and_159_init(
    spark_read_parameter_158_and_159_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_158_and_159_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_158_and_159_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_158_and_159_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_158_and_159_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_158_and_159_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_158_and_159_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_160_AND_161.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_160_and_161_pack(
    uint8_t *dst_p, const spark_read_parameter_160_and_161_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_160_AND_161.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_160_and_161_unpack(
    spark_read_parameter_160_and_161_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_160_AND_161.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_160_and_161_init(
    spark_read_parameter_160_and_161_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_160_and_161_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_160_and_161_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_160_and_161_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_160_and_161_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_160_and_161_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_160_and_161_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_162_AND_163.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_162_and_163_pack(
    uint8_t *dst_p, const spark_read_parameter_162_and_163_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_162_AND_163.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_162_and_163_unpack(
    spark_read_parameter_162_and_163_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_162_AND_163.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_162_and_163_init(
    spark_read_parameter_162_and_163_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_162_and_163_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_162_and_163_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_162_and_163_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_162_and_163_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_162_and_163_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_162_and_163_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_164_AND_165.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_164_and_165_pack(
    uint8_t *dst_p, const spark_read_parameter_164_and_165_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_164_AND_165.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_164_and_165_unpack(
    spark_read_parameter_164_and_165_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_164_AND_165.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_164_and_165_init(
    spark_read_parameter_164_and_165_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_164_and_165_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_164_and_165_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_164_and_165_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_164_and_165_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_164_and_165_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_164_and_165_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_166_AND_167.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_166_and_167_pack(
    uint8_t *dst_p, const spark_read_parameter_166_and_167_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_166_AND_167.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_166_and_167_unpack(
    spark_read_parameter_166_and_167_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_166_AND_167.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_166_and_167_init(
    spark_read_parameter_166_and_167_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_166_and_167_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_166_and_167_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_166_and_167_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_166_and_167_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_166_and_167_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_166_and_167_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_168_AND_169.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_168_and_169_pack(
    uint8_t *dst_p, const spark_read_parameter_168_and_169_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_168_AND_169.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_168_and_169_unpack(
    spark_read_parameter_168_and_169_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_168_AND_169.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_168_and_169_init(
    spark_read_parameter_168_and_169_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_168_and_169_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_168_and_169_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_168_and_169_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_168_and_169_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_168_and_169_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_168_and_169_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_170_AND_171.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_170_and_171_pack(
    uint8_t *dst_p, const spark_read_parameter_170_and_171_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_170_AND_171.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_170_and_171_unpack(
    spark_read_parameter_170_and_171_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_170_AND_171.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_170_and_171_init(
    spark_read_parameter_170_and_171_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_170_and_171_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_170_and_171_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_170_and_171_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_170_and_171_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_170_and_171_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_170_and_171_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_172_AND_173.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_172_and_173_pack(
    uint8_t *dst_p, const spark_read_parameter_172_and_173_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_172_AND_173.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_172_and_173_unpack(
    spark_read_parameter_172_and_173_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_172_AND_173.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_172_and_173_init(
    spark_read_parameter_172_and_173_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_172_and_173_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_172_and_173_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_172_and_173_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_172_and_173_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_172_and_173_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_172_and_173_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_174_AND_175.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_174_and_175_pack(
    uint8_t *dst_p, const spark_read_parameter_174_and_175_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_174_AND_175.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_174_and_175_unpack(
    spark_read_parameter_174_and_175_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_174_AND_175.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_174_and_175_init(
    spark_read_parameter_174_and_175_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_174_and_175_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_174_and_175_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_174_and_175_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_174_and_175_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_174_and_175_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_174_and_175_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_176_AND_177.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_176_and_177_pack(
    uint8_t *dst_p, const spark_read_parameter_176_and_177_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_176_AND_177.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_176_and_177_unpack(
    spark_read_parameter_176_and_177_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_176_AND_177.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_176_and_177_init(
    spark_read_parameter_176_and_177_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_176_and_177_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_176_and_177_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_176_and_177_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_176_and_177_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_176_and_177_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_176_and_177_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_178_AND_179.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_178_and_179_pack(
    uint8_t *dst_p, const spark_read_parameter_178_and_179_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_178_AND_179.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_178_and_179_unpack(
    spark_read_parameter_178_and_179_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_178_AND_179.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_178_and_179_init(
    spark_read_parameter_178_and_179_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_178_and_179_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_178_and_179_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_178_and_179_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_178_and_179_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_178_and_179_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_178_and_179_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_180_AND_181.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_180_and_181_pack(
    uint8_t *dst_p, const spark_read_parameter_180_and_181_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_180_AND_181.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_180_and_181_unpack(
    spark_read_parameter_180_and_181_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_180_AND_181.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_180_and_181_init(
    spark_read_parameter_180_and_181_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_180_and_181_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_180_and_181_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_180_and_181_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_180_and_181_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_180_and_181_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_180_and_181_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_182_AND_183.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_182_and_183_pack(
    uint8_t *dst_p, const spark_read_parameter_182_and_183_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_182_AND_183.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_182_and_183_unpack(
    spark_read_parameter_182_and_183_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_182_AND_183.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_182_and_183_init(
    spark_read_parameter_182_and_183_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_182_and_183_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_182_and_183_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_182_and_183_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_182_and_183_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_182_and_183_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_182_and_183_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_184_AND_185.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_184_and_185_pack(
    uint8_t *dst_p, const spark_read_parameter_184_and_185_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_184_AND_185.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_184_and_185_unpack(
    spark_read_parameter_184_and_185_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_184_AND_185.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_184_and_185_init(
    spark_read_parameter_184_and_185_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_184_and_185_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_184_and_185_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_184_and_185_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_184_and_185_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_184_and_185_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_184_and_185_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_186_AND_187.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_186_and_187_pack(
    uint8_t *dst_p, const spark_read_parameter_186_and_187_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_186_AND_187.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_186_and_187_unpack(
    spark_read_parameter_186_and_187_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_186_AND_187.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_186_and_187_init(
    spark_read_parameter_186_and_187_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_186_and_187_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_186_and_187_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_186_and_187_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_186_and_187_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_186_and_187_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_186_and_187_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_188_AND_189.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_188_and_189_pack(
    uint8_t *dst_p, const spark_read_parameter_188_and_189_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_188_AND_189.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_188_and_189_unpack(
    spark_read_parameter_188_and_189_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_188_AND_189.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_188_and_189_init(
    spark_read_parameter_188_and_189_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_188_and_189_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_188_and_189_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_188_and_189_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_188_and_189_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_188_and_189_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_188_and_189_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_190_AND_191.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_190_and_191_pack(
    uint8_t *dst_p, const spark_read_parameter_190_and_191_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_190_AND_191.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_190_and_191_unpack(
    spark_read_parameter_190_and_191_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_190_AND_191.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_190_and_191_init(
    spark_read_parameter_190_and_191_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_190_and_191_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_190_and_191_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_190_and_191_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_190_and_191_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_190_and_191_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_190_and_191_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_192_AND_193.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_192_and_193_pack(
    uint8_t *dst_p, const spark_read_parameter_192_and_193_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_192_AND_193.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_192_and_193_unpack(
    spark_read_parameter_192_and_193_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_192_AND_193.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_192_and_193_init(
    spark_read_parameter_192_and_193_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_192_and_193_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_192_and_193_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_192_and_193_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_192_and_193_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_192_and_193_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_192_and_193_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_194_AND_195.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_194_and_195_pack(
    uint8_t *dst_p, const spark_read_parameter_194_and_195_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_194_AND_195.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_194_and_195_unpack(
    spark_read_parameter_194_and_195_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_194_AND_195.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_194_and_195_init(
    spark_read_parameter_194_and_195_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_194_and_195_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_194_and_195_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_194_and_195_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_194_and_195_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_194_and_195_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_194_and_195_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_196_AND_197.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_196_and_197_pack(
    uint8_t *dst_p, const spark_read_parameter_196_and_197_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_196_AND_197.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_196_and_197_unpack(
    spark_read_parameter_196_and_197_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_196_AND_197.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_196_and_197_init(
    spark_read_parameter_196_and_197_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_196_and_197_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_196_and_197_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_196_and_197_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_196_and_197_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_196_and_197_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_196_and_197_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_198_AND_199.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_198_and_199_pack(
    uint8_t *dst_p, const spark_read_parameter_198_and_199_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_198_AND_199.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_198_and_199_unpack(
    spark_read_parameter_198_and_199_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_198_AND_199.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_198_and_199_init(
    spark_read_parameter_198_and_199_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_198_and_199_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_198_and_199_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_198_and_199_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_198_and_199_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_198_and_199_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_198_and_199_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_200_AND_201.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_200_and_201_pack(
    uint8_t *dst_p, const spark_read_parameter_200_and_201_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_200_AND_201.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_200_and_201_unpack(
    spark_read_parameter_200_and_201_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_200_AND_201.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_200_and_201_init(
    spark_read_parameter_200_and_201_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_200_and_201_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_200_and_201_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_200_and_201_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_200_and_201_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_200_and_201_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_200_and_201_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_202_AND_203.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_202_and_203_pack(
    uint8_t *dst_p, const spark_read_parameter_202_and_203_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_202_AND_203.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_202_and_203_unpack(
    spark_read_parameter_202_and_203_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_202_AND_203.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_202_and_203_init(
    spark_read_parameter_202_and_203_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_202_and_203_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_202_and_203_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_202_and_203_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_202_and_203_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_202_and_203_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_202_and_203_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_204_AND_205.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_204_and_205_pack(
    uint8_t *dst_p, const spark_read_parameter_204_and_205_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_204_AND_205.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_204_and_205_unpack(
    spark_read_parameter_204_and_205_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_204_AND_205.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_204_and_205_init(
    spark_read_parameter_204_and_205_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_204_and_205_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_204_and_205_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_204_and_205_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_204_and_205_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_204_and_205_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_204_and_205_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_206_AND_207.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_206_and_207_pack(
    uint8_t *dst_p, const spark_read_parameter_206_and_207_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_206_AND_207.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_206_and_207_unpack(
    spark_read_parameter_206_and_207_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_206_AND_207.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_206_and_207_init(
    spark_read_parameter_206_and_207_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_206_and_207_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_206_and_207_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_206_and_207_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_206_and_207_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_206_and_207_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_206_and_207_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_208_AND_209.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_208_and_209_pack(
    uint8_t *dst_p, const spark_read_parameter_208_and_209_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_208_AND_209.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_208_and_209_unpack(
    spark_read_parameter_208_and_209_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_208_AND_209.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_208_and_209_init(
    spark_read_parameter_208_and_209_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_208_and_209_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_208_and_209_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_208_and_209_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_208_and_209_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_208_and_209_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_208_and_209_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_210_AND_211.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_210_and_211_pack(
    uint8_t *dst_p, const spark_read_parameter_210_and_211_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_210_AND_211.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_210_and_211_unpack(
    spark_read_parameter_210_and_211_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_210_AND_211.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_210_and_211_init(
    spark_read_parameter_210_and_211_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_210_and_211_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_210_and_211_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_210_and_211_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_210_and_211_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_210_and_211_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_210_and_211_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_212_AND_213.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_212_and_213_pack(
    uint8_t *dst_p, const spark_read_parameter_212_and_213_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_212_AND_213.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_212_and_213_unpack(
    spark_read_parameter_212_and_213_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_212_AND_213.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_212_and_213_init(
    spark_read_parameter_212_and_213_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_212_and_213_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_212_and_213_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_212_and_213_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_212_and_213_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_212_and_213_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_212_and_213_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_214_AND_215.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_214_and_215_pack(
    uint8_t *dst_p, const spark_read_parameter_214_and_215_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_214_AND_215.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_214_and_215_unpack(
    spark_read_parameter_214_and_215_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_214_AND_215.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_214_and_215_init(
    spark_read_parameter_214_and_215_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_214_and_215_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_214_and_215_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_214_and_215_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_214_and_215_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_214_and_215_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_214_and_215_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_216_AND_217.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_216_and_217_pack(
    uint8_t *dst_p, const spark_read_parameter_216_and_217_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_216_AND_217.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_216_and_217_unpack(
    spark_read_parameter_216_and_217_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_216_AND_217.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_216_and_217_init(
    spark_read_parameter_216_and_217_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_216_and_217_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_216_and_217_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_216_and_217_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_216_and_217_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_216_and_217_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_216_and_217_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_218_AND_219.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_218_and_219_pack(
    uint8_t *dst_p, const spark_read_parameter_218_and_219_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_218_AND_219.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_218_and_219_unpack(
    spark_read_parameter_218_and_219_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_218_AND_219.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_218_and_219_init(
    spark_read_parameter_218_and_219_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_218_and_219_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_218_and_219_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_218_and_219_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_218_and_219_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_218_and_219_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_218_and_219_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_220_AND_221.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_220_and_221_pack(
    uint8_t *dst_p, const spark_read_parameter_220_and_221_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_220_AND_221.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_220_and_221_unpack(
    spark_read_parameter_220_and_221_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_220_AND_221.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_220_and_221_init(
    spark_read_parameter_220_and_221_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_220_and_221_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_220_and_221_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_220_and_221_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_220_and_221_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_220_and_221_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_220_and_221_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_222_AND_223.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_222_and_223_pack(
    uint8_t *dst_p, const spark_read_parameter_222_and_223_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_222_AND_223.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_222_and_223_unpack(
    spark_read_parameter_222_and_223_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_222_AND_223.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_222_and_223_init(
    spark_read_parameter_222_and_223_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_222_and_223_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_222_and_223_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_222_and_223_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_222_and_223_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_222_and_223_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_222_and_223_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_224_AND_225.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_224_and_225_pack(
    uint8_t *dst_p, const spark_read_parameter_224_and_225_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_224_AND_225.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_224_and_225_unpack(
    spark_read_parameter_224_and_225_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_224_AND_225.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_224_and_225_init(
    spark_read_parameter_224_and_225_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_224_and_225_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_224_and_225_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_224_and_225_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_224_and_225_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_224_and_225_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_224_and_225_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_226_AND_227.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_226_and_227_pack(
    uint8_t *dst_p, const spark_read_parameter_226_and_227_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_226_AND_227.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_226_and_227_unpack(
    spark_read_parameter_226_and_227_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_226_AND_227.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_226_and_227_init(
    spark_read_parameter_226_and_227_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_226_and_227_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_226_and_227_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_226_and_227_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_226_and_227_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_226_and_227_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_226_and_227_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_228_AND_229.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_228_and_229_pack(
    uint8_t *dst_p, const spark_read_parameter_228_and_229_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_228_AND_229.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_228_and_229_unpack(
    spark_read_parameter_228_and_229_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_228_AND_229.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_228_and_229_init(
    spark_read_parameter_228_and_229_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_228_and_229_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_228_and_229_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_228_and_229_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_228_and_229_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_228_and_229_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_228_and_229_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_230_AND_231.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_230_and_231_pack(
    uint8_t *dst_p, const spark_read_parameter_230_and_231_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_230_AND_231.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_230_and_231_unpack(
    spark_read_parameter_230_and_231_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_230_AND_231.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_230_and_231_init(
    spark_read_parameter_230_and_231_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_230_and_231_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_230_and_231_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_230_and_231_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_230_and_231_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_230_and_231_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_230_and_231_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_232_AND_233.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_232_and_233_pack(
    uint8_t *dst_p, const spark_read_parameter_232_and_233_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_232_AND_233.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_232_and_233_unpack(
    spark_read_parameter_232_and_233_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_232_AND_233.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_232_and_233_init(
    spark_read_parameter_232_and_233_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_232_and_233_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_232_and_233_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_232_and_233_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_232_and_233_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_232_and_233_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_232_and_233_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_234_AND_235.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_234_and_235_pack(
    uint8_t *dst_p, const spark_read_parameter_234_and_235_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_234_AND_235.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_234_and_235_unpack(
    spark_read_parameter_234_and_235_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_234_AND_235.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_234_and_235_init(
    spark_read_parameter_234_and_235_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_234_and_235_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_234_and_235_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_234_and_235_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_234_and_235_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_234_and_235_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_234_and_235_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_236_AND_237.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_236_and_237_pack(
    uint8_t *dst_p, const spark_read_parameter_236_and_237_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_236_AND_237.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_236_and_237_unpack(
    spark_read_parameter_236_and_237_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_236_AND_237.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_236_and_237_init(
    spark_read_parameter_236_and_237_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_236_and_237_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_236_and_237_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_236_and_237_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_236_and_237_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_236_and_237_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_236_and_237_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_238_AND_239.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_238_and_239_pack(
    uint8_t *dst_p, const spark_read_parameter_238_and_239_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_238_AND_239.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_238_and_239_unpack(
    spark_read_parameter_238_and_239_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_238_AND_239.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_238_and_239_init(
    spark_read_parameter_238_and_239_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_238_and_239_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_238_and_239_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_238_and_239_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_238_and_239_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_238_and_239_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_238_and_239_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_240_AND_241.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_240_and_241_pack(
    uint8_t *dst_p, const spark_read_parameter_240_and_241_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_240_AND_241.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_240_and_241_unpack(
    spark_read_parameter_240_and_241_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_240_AND_241.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_240_and_241_init(
    spark_read_parameter_240_and_241_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_240_and_241_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_240_and_241_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_240_and_241_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_240_and_241_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_240_and_241_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_240_and_241_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_242_AND_243.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_242_and_243_pack(
    uint8_t *dst_p, const spark_read_parameter_242_and_243_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_242_AND_243.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_242_and_243_unpack(
    spark_read_parameter_242_and_243_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_242_AND_243.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_242_and_243_init(
    spark_read_parameter_242_and_243_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_242_and_243_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_242_and_243_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_242_and_243_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_242_and_243_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_242_and_243_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_242_and_243_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_244_AND_245.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_244_and_245_pack(
    uint8_t *dst_p, const spark_read_parameter_244_and_245_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_244_AND_245.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_244_and_245_unpack(
    spark_read_parameter_244_and_245_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_244_AND_245.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_244_and_245_init(
    spark_read_parameter_244_and_245_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_244_and_245_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_244_and_245_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_244_and_245_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_244_and_245_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_244_and_245_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_244_and_245_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_246_AND_247.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_246_and_247_pack(
    uint8_t *dst_p, const spark_read_parameter_246_and_247_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_246_AND_247.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_246_and_247_unpack(
    spark_read_parameter_246_and_247_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_246_AND_247.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_246_and_247_init(
    spark_read_parameter_246_and_247_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_246_and_247_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_246_and_247_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_246_and_247_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_246_and_247_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_246_and_247_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_246_and_247_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_248_AND_249.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_248_and_249_pack(
    uint8_t *dst_p, const spark_read_parameter_248_and_249_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_248_AND_249.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_248_and_249_unpack(
    spark_read_parameter_248_and_249_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_248_AND_249.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_248_and_249_init(
    spark_read_parameter_248_and_249_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_248_and_249_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_248_and_249_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_248_and_249_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_248_and_249_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_248_and_249_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_248_and_249_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_250_AND_251.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_250_and_251_pack(
    uint8_t *dst_p, const spark_read_parameter_250_and_251_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_250_AND_251.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_250_and_251_unpack(
    spark_read_parameter_250_and_251_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_250_AND_251.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_250_and_251_init(
    spark_read_parameter_250_and_251_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_250_and_251_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_250_and_251_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_250_and_251_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_250_and_251_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_250_and_251_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_250_and_251_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_252_AND_253.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_252_and_253_pack(
    uint8_t *dst_p, const spark_read_parameter_252_and_253_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_252_AND_253.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_252_and_253_unpack(
    spark_read_parameter_252_and_253_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_252_AND_253.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_252_and_253_init(
    spark_read_parameter_252_and_253_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_252_and_253_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_252_and_253_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_252_and_253_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_252_and_253_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_252_and_253_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_252_and_253_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message READ_PARAMETER_254_AND_255.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_read_parameter_254_and_255_pack(
    uint8_t *dst_p, const spark_read_parameter_254_and_255_t *src_p,
    size_t size);

/**
 * Unpack message READ_PARAMETER_254_AND_255.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_read_parameter_254_and_255_unpack(
    spark_read_parameter_254_and_255_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from READ_PARAMETER_254_AND_255.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_read_parameter_254_and_255_init(
    spark_read_parameter_254_and_255_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_254_and_255_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_254_and_255_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_254_and_255_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_read_parameter_254_and_255_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_read_parameter_254_and_255_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_read_parameter_254_and_255_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_0_AND_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_0_and_1_pack(
    uint8_t *dst_p, const spark_write_parameter_0_and_1_t *src_p, size_t size);

/**
 * Unpack message WRITE_PARAMETER_0_AND_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_0_and_1_unpack(spark_write_parameter_0_and_1_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_0_AND_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_0_and_1_init(spark_write_parameter_0_and_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_0_and_1_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_0_and_1_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_0_and_1_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_0_and_1_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_0_and_1_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_0_and_1_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_2_AND_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_2_and_3_pack(
    uint8_t *dst_p, const spark_write_parameter_2_and_3_t *src_p, size_t size);

/**
 * Unpack message WRITE_PARAMETER_2_AND_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_2_and_3_unpack(spark_write_parameter_2_and_3_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_2_AND_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_2_and_3_init(spark_write_parameter_2_and_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_2_and_3_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_2_and_3_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_2_and_3_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_2_and_3_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_2_and_3_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_2_and_3_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_4_AND_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_4_and_5_pack(
    uint8_t *dst_p, const spark_write_parameter_4_and_5_t *src_p, size_t size);

/**
 * Unpack message WRITE_PARAMETER_4_AND_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_4_and_5_unpack(spark_write_parameter_4_and_5_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_4_AND_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_4_and_5_init(spark_write_parameter_4_and_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_4_and_5_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_4_and_5_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_4_and_5_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_4_and_5_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_4_and_5_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_4_and_5_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_6_AND_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_6_and_7_pack(
    uint8_t *dst_p, const spark_write_parameter_6_and_7_t *src_p, size_t size);

/**
 * Unpack message WRITE_PARAMETER_6_AND_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_6_and_7_unpack(spark_write_parameter_6_and_7_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_6_AND_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_6_and_7_init(spark_write_parameter_6_and_7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_6_and_7_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_6_and_7_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_6_and_7_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_6_and_7_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_6_and_7_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_6_and_7_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_8_AND_9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_8_and_9_pack(
    uint8_t *dst_p, const spark_write_parameter_8_and_9_t *src_p, size_t size);

/**
 * Unpack message WRITE_PARAMETER_8_AND_9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_8_and_9_unpack(spark_write_parameter_8_and_9_t *dst_p,
                                         const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_8_AND_9.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_8_and_9_init(spark_write_parameter_8_and_9_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_8_and_9_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_8_and_9_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_8_and_9_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_8_and_9_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_8_and_9_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_8_and_9_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_10_AND_11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_10_and_11_pack(
    uint8_t *dst_p, const spark_write_parameter_10_and_11_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_10_AND_11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_10_and_11_unpack(
    spark_write_parameter_10_and_11_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_10_AND_11.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_10_and_11_init(
    spark_write_parameter_10_and_11_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_10_and_11_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_10_and_11_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_10_and_11_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_10_and_11_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_10_and_11_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_10_and_11_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_12_AND_13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_12_and_13_pack(
    uint8_t *dst_p, const spark_write_parameter_12_and_13_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_12_AND_13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_12_and_13_unpack(
    spark_write_parameter_12_and_13_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_12_AND_13.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_12_and_13_init(
    spark_write_parameter_12_and_13_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_12_and_13_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_12_and_13_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_12_and_13_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_12_and_13_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_12_and_13_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_12_and_13_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_14_AND_15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_14_and_15_pack(
    uint8_t *dst_p, const spark_write_parameter_14_and_15_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_14_AND_15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_14_and_15_unpack(
    spark_write_parameter_14_and_15_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_14_AND_15.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_14_and_15_init(
    spark_write_parameter_14_and_15_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_14_and_15_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_14_and_15_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_14_and_15_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_14_and_15_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_14_and_15_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_14_and_15_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_16_AND_17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_16_and_17_pack(
    uint8_t *dst_p, const spark_write_parameter_16_and_17_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_16_AND_17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_16_and_17_unpack(
    spark_write_parameter_16_and_17_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_16_AND_17.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_16_and_17_init(
    spark_write_parameter_16_and_17_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_16_and_17_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_16_and_17_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_16_and_17_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_16_and_17_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_16_and_17_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_16_and_17_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_18_AND_19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_18_and_19_pack(
    uint8_t *dst_p, const spark_write_parameter_18_and_19_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_18_AND_19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_18_and_19_unpack(
    spark_write_parameter_18_and_19_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_18_AND_19.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_18_and_19_init(
    spark_write_parameter_18_and_19_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_18_and_19_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_18_and_19_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_18_and_19_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_18_and_19_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_18_and_19_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_18_and_19_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_20_AND_21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_20_and_21_pack(
    uint8_t *dst_p, const spark_write_parameter_20_and_21_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_20_AND_21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_20_and_21_unpack(
    spark_write_parameter_20_and_21_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_20_AND_21.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_20_and_21_init(
    spark_write_parameter_20_and_21_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_20_and_21_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_20_and_21_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_20_and_21_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_20_and_21_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_20_and_21_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_20_and_21_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_22_AND_23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_22_and_23_pack(
    uint8_t *dst_p, const spark_write_parameter_22_and_23_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_22_AND_23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_22_and_23_unpack(
    spark_write_parameter_22_and_23_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_22_AND_23.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_22_and_23_init(
    spark_write_parameter_22_and_23_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_22_and_23_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_22_and_23_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_22_and_23_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_22_and_23_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_22_and_23_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_22_and_23_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_24_AND_25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_24_and_25_pack(
    uint8_t *dst_p, const spark_write_parameter_24_and_25_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_24_AND_25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_24_and_25_unpack(
    spark_write_parameter_24_and_25_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_24_AND_25.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_24_and_25_init(
    spark_write_parameter_24_and_25_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_24_and_25_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_24_and_25_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_24_and_25_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_24_and_25_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_24_and_25_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_24_and_25_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_26_AND_27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_26_and_27_pack(
    uint8_t *dst_p, const spark_write_parameter_26_and_27_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_26_AND_27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_26_and_27_unpack(
    spark_write_parameter_26_and_27_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_26_AND_27.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_26_and_27_init(
    spark_write_parameter_26_and_27_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_26_and_27_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_26_and_27_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_26_and_27_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_26_and_27_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_26_and_27_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_26_and_27_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_28_AND_29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_28_and_29_pack(
    uint8_t *dst_p, const spark_write_parameter_28_and_29_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_28_AND_29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_28_and_29_unpack(
    spark_write_parameter_28_and_29_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_28_AND_29.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_28_and_29_init(
    spark_write_parameter_28_and_29_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_28_and_29_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_28_and_29_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_28_and_29_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_28_and_29_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_28_and_29_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_28_and_29_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_30_AND_31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_30_and_31_pack(
    uint8_t *dst_p, const spark_write_parameter_30_and_31_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_30_AND_31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_30_and_31_unpack(
    spark_write_parameter_30_and_31_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_30_AND_31.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_30_and_31_init(
    spark_write_parameter_30_and_31_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_30_and_31_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_30_and_31_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_30_and_31_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_30_and_31_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_30_and_31_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_30_and_31_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_32_AND_33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_32_and_33_pack(
    uint8_t *dst_p, const spark_write_parameter_32_and_33_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_32_AND_33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_32_and_33_unpack(
    spark_write_parameter_32_and_33_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_32_AND_33.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_32_and_33_init(
    spark_write_parameter_32_and_33_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_32_and_33_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_32_and_33_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_32_and_33_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_32_and_33_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_32_and_33_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_32_and_33_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_34_AND_35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_34_and_35_pack(
    uint8_t *dst_p, const spark_write_parameter_34_and_35_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_34_AND_35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_34_and_35_unpack(
    spark_write_parameter_34_and_35_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_34_AND_35.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_34_and_35_init(
    spark_write_parameter_34_and_35_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_34_and_35_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_34_and_35_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_34_and_35_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_34_and_35_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_34_and_35_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_34_and_35_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_36_AND_37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_36_and_37_pack(
    uint8_t *dst_p, const spark_write_parameter_36_and_37_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_36_AND_37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_36_and_37_unpack(
    spark_write_parameter_36_and_37_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_36_AND_37.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_36_and_37_init(
    spark_write_parameter_36_and_37_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_36_and_37_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_36_and_37_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_36_and_37_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_36_and_37_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_36_and_37_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_36_and_37_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_38_AND_39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_38_and_39_pack(
    uint8_t *dst_p, const spark_write_parameter_38_and_39_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_38_AND_39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_38_and_39_unpack(
    spark_write_parameter_38_and_39_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_38_AND_39.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_38_and_39_init(
    spark_write_parameter_38_and_39_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_38_and_39_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_38_and_39_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_38_and_39_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_38_and_39_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_38_and_39_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_38_and_39_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_40_AND_41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_40_and_41_pack(
    uint8_t *dst_p, const spark_write_parameter_40_and_41_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_40_AND_41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_40_and_41_unpack(
    spark_write_parameter_40_and_41_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_40_AND_41.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_40_and_41_init(
    spark_write_parameter_40_and_41_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_40_and_41_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_40_and_41_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_40_and_41_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_40_and_41_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_40_and_41_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_40_and_41_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_42_AND_43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_42_and_43_pack(
    uint8_t *dst_p, const spark_write_parameter_42_and_43_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_42_AND_43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_42_and_43_unpack(
    spark_write_parameter_42_and_43_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_42_AND_43.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_42_and_43_init(
    spark_write_parameter_42_and_43_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_42_and_43_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_42_and_43_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_42_and_43_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_42_and_43_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_42_and_43_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_42_and_43_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_44_AND_45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_44_and_45_pack(
    uint8_t *dst_p, const spark_write_parameter_44_and_45_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_44_AND_45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_44_and_45_unpack(
    spark_write_parameter_44_and_45_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_44_AND_45.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_44_and_45_init(
    spark_write_parameter_44_and_45_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_44_and_45_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_44_and_45_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_44_and_45_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_44_and_45_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_44_and_45_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_44_and_45_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_46_AND_47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_46_and_47_pack(
    uint8_t *dst_p, const spark_write_parameter_46_and_47_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_46_AND_47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_46_and_47_unpack(
    spark_write_parameter_46_and_47_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_46_AND_47.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_46_and_47_init(
    spark_write_parameter_46_and_47_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_46_and_47_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_46_and_47_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_46_and_47_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_46_and_47_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_46_and_47_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_46_and_47_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_48_AND_49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_48_and_49_pack(
    uint8_t *dst_p, const spark_write_parameter_48_and_49_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_48_AND_49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_48_and_49_unpack(
    spark_write_parameter_48_and_49_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_48_AND_49.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_48_and_49_init(
    spark_write_parameter_48_and_49_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_48_and_49_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_48_and_49_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_48_and_49_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_48_and_49_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_48_and_49_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_48_and_49_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_50_AND_51.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_50_and_51_pack(
    uint8_t *dst_p, const spark_write_parameter_50_and_51_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_50_AND_51.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_50_and_51_unpack(
    spark_write_parameter_50_and_51_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_50_AND_51.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_50_and_51_init(
    spark_write_parameter_50_and_51_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_50_and_51_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_50_and_51_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_50_and_51_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_50_and_51_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_50_and_51_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_50_and_51_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_52_AND_53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_52_and_53_pack(
    uint8_t *dst_p, const spark_write_parameter_52_and_53_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_52_AND_53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_52_and_53_unpack(
    spark_write_parameter_52_and_53_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_52_AND_53.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_52_and_53_init(
    spark_write_parameter_52_and_53_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_52_and_53_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_52_and_53_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_52_and_53_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_52_and_53_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_52_and_53_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_52_and_53_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_54_AND_55.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_54_and_55_pack(
    uint8_t *dst_p, const spark_write_parameter_54_and_55_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_54_AND_55.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_54_and_55_unpack(
    spark_write_parameter_54_and_55_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_54_AND_55.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_54_and_55_init(
    spark_write_parameter_54_and_55_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_54_and_55_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_54_and_55_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_54_and_55_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_54_and_55_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_54_and_55_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_54_and_55_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_56_AND_57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_56_and_57_pack(
    uint8_t *dst_p, const spark_write_parameter_56_and_57_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_56_AND_57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_56_and_57_unpack(
    spark_write_parameter_56_and_57_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_56_AND_57.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_56_and_57_init(
    spark_write_parameter_56_and_57_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_56_and_57_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_56_and_57_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_56_and_57_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_56_and_57_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_56_and_57_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_56_and_57_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_58_AND_59.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_58_and_59_pack(
    uint8_t *dst_p, const spark_write_parameter_58_and_59_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_58_AND_59.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_58_and_59_unpack(
    spark_write_parameter_58_and_59_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_58_AND_59.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_58_and_59_init(
    spark_write_parameter_58_and_59_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_58_and_59_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_58_and_59_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_58_and_59_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_58_and_59_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_58_and_59_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_58_and_59_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_60_AND_61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_60_and_61_pack(
    uint8_t *dst_p, const spark_write_parameter_60_and_61_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_60_AND_61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_60_and_61_unpack(
    spark_write_parameter_60_and_61_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_60_AND_61.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_60_and_61_init(
    spark_write_parameter_60_and_61_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_60_and_61_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_60_and_61_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_60_and_61_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_60_and_61_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_60_and_61_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_60_and_61_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_62_AND_63.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_62_and_63_pack(
    uint8_t *dst_p, const spark_write_parameter_62_and_63_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_62_AND_63.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_62_and_63_unpack(
    spark_write_parameter_62_and_63_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_62_AND_63.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_62_and_63_init(
    spark_write_parameter_62_and_63_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_62_and_63_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_62_and_63_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_62_and_63_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_62_and_63_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_62_and_63_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_62_and_63_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_64_AND_65.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_64_and_65_pack(
    uint8_t *dst_p, const spark_write_parameter_64_and_65_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_64_AND_65.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_64_and_65_unpack(
    spark_write_parameter_64_and_65_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_64_AND_65.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_64_and_65_init(
    spark_write_parameter_64_and_65_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_64_and_65_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_64_and_65_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_64_and_65_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_64_and_65_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_64_and_65_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_64_and_65_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_66_AND_67.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_66_and_67_pack(
    uint8_t *dst_p, const spark_write_parameter_66_and_67_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_66_AND_67.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_66_and_67_unpack(
    spark_write_parameter_66_and_67_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_66_AND_67.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_66_and_67_init(
    spark_write_parameter_66_and_67_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_66_and_67_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_66_and_67_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_66_and_67_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_66_and_67_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_66_and_67_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_66_and_67_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_68_AND_69.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_68_and_69_pack(
    uint8_t *dst_p, const spark_write_parameter_68_and_69_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_68_AND_69.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_68_and_69_unpack(
    spark_write_parameter_68_and_69_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_68_AND_69.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_68_and_69_init(
    spark_write_parameter_68_and_69_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_68_and_69_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_68_and_69_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_68_and_69_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_68_and_69_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_68_and_69_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_68_and_69_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_70_AND_71.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_70_and_71_pack(
    uint8_t *dst_p, const spark_write_parameter_70_and_71_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_70_AND_71.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_70_and_71_unpack(
    spark_write_parameter_70_and_71_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_70_AND_71.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_70_and_71_init(
    spark_write_parameter_70_and_71_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_70_and_71_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_70_and_71_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_70_and_71_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_70_and_71_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_70_and_71_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_70_and_71_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_72_AND_73.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_72_and_73_pack(
    uint8_t *dst_p, const spark_write_parameter_72_and_73_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_72_AND_73.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_72_and_73_unpack(
    spark_write_parameter_72_and_73_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_72_AND_73.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_72_and_73_init(
    spark_write_parameter_72_and_73_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_72_and_73_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_72_and_73_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_72_and_73_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_72_and_73_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_72_and_73_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_72_and_73_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_74_AND_75.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_74_and_75_pack(
    uint8_t *dst_p, const spark_write_parameter_74_and_75_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_74_AND_75.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_74_and_75_unpack(
    spark_write_parameter_74_and_75_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_74_AND_75.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_74_and_75_init(
    spark_write_parameter_74_and_75_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_74_and_75_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_74_and_75_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_74_and_75_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_74_and_75_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_74_and_75_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_74_and_75_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_76_AND_77.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_76_and_77_pack(
    uint8_t *dst_p, const spark_write_parameter_76_and_77_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_76_AND_77.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_76_and_77_unpack(
    spark_write_parameter_76_and_77_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_76_AND_77.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_76_and_77_init(
    spark_write_parameter_76_and_77_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_76_and_77_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_76_and_77_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_76_and_77_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_76_and_77_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_76_and_77_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_76_and_77_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_78_AND_79.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_78_and_79_pack(
    uint8_t *dst_p, const spark_write_parameter_78_and_79_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_78_AND_79.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_78_and_79_unpack(
    spark_write_parameter_78_and_79_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_78_AND_79.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_78_and_79_init(
    spark_write_parameter_78_and_79_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_78_and_79_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_78_and_79_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_78_and_79_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_78_and_79_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_78_and_79_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_78_and_79_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_80_AND_81.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_80_and_81_pack(
    uint8_t *dst_p, const spark_write_parameter_80_and_81_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_80_AND_81.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_80_and_81_unpack(
    spark_write_parameter_80_and_81_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_80_AND_81.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_80_and_81_init(
    spark_write_parameter_80_and_81_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_80_and_81_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_80_and_81_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_80_and_81_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_80_and_81_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_80_and_81_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_80_and_81_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_82_AND_83.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_82_and_83_pack(
    uint8_t *dst_p, const spark_write_parameter_82_and_83_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_82_AND_83.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_82_and_83_unpack(
    spark_write_parameter_82_and_83_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_82_AND_83.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_82_and_83_init(
    spark_write_parameter_82_and_83_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_82_and_83_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_82_and_83_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_82_and_83_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_82_and_83_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_82_and_83_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_82_and_83_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_84_AND_85.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_84_and_85_pack(
    uint8_t *dst_p, const spark_write_parameter_84_and_85_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_84_AND_85.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_84_and_85_unpack(
    spark_write_parameter_84_and_85_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_84_AND_85.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_84_and_85_init(
    spark_write_parameter_84_and_85_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_84_and_85_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_84_and_85_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_84_and_85_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_84_and_85_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_84_and_85_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_84_and_85_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_86_AND_87.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_86_and_87_pack(
    uint8_t *dst_p, const spark_write_parameter_86_and_87_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_86_AND_87.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_86_and_87_unpack(
    spark_write_parameter_86_and_87_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_86_AND_87.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_86_and_87_init(
    spark_write_parameter_86_and_87_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_86_and_87_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_86_and_87_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_86_and_87_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_86_and_87_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_86_and_87_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_86_and_87_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_88_AND_89.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_88_and_89_pack(
    uint8_t *dst_p, const spark_write_parameter_88_and_89_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_88_AND_89.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_88_and_89_unpack(
    spark_write_parameter_88_and_89_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_88_AND_89.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_88_and_89_init(
    spark_write_parameter_88_and_89_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_88_and_89_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_88_and_89_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_88_and_89_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_88_and_89_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_88_and_89_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_88_and_89_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_90_AND_91.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_90_and_91_pack(
    uint8_t *dst_p, const spark_write_parameter_90_and_91_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_90_AND_91.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_90_and_91_unpack(
    spark_write_parameter_90_and_91_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_90_AND_91.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_90_and_91_init(
    spark_write_parameter_90_and_91_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_90_and_91_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_90_and_91_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_90_and_91_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_90_and_91_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_90_and_91_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_90_and_91_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_92_AND_93.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_92_and_93_pack(
    uint8_t *dst_p, const spark_write_parameter_92_and_93_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_92_AND_93.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_92_and_93_unpack(
    spark_write_parameter_92_and_93_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_92_AND_93.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_92_and_93_init(
    spark_write_parameter_92_and_93_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_92_and_93_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_92_and_93_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_92_and_93_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_92_and_93_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_92_and_93_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_92_and_93_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_94_AND_95.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_94_and_95_pack(
    uint8_t *dst_p, const spark_write_parameter_94_and_95_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_94_AND_95.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_94_and_95_unpack(
    spark_write_parameter_94_and_95_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_94_AND_95.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_94_and_95_init(
    spark_write_parameter_94_and_95_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_94_and_95_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_94_and_95_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_94_and_95_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_94_and_95_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_94_and_95_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_94_and_95_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_96_AND_97.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_96_and_97_pack(
    uint8_t *dst_p, const spark_write_parameter_96_and_97_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_96_AND_97.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_96_and_97_unpack(
    spark_write_parameter_96_and_97_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_96_AND_97.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_96_and_97_init(
    spark_write_parameter_96_and_97_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_96_and_97_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_96_and_97_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_96_and_97_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_96_and_97_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_96_and_97_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_96_and_97_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_98_AND_99.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_98_and_99_pack(
    uint8_t *dst_p, const spark_write_parameter_98_and_99_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_98_AND_99.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_98_and_99_unpack(
    spark_write_parameter_98_and_99_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_98_AND_99.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_98_and_99_init(
    spark_write_parameter_98_and_99_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_98_and_99_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_98_and_99_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_98_and_99_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_98_and_99_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_98_and_99_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_98_and_99_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_100_AND_101.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_100_and_101_pack(
    uint8_t *dst_p, const spark_write_parameter_100_and_101_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_100_AND_101.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_100_and_101_unpack(
    spark_write_parameter_100_and_101_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_100_AND_101.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_100_and_101_init(
    spark_write_parameter_100_and_101_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_100_and_101_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_100_and_101_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_100_and_101_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_100_and_101_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_100_and_101_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_100_and_101_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_102_AND_103.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_102_and_103_pack(
    uint8_t *dst_p, const spark_write_parameter_102_and_103_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_102_AND_103.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_102_and_103_unpack(
    spark_write_parameter_102_and_103_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_102_AND_103.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_102_and_103_init(
    spark_write_parameter_102_and_103_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_102_and_103_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_102_and_103_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_102_and_103_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_102_and_103_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_102_and_103_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_102_and_103_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_104_AND_105.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_104_and_105_pack(
    uint8_t *dst_p, const spark_write_parameter_104_and_105_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_104_AND_105.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_104_and_105_unpack(
    spark_write_parameter_104_and_105_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_104_AND_105.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_104_and_105_init(
    spark_write_parameter_104_and_105_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_104_and_105_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_104_and_105_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_104_and_105_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_104_and_105_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_104_and_105_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_104_and_105_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_106_AND_107.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_106_and_107_pack(
    uint8_t *dst_p, const spark_write_parameter_106_and_107_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_106_AND_107.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_106_and_107_unpack(
    spark_write_parameter_106_and_107_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_106_AND_107.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_106_and_107_init(
    spark_write_parameter_106_and_107_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_106_and_107_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_106_and_107_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_106_and_107_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_106_and_107_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_106_and_107_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_106_and_107_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_108_AND_109.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_108_and_109_pack(
    uint8_t *dst_p, const spark_write_parameter_108_and_109_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_108_AND_109.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_108_and_109_unpack(
    spark_write_parameter_108_and_109_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_108_AND_109.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_108_and_109_init(
    spark_write_parameter_108_and_109_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_108_and_109_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_108_and_109_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_108_and_109_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_108_and_109_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_108_and_109_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_108_and_109_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_110_AND_111.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_110_and_111_pack(
    uint8_t *dst_p, const spark_write_parameter_110_and_111_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_110_AND_111.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_110_and_111_unpack(
    spark_write_parameter_110_and_111_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_110_AND_111.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_110_and_111_init(
    spark_write_parameter_110_and_111_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_110_and_111_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_110_and_111_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_110_and_111_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_110_and_111_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_110_and_111_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_110_and_111_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_112_AND_113.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_112_and_113_pack(
    uint8_t *dst_p, const spark_write_parameter_112_and_113_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_112_AND_113.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_112_and_113_unpack(
    spark_write_parameter_112_and_113_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_112_AND_113.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_112_and_113_init(
    spark_write_parameter_112_and_113_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_112_and_113_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_112_and_113_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_112_and_113_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_112_and_113_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_112_and_113_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_112_and_113_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_114_AND_115.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_114_and_115_pack(
    uint8_t *dst_p, const spark_write_parameter_114_and_115_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_114_AND_115.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_114_and_115_unpack(
    spark_write_parameter_114_and_115_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_114_AND_115.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_114_and_115_init(
    spark_write_parameter_114_and_115_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_114_and_115_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_114_and_115_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_114_and_115_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_114_and_115_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_114_and_115_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_114_and_115_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_116_AND_117.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_116_and_117_pack(
    uint8_t *dst_p, const spark_write_parameter_116_and_117_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_116_AND_117.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_116_and_117_unpack(
    spark_write_parameter_116_and_117_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_116_AND_117.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_116_and_117_init(
    spark_write_parameter_116_and_117_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_116_and_117_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_116_and_117_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_116_and_117_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_116_and_117_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_116_and_117_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_116_and_117_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_118_AND_119.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_118_and_119_pack(
    uint8_t *dst_p, const spark_write_parameter_118_and_119_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_118_AND_119.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_118_and_119_unpack(
    spark_write_parameter_118_and_119_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_118_AND_119.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_118_and_119_init(
    spark_write_parameter_118_and_119_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_118_and_119_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_118_and_119_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_118_and_119_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_118_and_119_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_118_and_119_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_118_and_119_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_120_AND_121.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_120_and_121_pack(
    uint8_t *dst_p, const spark_write_parameter_120_and_121_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_120_AND_121.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_120_and_121_unpack(
    spark_write_parameter_120_and_121_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_120_AND_121.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_120_and_121_init(
    spark_write_parameter_120_and_121_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_120_and_121_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_120_and_121_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_120_and_121_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_120_and_121_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_120_and_121_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_120_and_121_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_122_AND_123.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_122_and_123_pack(
    uint8_t *dst_p, const spark_write_parameter_122_and_123_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_122_AND_123.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_122_and_123_unpack(
    spark_write_parameter_122_and_123_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_122_AND_123.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_122_and_123_init(
    spark_write_parameter_122_and_123_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_122_and_123_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_122_and_123_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_122_and_123_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_122_and_123_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_122_and_123_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_122_and_123_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_124_AND_125.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_124_and_125_pack(
    uint8_t *dst_p, const spark_write_parameter_124_and_125_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_124_AND_125.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_124_and_125_unpack(
    spark_write_parameter_124_and_125_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_124_AND_125.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_124_and_125_init(
    spark_write_parameter_124_and_125_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_124_and_125_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_124_and_125_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_124_and_125_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_124_and_125_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_124_and_125_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_124_and_125_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_126_AND_127.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_126_and_127_pack(
    uint8_t *dst_p, const spark_write_parameter_126_and_127_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_126_AND_127.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_126_and_127_unpack(
    spark_write_parameter_126_and_127_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_126_AND_127.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_126_and_127_init(
    spark_write_parameter_126_and_127_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_126_and_127_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_126_and_127_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_126_and_127_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_126_and_127_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_126_and_127_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_126_and_127_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_128_AND_129.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_128_and_129_pack(
    uint8_t *dst_p, const spark_write_parameter_128_and_129_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_128_AND_129.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_128_and_129_unpack(
    spark_write_parameter_128_and_129_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_128_AND_129.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_128_and_129_init(
    spark_write_parameter_128_and_129_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_128_and_129_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_128_and_129_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_128_and_129_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_128_and_129_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_128_and_129_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_128_and_129_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_130_AND_131.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_130_and_131_pack(
    uint8_t *dst_p, const spark_write_parameter_130_and_131_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_130_AND_131.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_130_and_131_unpack(
    spark_write_parameter_130_and_131_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_130_AND_131.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_130_and_131_init(
    spark_write_parameter_130_and_131_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_130_and_131_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_130_and_131_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_130_and_131_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_130_and_131_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_130_and_131_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_130_and_131_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_132_AND_133.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_132_and_133_pack(
    uint8_t *dst_p, const spark_write_parameter_132_and_133_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_132_AND_133.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_132_and_133_unpack(
    spark_write_parameter_132_and_133_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_132_AND_133.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_132_and_133_init(
    spark_write_parameter_132_and_133_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_132_and_133_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_132_and_133_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_132_and_133_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_132_and_133_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_132_and_133_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_132_and_133_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_134_AND_135.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_134_and_135_pack(
    uint8_t *dst_p, const spark_write_parameter_134_and_135_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_134_AND_135.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_134_and_135_unpack(
    spark_write_parameter_134_and_135_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_134_AND_135.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_134_and_135_init(
    spark_write_parameter_134_and_135_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_134_and_135_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_134_and_135_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_134_and_135_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_134_and_135_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_134_and_135_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_134_and_135_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_136_AND_137.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_136_and_137_pack(
    uint8_t *dst_p, const spark_write_parameter_136_and_137_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_136_AND_137.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_136_and_137_unpack(
    spark_write_parameter_136_and_137_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_136_AND_137.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_136_and_137_init(
    spark_write_parameter_136_and_137_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_136_and_137_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_136_and_137_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_136_and_137_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_136_and_137_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_136_and_137_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_136_and_137_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_138_AND_139.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_138_and_139_pack(
    uint8_t *dst_p, const spark_write_parameter_138_and_139_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_138_AND_139.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_138_and_139_unpack(
    spark_write_parameter_138_and_139_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_138_AND_139.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_138_and_139_init(
    spark_write_parameter_138_and_139_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_138_and_139_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_138_and_139_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_138_and_139_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_138_and_139_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_138_and_139_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_138_and_139_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_140_AND_141.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_140_and_141_pack(
    uint8_t *dst_p, const spark_write_parameter_140_and_141_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_140_AND_141.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_140_and_141_unpack(
    spark_write_parameter_140_and_141_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_140_AND_141.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_140_and_141_init(
    spark_write_parameter_140_and_141_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_140_and_141_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_140_and_141_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_140_and_141_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_140_and_141_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_140_and_141_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_140_and_141_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_142_AND_143.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_142_and_143_pack(
    uint8_t *dst_p, const spark_write_parameter_142_and_143_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_142_AND_143.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_142_and_143_unpack(
    spark_write_parameter_142_and_143_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_142_AND_143.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_142_and_143_init(
    spark_write_parameter_142_and_143_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_142_and_143_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_142_and_143_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_142_and_143_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_142_and_143_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_142_and_143_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_142_and_143_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_144_AND_145.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_144_and_145_pack(
    uint8_t *dst_p, const spark_write_parameter_144_and_145_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_144_AND_145.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_144_and_145_unpack(
    spark_write_parameter_144_and_145_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_144_AND_145.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_144_and_145_init(
    spark_write_parameter_144_and_145_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_144_and_145_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_144_and_145_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_144_and_145_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_144_and_145_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_144_and_145_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_144_and_145_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_146_AND_147.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_146_and_147_pack(
    uint8_t *dst_p, const spark_write_parameter_146_and_147_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_146_AND_147.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_146_and_147_unpack(
    spark_write_parameter_146_and_147_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_146_AND_147.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_146_and_147_init(
    spark_write_parameter_146_and_147_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_146_and_147_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_146_and_147_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_146_and_147_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_146_and_147_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_146_and_147_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_146_and_147_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_148_AND_149.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_148_and_149_pack(
    uint8_t *dst_p, const spark_write_parameter_148_and_149_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_148_AND_149.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_148_and_149_unpack(
    spark_write_parameter_148_and_149_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_148_AND_149.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_148_and_149_init(
    spark_write_parameter_148_and_149_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_148_and_149_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_148_and_149_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_148_and_149_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_148_and_149_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_148_and_149_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_148_and_149_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_150_AND_151.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_150_and_151_pack(
    uint8_t *dst_p, const spark_write_parameter_150_and_151_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_150_AND_151.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_150_and_151_unpack(
    spark_write_parameter_150_and_151_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_150_AND_151.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_150_and_151_init(
    spark_write_parameter_150_and_151_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_150_and_151_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_150_and_151_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_150_and_151_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_150_and_151_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_150_and_151_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_150_and_151_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_152_AND_153.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_152_and_153_pack(
    uint8_t *dst_p, const spark_write_parameter_152_and_153_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_152_AND_153.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_152_and_153_unpack(
    spark_write_parameter_152_and_153_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_152_AND_153.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_152_and_153_init(
    spark_write_parameter_152_and_153_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_152_and_153_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_152_and_153_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_152_and_153_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_152_and_153_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_152_and_153_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_152_and_153_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_154_AND_155.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_154_and_155_pack(
    uint8_t *dst_p, const spark_write_parameter_154_and_155_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_154_AND_155.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_154_and_155_unpack(
    spark_write_parameter_154_and_155_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_154_AND_155.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_154_and_155_init(
    spark_write_parameter_154_and_155_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_154_and_155_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_154_and_155_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_154_and_155_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_154_and_155_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_154_and_155_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_154_and_155_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_156_AND_157.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_156_and_157_pack(
    uint8_t *dst_p, const spark_write_parameter_156_and_157_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_156_AND_157.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_156_and_157_unpack(
    spark_write_parameter_156_and_157_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_156_AND_157.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_156_and_157_init(
    spark_write_parameter_156_and_157_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_156_and_157_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_156_and_157_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_156_and_157_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_156_and_157_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_156_and_157_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_156_and_157_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_158_AND_159.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_158_and_159_pack(
    uint8_t *dst_p, const spark_write_parameter_158_and_159_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_158_AND_159.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_158_and_159_unpack(
    spark_write_parameter_158_and_159_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_158_AND_159.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_158_and_159_init(
    spark_write_parameter_158_and_159_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_158_and_159_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_158_and_159_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_158_and_159_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_158_and_159_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_158_and_159_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_158_and_159_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_160_AND_161.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_160_and_161_pack(
    uint8_t *dst_p, const spark_write_parameter_160_and_161_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_160_AND_161.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_160_and_161_unpack(
    spark_write_parameter_160_and_161_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_160_AND_161.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_160_and_161_init(
    spark_write_parameter_160_and_161_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_160_and_161_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_160_and_161_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_160_and_161_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_160_and_161_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_160_and_161_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_160_and_161_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_162_AND_163.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_162_and_163_pack(
    uint8_t *dst_p, const spark_write_parameter_162_and_163_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_162_AND_163.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_162_and_163_unpack(
    spark_write_parameter_162_and_163_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_162_AND_163.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_162_and_163_init(
    spark_write_parameter_162_and_163_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_162_and_163_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_162_and_163_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_162_and_163_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_162_and_163_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_162_and_163_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_162_and_163_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_164_AND_165.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_164_and_165_pack(
    uint8_t *dst_p, const spark_write_parameter_164_and_165_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_164_AND_165.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_164_and_165_unpack(
    spark_write_parameter_164_and_165_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_164_AND_165.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_164_and_165_init(
    spark_write_parameter_164_and_165_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_164_and_165_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_164_and_165_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_164_and_165_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_164_and_165_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_164_and_165_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_164_and_165_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_166_AND_167.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_166_and_167_pack(
    uint8_t *dst_p, const spark_write_parameter_166_and_167_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_166_AND_167.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_166_and_167_unpack(
    spark_write_parameter_166_and_167_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_166_AND_167.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_166_and_167_init(
    spark_write_parameter_166_and_167_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_166_and_167_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_166_and_167_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_166_and_167_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_166_and_167_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_166_and_167_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_166_and_167_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_168_AND_169.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_168_and_169_pack(
    uint8_t *dst_p, const spark_write_parameter_168_and_169_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_168_AND_169.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_168_and_169_unpack(
    spark_write_parameter_168_and_169_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_168_AND_169.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_168_and_169_init(
    spark_write_parameter_168_and_169_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_168_and_169_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_168_and_169_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_168_and_169_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_168_and_169_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_168_and_169_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_168_and_169_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_170_AND_171.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_170_and_171_pack(
    uint8_t *dst_p, const spark_write_parameter_170_and_171_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_170_AND_171.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_170_and_171_unpack(
    spark_write_parameter_170_and_171_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_170_AND_171.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_170_and_171_init(
    spark_write_parameter_170_and_171_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_170_and_171_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_170_and_171_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_170_and_171_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_170_and_171_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_170_and_171_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_170_and_171_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_172_AND_173.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_172_and_173_pack(
    uint8_t *dst_p, const spark_write_parameter_172_and_173_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_172_AND_173.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_172_and_173_unpack(
    spark_write_parameter_172_and_173_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_172_AND_173.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_172_and_173_init(
    spark_write_parameter_172_and_173_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_172_and_173_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_172_and_173_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_172_and_173_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_172_and_173_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_172_and_173_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_172_and_173_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_174_AND_175.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_174_and_175_pack(
    uint8_t *dst_p, const spark_write_parameter_174_and_175_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_174_AND_175.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_174_and_175_unpack(
    spark_write_parameter_174_and_175_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_174_AND_175.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_174_and_175_init(
    spark_write_parameter_174_and_175_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_174_and_175_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_174_and_175_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_174_and_175_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_174_and_175_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_174_and_175_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_174_and_175_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_176_AND_177.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_176_and_177_pack(
    uint8_t *dst_p, const spark_write_parameter_176_and_177_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_176_AND_177.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_176_and_177_unpack(
    spark_write_parameter_176_and_177_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_176_AND_177.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_176_and_177_init(
    spark_write_parameter_176_and_177_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_176_and_177_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_176_and_177_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_176_and_177_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_176_and_177_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_176_and_177_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_176_and_177_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_178_AND_179.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_178_and_179_pack(
    uint8_t *dst_p, const spark_write_parameter_178_and_179_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_178_AND_179.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_178_and_179_unpack(
    spark_write_parameter_178_and_179_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_178_AND_179.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_178_and_179_init(
    spark_write_parameter_178_and_179_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_178_and_179_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_178_and_179_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_178_and_179_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_178_and_179_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_178_and_179_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_178_and_179_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_180_AND_181.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_180_and_181_pack(
    uint8_t *dst_p, const spark_write_parameter_180_and_181_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_180_AND_181.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_180_and_181_unpack(
    spark_write_parameter_180_and_181_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_180_AND_181.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_180_and_181_init(
    spark_write_parameter_180_and_181_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_180_and_181_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_180_and_181_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_180_and_181_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_180_and_181_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_180_and_181_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_180_and_181_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_182_AND_183.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_182_and_183_pack(
    uint8_t *dst_p, const spark_write_parameter_182_and_183_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_182_AND_183.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_182_and_183_unpack(
    spark_write_parameter_182_and_183_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_182_AND_183.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_182_and_183_init(
    spark_write_parameter_182_and_183_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_182_and_183_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_182_and_183_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_182_and_183_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_182_and_183_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_182_and_183_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_182_and_183_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_184_AND_185.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_184_and_185_pack(
    uint8_t *dst_p, const spark_write_parameter_184_and_185_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_184_AND_185.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_184_and_185_unpack(
    spark_write_parameter_184_and_185_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_184_AND_185.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_184_and_185_init(
    spark_write_parameter_184_and_185_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_184_and_185_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_184_and_185_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_184_and_185_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_184_and_185_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_184_and_185_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_184_and_185_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_186_AND_187.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_186_and_187_pack(
    uint8_t *dst_p, const spark_write_parameter_186_and_187_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_186_AND_187.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_186_and_187_unpack(
    spark_write_parameter_186_and_187_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_186_AND_187.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_186_and_187_init(
    spark_write_parameter_186_and_187_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_186_and_187_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_186_and_187_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_186_and_187_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_186_and_187_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_186_and_187_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_186_and_187_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_188_AND_189.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_188_and_189_pack(
    uint8_t *dst_p, const spark_write_parameter_188_and_189_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_188_AND_189.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_188_and_189_unpack(
    spark_write_parameter_188_and_189_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_188_AND_189.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_188_and_189_init(
    spark_write_parameter_188_and_189_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_188_and_189_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_188_and_189_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_188_and_189_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_188_and_189_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_188_and_189_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_188_and_189_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_190_AND_191.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_190_and_191_pack(
    uint8_t *dst_p, const spark_write_parameter_190_and_191_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_190_AND_191.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_190_and_191_unpack(
    spark_write_parameter_190_and_191_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_190_AND_191.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_190_and_191_init(
    spark_write_parameter_190_and_191_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_190_and_191_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_190_and_191_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_190_and_191_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_190_and_191_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_190_and_191_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_190_and_191_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_192_AND_193.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_192_and_193_pack(
    uint8_t *dst_p, const spark_write_parameter_192_and_193_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_192_AND_193.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_192_and_193_unpack(
    spark_write_parameter_192_and_193_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_192_AND_193.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_192_and_193_init(
    spark_write_parameter_192_and_193_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_192_and_193_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_192_and_193_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_192_and_193_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_192_and_193_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_192_and_193_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_192_and_193_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_194_AND_195.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_194_and_195_pack(
    uint8_t *dst_p, const spark_write_parameter_194_and_195_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_194_AND_195.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_194_and_195_unpack(
    spark_write_parameter_194_and_195_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_194_AND_195.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_194_and_195_init(
    spark_write_parameter_194_and_195_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_194_and_195_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_194_and_195_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_194_and_195_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_194_and_195_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_194_and_195_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_194_and_195_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_196_AND_197.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_196_and_197_pack(
    uint8_t *dst_p, const spark_write_parameter_196_and_197_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_196_AND_197.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_196_and_197_unpack(
    spark_write_parameter_196_and_197_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_196_AND_197.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_196_and_197_init(
    spark_write_parameter_196_and_197_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_196_and_197_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_196_and_197_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_196_and_197_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_196_and_197_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_196_and_197_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_196_and_197_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_198_AND_199.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_198_and_199_pack(
    uint8_t *dst_p, const spark_write_parameter_198_and_199_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_198_AND_199.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_198_and_199_unpack(
    spark_write_parameter_198_and_199_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_198_AND_199.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_198_and_199_init(
    spark_write_parameter_198_and_199_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_198_and_199_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_198_and_199_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_198_and_199_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_198_and_199_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_198_and_199_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_198_and_199_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_200_AND_201.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_200_and_201_pack(
    uint8_t *dst_p, const spark_write_parameter_200_and_201_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_200_AND_201.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_200_and_201_unpack(
    spark_write_parameter_200_and_201_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_200_AND_201.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_200_and_201_init(
    spark_write_parameter_200_and_201_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_200_and_201_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_200_and_201_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_200_and_201_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_200_and_201_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_200_and_201_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_200_and_201_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_202_AND_203.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_202_and_203_pack(
    uint8_t *dst_p, const spark_write_parameter_202_and_203_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_202_AND_203.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_202_and_203_unpack(
    spark_write_parameter_202_and_203_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_202_AND_203.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_202_and_203_init(
    spark_write_parameter_202_and_203_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_202_and_203_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_202_and_203_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_202_and_203_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_202_and_203_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_202_and_203_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_202_and_203_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_204_AND_205.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_204_and_205_pack(
    uint8_t *dst_p, const spark_write_parameter_204_and_205_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_204_AND_205.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_204_and_205_unpack(
    spark_write_parameter_204_and_205_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_204_AND_205.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_204_and_205_init(
    spark_write_parameter_204_and_205_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_204_and_205_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_204_and_205_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_204_and_205_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_204_and_205_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_204_and_205_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_204_and_205_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_206_AND_207.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_206_and_207_pack(
    uint8_t *dst_p, const spark_write_parameter_206_and_207_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_206_AND_207.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_206_and_207_unpack(
    spark_write_parameter_206_and_207_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_206_AND_207.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_206_and_207_init(
    spark_write_parameter_206_and_207_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_206_and_207_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_206_and_207_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_206_and_207_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_206_and_207_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_206_and_207_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_206_and_207_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_208_AND_209.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_208_and_209_pack(
    uint8_t *dst_p, const spark_write_parameter_208_and_209_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_208_AND_209.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_208_and_209_unpack(
    spark_write_parameter_208_and_209_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_208_AND_209.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_208_and_209_init(
    spark_write_parameter_208_and_209_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_208_and_209_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_208_and_209_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_208_and_209_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_208_and_209_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_208_and_209_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_208_and_209_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_210_AND_211.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_210_and_211_pack(
    uint8_t *dst_p, const spark_write_parameter_210_and_211_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_210_AND_211.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_210_and_211_unpack(
    spark_write_parameter_210_and_211_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_210_AND_211.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_210_and_211_init(
    spark_write_parameter_210_and_211_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_210_and_211_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_210_and_211_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_210_and_211_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_210_and_211_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_210_and_211_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_210_and_211_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_212_AND_213.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_212_and_213_pack(
    uint8_t *dst_p, const spark_write_parameter_212_and_213_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_212_AND_213.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_212_and_213_unpack(
    spark_write_parameter_212_and_213_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_212_AND_213.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_212_and_213_init(
    spark_write_parameter_212_and_213_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_212_and_213_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_212_and_213_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_212_and_213_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_212_and_213_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_212_and_213_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_212_and_213_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_214_AND_215.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_214_and_215_pack(
    uint8_t *dst_p, const spark_write_parameter_214_and_215_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_214_AND_215.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_214_and_215_unpack(
    spark_write_parameter_214_and_215_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_214_AND_215.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_214_and_215_init(
    spark_write_parameter_214_and_215_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_214_and_215_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_214_and_215_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_214_and_215_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_214_and_215_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_214_and_215_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_214_and_215_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_216_AND_217.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_216_and_217_pack(
    uint8_t *dst_p, const spark_write_parameter_216_and_217_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_216_AND_217.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_216_and_217_unpack(
    spark_write_parameter_216_and_217_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_216_AND_217.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_216_and_217_init(
    spark_write_parameter_216_and_217_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_216_and_217_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_216_and_217_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_216_and_217_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_216_and_217_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_216_and_217_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_216_and_217_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_218_AND_219.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_218_and_219_pack(
    uint8_t *dst_p, const spark_write_parameter_218_and_219_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_218_AND_219.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_218_and_219_unpack(
    spark_write_parameter_218_and_219_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_218_AND_219.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_218_and_219_init(
    spark_write_parameter_218_and_219_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_218_and_219_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_218_and_219_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_218_and_219_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_218_and_219_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_218_and_219_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_218_and_219_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_220_AND_221.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_220_and_221_pack(
    uint8_t *dst_p, const spark_write_parameter_220_and_221_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_220_AND_221.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_220_and_221_unpack(
    spark_write_parameter_220_and_221_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_220_AND_221.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_220_and_221_init(
    spark_write_parameter_220_and_221_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_220_and_221_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_220_and_221_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_220_and_221_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_220_and_221_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_220_and_221_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_220_and_221_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_222_AND_223.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_222_and_223_pack(
    uint8_t *dst_p, const spark_write_parameter_222_and_223_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_222_AND_223.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_222_and_223_unpack(
    spark_write_parameter_222_and_223_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_222_AND_223.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_222_and_223_init(
    spark_write_parameter_222_and_223_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_222_and_223_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_222_and_223_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_222_and_223_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_222_and_223_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_222_and_223_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_222_and_223_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_224_AND_225.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_224_and_225_pack(
    uint8_t *dst_p, const spark_write_parameter_224_and_225_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_224_AND_225.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_224_and_225_unpack(
    spark_write_parameter_224_and_225_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_224_AND_225.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_224_and_225_init(
    spark_write_parameter_224_and_225_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_224_and_225_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_224_and_225_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_224_and_225_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_224_and_225_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_224_and_225_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_224_and_225_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_226_AND_227.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_226_and_227_pack(
    uint8_t *dst_p, const spark_write_parameter_226_and_227_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_226_AND_227.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_226_and_227_unpack(
    spark_write_parameter_226_and_227_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_226_AND_227.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_226_and_227_init(
    spark_write_parameter_226_and_227_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_226_and_227_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_226_and_227_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_226_and_227_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_226_and_227_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_226_and_227_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_226_and_227_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_228_AND_229.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_228_and_229_pack(
    uint8_t *dst_p, const spark_write_parameter_228_and_229_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_228_AND_229.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_228_and_229_unpack(
    spark_write_parameter_228_and_229_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_228_AND_229.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_228_and_229_init(
    spark_write_parameter_228_and_229_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_228_and_229_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_228_and_229_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_228_and_229_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_228_and_229_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_228_and_229_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_228_and_229_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_230_AND_231.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_230_and_231_pack(
    uint8_t *dst_p, const spark_write_parameter_230_and_231_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_230_AND_231.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_230_and_231_unpack(
    spark_write_parameter_230_and_231_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_230_AND_231.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_230_and_231_init(
    spark_write_parameter_230_and_231_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_230_and_231_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_230_and_231_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_230_and_231_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_230_and_231_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_230_and_231_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_230_and_231_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_232_AND_233.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_232_and_233_pack(
    uint8_t *dst_p, const spark_write_parameter_232_and_233_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_232_AND_233.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_232_and_233_unpack(
    spark_write_parameter_232_and_233_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_232_AND_233.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_232_and_233_init(
    spark_write_parameter_232_and_233_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_232_and_233_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_232_and_233_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_232_and_233_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_232_and_233_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_232_and_233_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_232_and_233_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_234_AND_235.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_234_and_235_pack(
    uint8_t *dst_p, const spark_write_parameter_234_and_235_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_234_AND_235.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_234_and_235_unpack(
    spark_write_parameter_234_and_235_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_234_AND_235.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_234_and_235_init(
    spark_write_parameter_234_and_235_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_234_and_235_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_234_and_235_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_234_and_235_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_234_and_235_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_234_and_235_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_234_and_235_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_236_AND_237.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_236_and_237_pack(
    uint8_t *dst_p, const spark_write_parameter_236_and_237_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_236_AND_237.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_236_and_237_unpack(
    spark_write_parameter_236_and_237_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_236_AND_237.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_236_and_237_init(
    spark_write_parameter_236_and_237_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_236_and_237_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_236_and_237_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_236_and_237_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_236_and_237_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_236_and_237_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_236_and_237_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_238_AND_239.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_238_and_239_pack(
    uint8_t *dst_p, const spark_write_parameter_238_and_239_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_238_AND_239.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_238_and_239_unpack(
    spark_write_parameter_238_and_239_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_238_AND_239.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_238_and_239_init(
    spark_write_parameter_238_and_239_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_238_and_239_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_238_and_239_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_238_and_239_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_238_and_239_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_238_and_239_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_238_and_239_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_240_AND_241.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_240_and_241_pack(
    uint8_t *dst_p, const spark_write_parameter_240_and_241_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_240_AND_241.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_240_and_241_unpack(
    spark_write_parameter_240_and_241_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_240_AND_241.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_240_and_241_init(
    spark_write_parameter_240_and_241_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_240_and_241_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_240_and_241_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_240_and_241_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_240_and_241_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_240_and_241_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_240_and_241_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_242_AND_243.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_242_and_243_pack(
    uint8_t *dst_p, const spark_write_parameter_242_and_243_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_242_AND_243.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_242_and_243_unpack(
    spark_write_parameter_242_and_243_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_242_AND_243.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_242_and_243_init(
    spark_write_parameter_242_and_243_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_242_and_243_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_242_and_243_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_242_and_243_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_242_and_243_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_242_and_243_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_242_and_243_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_244_AND_245.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_244_and_245_pack(
    uint8_t *dst_p, const spark_write_parameter_244_and_245_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_244_AND_245.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_244_and_245_unpack(
    spark_write_parameter_244_and_245_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_244_AND_245.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_244_and_245_init(
    spark_write_parameter_244_and_245_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_244_and_245_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_244_and_245_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_244_and_245_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_244_and_245_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_244_and_245_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_244_and_245_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_246_AND_247.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_246_and_247_pack(
    uint8_t *dst_p, const spark_write_parameter_246_and_247_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_246_AND_247.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_246_and_247_unpack(
    spark_write_parameter_246_and_247_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_246_AND_247.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_246_and_247_init(
    spark_write_parameter_246_and_247_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_246_and_247_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_246_and_247_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_246_and_247_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_246_and_247_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_246_and_247_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_246_and_247_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_248_AND_249.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_248_and_249_pack(
    uint8_t *dst_p, const spark_write_parameter_248_and_249_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_248_AND_249.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_248_and_249_unpack(
    spark_write_parameter_248_and_249_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_248_AND_249.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_248_and_249_init(
    spark_write_parameter_248_and_249_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_248_and_249_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_248_and_249_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_248_and_249_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_248_and_249_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_248_and_249_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_248_and_249_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_250_AND_251.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_250_and_251_pack(
    uint8_t *dst_p, const spark_write_parameter_250_and_251_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_250_AND_251.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_250_and_251_unpack(
    spark_write_parameter_250_and_251_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_250_AND_251.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_250_and_251_init(
    spark_write_parameter_250_and_251_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_250_and_251_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_250_and_251_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_250_and_251_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_250_and_251_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_250_and_251_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_250_and_251_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_252_AND_253.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_252_and_253_pack(
    uint8_t *dst_p, const spark_write_parameter_252_and_253_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_252_AND_253.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_252_and_253_unpack(
    spark_write_parameter_252_and_253_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_252_AND_253.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_252_and_253_init(
    spark_write_parameter_252_and_253_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_252_and_253_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_252_and_253_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_252_and_253_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_252_and_253_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_252_and_253_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_252_and_253_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message WRITE_PARAMETER_254_AND_255.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_write_parameter_254_and_255_pack(
    uint8_t *dst_p, const spark_write_parameter_254_and_255_t *src_p,
    size_t size);

/**
 * Unpack message WRITE_PARAMETER_254_AND_255.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_write_parameter_254_and_255_unpack(
    spark_write_parameter_254_and_255_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WRITE_PARAMETER_254_AND_255.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_write_parameter_254_and_255_init(
    spark_write_parameter_254_and_255_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_254_and_255_first_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_254_and_255_first_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_254_and_255_first_parameter_value_is_in_range(
    uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_write_parameter_254_and_255_second_parameter_value_encode(
    double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_write_parameter_254_and_255_second_parameter_value_decode(
    uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_write_parameter_254_and_255_second_parameter_value_is_in_range(
    uint32_t value);

/**
 * Pack message START_FOLLOWER_MODE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_start_follower_mode_pack(uint8_t *dst_p,
                                   const spark_start_follower_mode_t *src_p,
                                   size_t size);

/**
 * Unpack message START_FOLLOWER_MODE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_start_follower_mode_unpack(spark_start_follower_mode_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from START_FOLLOWER_MODE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_start_follower_mode_init(spark_start_follower_mode_t *msg_p);

/**
 * Pack message START_FOLLOWER_MODE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_start_follower_mode_response_pack(
    uint8_t *dst_p, const spark_start_follower_mode_response_t *src_p,
    size_t size);

/**
 * Unpack message START_FOLLOWER_MODE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_start_follower_mode_response_unpack(
    spark_start_follower_mode_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from START_FOLLOWER_MODE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_start_follower_mode_response_init(
    spark_start_follower_mode_response_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_start_follower_mode_response_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_start_follower_mode_response_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_start_follower_mode_response_status_is_in_range(uint8_t value);

/**
 * Pack message STOP_FOLLOWER_MODE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_stop_follower_mode_pack(uint8_t *dst_p,
                                  const spark_stop_follower_mode_t *src_p,
                                  size_t size);

/**
 * Unpack message STOP_FOLLOWER_MODE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_stop_follower_mode_unpack(spark_stop_follower_mode_t *dst_p,
                                    const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from STOP_FOLLOWER_MODE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_stop_follower_mode_init(spark_stop_follower_mode_t *msg_p);

/**
 * Pack message STOP_FOLLOWER_MODE_RESPONSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_stop_follower_mode_response_pack(
    uint8_t *dst_p, const spark_stop_follower_mode_response_t *src_p,
    size_t size);

/**
 * Unpack message STOP_FOLLOWER_MODE_RESPONSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_stop_follower_mode_response_unpack(
    spark_stop_follower_mode_response_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from STOP_FOLLOWER_MODE_RESPONSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_stop_follower_mode_response_init(
    spark_stop_follower_mode_response_t *msg_p);

/**
 * Pack message ENTER_SWDL_CAN_BOOTLOADER.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_enter_swdl_can_bootloader_pack(
    uint8_t *dst_p, const spark_enter_swdl_can_bootloader_t *src_p,
    size_t size);

/**
 * Unpack message ENTER_SWDL_CAN_BOOTLOADER.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_enter_swdl_can_bootloader_unpack(
    spark_enter_swdl_can_bootloader_t *dst_p, const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ENTER_SWDL_CAN_BOOTLOADER.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_enter_swdl_can_bootloader_init(
    spark_enter_swdl_can_bootloader_t *msg_p);

/**
 * Pack message STATUS_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_0_pack(uint8_t *dst_p, const spark_status_0_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_0_unpack(spark_status_0_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_0.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_0_init(spark_status_0_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t spark_status_0_applied_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_applied_output_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_applied_output_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_0_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_0_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_motor_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_motor_temperature_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_motor_temperature_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_hard_forward_limit_reached_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_hard_forward_limit_reached_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_hard_forward_limit_reached_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_hard_reverse_limit_reached_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_hard_reverse_limit_reached_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_hard_reverse_limit_reached_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_soft_forward_limit_reached_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_soft_forward_limit_reached_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_soft_forward_limit_reached_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_soft_reverse_limit_reached_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_soft_reverse_limit_reached_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_soft_reverse_limit_reached_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_inverted_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_inverted_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_inverted_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_0_primary_heartbeat_lock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_primary_heartbeat_lock_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_primary_heartbeat_lock_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_0_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_0_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_0_reserved_is_in_range(uint16_t value);

/**
 * Pack message STATUS_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_1_pack(uint8_t *dst_p, const spark_status_1_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_1_unpack(spark_status_1_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_1_init(spark_status_1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_other_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_other_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_other_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_motor_type_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_motor_type_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_motor_type_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_sensor_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_sensor_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_sensor_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_can_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_can_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_can_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_temperature_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_temperature_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_temperature_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_drv_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_drv_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_drv_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_esc_eeprom_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_esc_eeprom_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_esc_eeprom_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_firmware_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_firmware_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_firmware_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_reserved_actives_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_reserved_actives_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_reserved_actives_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_brownout_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_brownout_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_brownout_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_overcurrent_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_overcurrent_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_overcurrent_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_esc_eeprom_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_esc_eeprom_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_esc_eeprom_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_ext_eeprom_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_ext_eeprom_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_ext_eeprom_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_sensor_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_sensor_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_sensor_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_stall_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_stall_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_stall_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_has_reset_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_has_reset_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_has_reset_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_other_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_other_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_other_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_other_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_other_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_other_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_motor_type_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_motor_type_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_motor_type_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_sensor_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_sensor_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_sensor_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_can_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_can_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_can_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_temperature_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_temperature_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_temperature_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_drv_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_drv_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_drv_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_esc_eeprom_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_esc_eeprom_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_esc_eeprom_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_firmware_sticky_fault_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_firmware_sticky_fault_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_firmware_sticky_fault_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_reserved_stickies_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_reserved_stickies_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_reserved_stickies_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_brownout_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_brownout_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_brownout_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_overcurrent_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_overcurrent_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_overcurrent_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_esc_eeprom_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_esc_eeprom_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_esc_eeprom_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_ext_eeprom_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_ext_eeprom_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_ext_eeprom_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_sensor_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_sensor_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_sensor_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_stall_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_stall_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_stall_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_has_reset_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_has_reset_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_has_reset_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_other_sticky_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_other_sticky_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_other_sticky_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_1_is_follower_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_is_follower_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_is_follower_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_1_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_1_reserved_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_1_reserved_is_in_range(uint16_t value);

/**
 * Pack message STATUS_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_2_pack(uint8_t *dst_p, const spark_status_2_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_2_unpack(spark_status_2_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_2_init(spark_status_2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_2_primary_encoder_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_2_primary_encoder_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_2_primary_encoder_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_2_primary_encoder_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_2_primary_encoder_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_2_primary_encoder_position_is_in_range(float value);

/**
 * Pack message STATUS_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_3_pack(uint8_t *dst_p, const spark_status_3_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_3_unpack(spark_status_3_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_3_init(spark_status_3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_3_analog_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_3_analog_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_3_analog_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spark_status_3_analog_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_3_analog_velocity_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_3_analog_velocity_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_3_analog_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_3_analog_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_3_analog_position_is_in_range(float value);

/**
 * Pack message STATUS_4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_4_pack(uint8_t *dst_p, const spark_status_4_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_4_unpack(spark_status_4_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_4_init(spark_status_4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_4_external_or_alt_encoder_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_4_external_or_alt_encoder_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_4_external_or_alt_encoder_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_4_external_or_alt_encoder_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_4_external_or_alt_encoder_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_4_external_or_alt_encoder_position_is_in_range(float value);

/**
 * Pack message STATUS_5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_5_pack(uint8_t *dst_p, const spark_status_5_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_5_unpack(spark_status_5_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_5_init(spark_status_5_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_5_duty_cycle_encoder_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_5_duty_cycle_encoder_velocity_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_5_duty_cycle_encoder_velocity_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_5_duty_cycle_encoder_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_5_duty_cycle_encoder_position_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_5_duty_cycle_encoder_position_is_in_range(float value);

/**
 * Pack message STATUS_6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_6_pack(uint8_t *dst_p, const spark_status_6_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_6_unpack(spark_status_6_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_6.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_6_init(spark_status_6_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_6_unadjusted_duty_cycle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_6_unadjusted_duty_cycle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_6_unadjusted_duty_cycle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_status_6_duty_cycle_period_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_6_duty_cycle_period_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_6_duty_cycle_period_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t spark_status_6_duty_cycle_no_signal_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_6_duty_cycle_no_signal_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_6_duty_cycle_no_signal_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spark_status_6_duty_cycle_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_6_duty_cycle_reserved_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_6_duty_cycle_reserved_is_in_range(int32_t value);

/**
 * Pack message STATUS_7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_status_7_pack(uint8_t *dst_p, const spark_status_7_t *src_p,
                        size_t size);

/**
 * Unpack message STATUS_7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_status_7_unpack(spark_status_7_t *dst_p, const uint8_t *src_p,
                          size_t size);

/**
 * Init message fields to default values from STATUS_7.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_status_7_init(spark_status_7_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
float spark_status_7_i_accumulation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_7_i_accumulation_decode(float value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_7_i_accumulation_is_in_range(float value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t spark_status_7_reserved_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_status_7_reserved_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_status_7_reserved_is_in_range(int32_t value);

/**
 * Pack message UNIQUE_ID_BROADCAST.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_unique_id_broadcast_pack(uint8_t *dst_p,
                                   const spark_unique_id_broadcast_t *src_p,
                                   size_t size);

/**
 * Unpack message UNIQUE_ID_BROADCAST.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_unique_id_broadcast_unpack(spark_unique_id_broadcast_t *dst_p,
                                     const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from UNIQUE_ID_BROADCAST.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_unique_id_broadcast_init(spark_unique_id_broadcast_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t spark_unique_id_broadcast_unique_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_unique_id_broadcast_unique_id_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_unique_id_broadcast_unique_id_is_in_range(uint32_t value);

/**
 * Pack message PERSIST_PARAMETERS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int spark_persist_parameters_pack(uint8_t *dst_p,
                                  const spark_persist_parameters_t *src_p,
                                  size_t size);

/**
 * Unpack message PERSIST_PARAMETERS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int spark_persist_parameters_unpack(spark_persist_parameters_t *dst_p,
                                    const uint8_t *src_p, size_t size);

/**
 * Init message fields to default values from PERSIST_PARAMETERS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int spark_persist_parameters_init(spark_persist_parameters_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t spark_persist_parameters_magic_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double spark_persist_parameters_magic_number_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool spark_persist_parameters_magic_number_is_in_range(uint16_t value);

#ifdef __cplusplus
}
#endif

#endif
